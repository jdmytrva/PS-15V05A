
PS15V05A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000566c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001544  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d80  08006d80  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  08006d80  08006d80  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d80  08006d80  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08006d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000290  08007018  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  08007018  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001197a  00000000  00000000  000202b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277a  00000000  00000000  00031c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000051e0  00000000  00000000  000343ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  00039590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00039d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c37e  00000000  00000000  0003ada8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b7c8  00000000  00000000  00047126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00044164  00000000  00000000  000528ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00096a52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001640  00000000  00000000  00096aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005824 	.word	0x08005824

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	08005824 	.word	0x08005824

08000210 <flash_erase_page>:
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
	while (FLASH->SR & FLASH_SR_BSY);
 8000210:	4b0e      	ldr	r3, [pc, #56]	; (800024c <flash_erase_page+0x3c>)
 8000212:	68da      	ldr	r2, [r3, #12]
 8000214:	07d2      	lsls	r2, r2, #31
 8000216:	d4fc      	bmi.n	8000212 <flash_erase_page+0x2>

		if (FLASH->SR & FLASH_SR_EOP) {
 8000218:	68da      	ldr	r2, [r3, #12]
 800021a:	0691      	lsls	r1, r2, #26
			FLASH->SR = FLASH_SR_EOP;
 800021c:	bf44      	itt	mi
 800021e:	2220      	movmi	r2, #32
 8000220:	60da      	strmi	r2, [r3, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 8000222:	691a      	ldr	r2, [r3, #16]
 8000224:	f042 0202 	orr.w	r2, r2, #2
 8000228:	611a      	str	r2, [r3, #16]
		FLASH->AR = address;
 800022a:	6158      	str	r0, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800022c:	691a      	ldr	r2, [r3, #16]
 800022e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000232:	611a      	str	r2, [r3, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <flash_erase_page+0x3c>)
 8000236:	68da      	ldr	r2, [r3, #12]
 8000238:	0692      	lsls	r2, r2, #26
 800023a:	d5fc      	bpl.n	8000236 <flash_erase_page+0x26>
		FLASH->SR = FLASH_SR_EOP;
 800023c:	2220      	movs	r2, #32
 800023e:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 8000240:	691a      	ldr	r2, [r3, #16]
 8000242:	f022 0202 	bic.w	r2, r2, #2
 8000246:	611a      	str	r2, [r3, #16]
}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <flash_unlock>:


void flash_unlock(void)
{
	  FLASH->KEYR = FLASH_KEY1;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <flash_unlock+0x10>)
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <flash_unlock+0x14>)
 8000254:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY2;
 8000256:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800025a:	605a      	str	r2, [r3, #4]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40022000 	.word	0x40022000
 8000264:	45670123 	.word	0x45670123

08000268 <flash_lock>:

void flash_lock()
{
	FLASH->CR |= FLASH_CR_LOCK;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <flash_lock+0xc>)
 800026a:	6913      	ldr	r3, [r2, #16]
 800026c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000270:	6113      	str	r3, [r2, #16]
}
 8000272:	4770      	bx	lr
 8000274:	40022000 	.word	0x40022000

08000278 <flash_write>:

void flash_write(uint32_t address,uint32_t data)
{


	while (FLASH->SR & FLASH_SR_BSY);
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <flash_write+0x44>)
 800027a:	68da      	ldr	r2, [r3, #12]
 800027c:	07d2      	lsls	r2, r2, #31
 800027e:	d4fc      	bmi.n	800027a <flash_write+0x2>
	if (FLASH->SR & FLASH_SR_EOP) {
 8000280:	68da      	ldr	r2, [r3, #12]
 8000282:	0692      	lsls	r2, r2, #26
		FLASH->SR = FLASH_SR_EOP;
 8000284:	bf44      	itt	mi
 8000286:	2220      	movmi	r2, #32
 8000288:	60da      	strmi	r2, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 800028a:	691a      	ldr	r2, [r3, #16]
 800028c:	f042 0201 	orr.w	r2, r2, #1
 8000290:	611a      	str	r2, [r3, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
 8000292:	b28b      	uxth	r3, r1
 8000294:	8003      	strh	r3, [r0, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <flash_write+0x44>)
 8000298:	68da      	ldr	r2, [r3, #12]
 800029a:	0692      	lsls	r2, r2, #26
 800029c:	d5fc      	bpl.n	8000298 <flash_write+0x20>
    		FLASH->SR = FLASH_SR_EOP;
 800029e:	2220      	movs	r2, #32


	address+=2;
	data>>=16;
    *(__IO uint16_t*)address = (uint16_t)data;
 80002a0:	0c09      	lsrs	r1, r1, #16
    		FLASH->SR = FLASH_SR_EOP;
 80002a2:	60da      	str	r2, [r3, #12]
    *(__IO uint16_t*)address = (uint16_t)data;
 80002a4:	8041      	strh	r1, [r0, #2]
    while (!(FLASH->SR & FLASH_SR_EOP));
 80002a6:	68da      	ldr	r2, [r3, #12]
 80002a8:	0692      	lsls	r2, r2, #26
 80002aa:	d5fc      	bpl.n	80002a6 <flash_write+0x2e>
    		FLASH->SR = FLASH_SR_EOP;
 80002ac:	2220      	movs	r2, #32
 80002ae:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 80002b0:	691a      	ldr	r2, [r3, #16]
 80002b2:	f022 0201 	bic.w	r2, r2, #1
 80002b6:	611a      	str	r2, [r3, #16]

}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40022000 	.word	0x40022000

080002c0 <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
void flash_write_block()
{
 80002c0:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c2:	b672      	cpsid	i
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = (void *)&LoggingData;

	logDebugD("size: ",size,0);
 80002c4:	4811      	ldr	r0, [pc, #68]	; (800030c <flash_write_block+0x4c>)
	flash_unlock();
 80002c6:	f7ff ffc3 	bl	8000250 <flash_unlock>
	logDebugD("val: ",*(source_adr + 0),0);
 80002ca:	4c11      	ldr	r4, [pc, #68]	; (8000310 <flash_write_block+0x50>)
	logDebugD("size: ",size,0);
 80002cc:	f004 ffd6 	bl	800527c <printToBufferWithoutEndUART1>
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80002d6:	480f      	ldr	r0, [pc, #60]	; (8000314 <flash_write_block+0x54>)
 80002d8:	f005 f80e 	bl	80052f8 <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 80002dc:	480b      	ldr	r0, [pc, #44]	; (800030c <flash_write_block+0x4c>)
 80002de:	f004 ffcd 	bl	800527c <printToBufferWithoutEndUART1>
 80002e2:	2200      	movs	r2, #0
 80002e4:	6821      	ldr	r1, [r4, #0]
 80002e6:	480c      	ldr	r0, [pc, #48]	; (8000318 <flash_write_block+0x58>)
 80002e8:	f005 f806 	bl	80052f8 <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80002ec:	480b      	ldr	r0, [pc, #44]	; (800031c <flash_write_block+0x5c>)
 80002ee:	f7ff ff8f 	bl	8000210 <flash_erase_page>
	for (i = 0; i < size/4; ++i)
 80002f2:	4d0b      	ldr	r5, [pc, #44]	; (8000320 <flash_write_block+0x60>)
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80002f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80002f8:	f7ff ffbe 	bl	8000278 <flash_write>
	for (i = 0; i < size/4; ++i)
 80002fc:	3004      	adds	r0, #4
 80002fe:	42a8      	cmp	r0, r5
 8000300:	d1f8      	bne.n	80002f4 <flash_write_block+0x34>
    }

	flash_lock();
 8000302:	f7ff ffb1 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000306:	b662      	cpsie	i
	__enable_irq();
	return 1;
}
 8000308:	bd38      	pop	{r3, r4, r5, pc}
 800030a:	bf00      	nop
 800030c:	0800593c 	.word	0x0800593c
 8000310:	20000878 	.word	0x20000878
 8000314:	08005944 	.word	0x08005944
 8000318:	0800594b 	.word	0x0800594b
 800031c:	0801e400 	.word	0x0801e400
 8000320:	0801e59c 	.word	0x0801e59c

08000324 <flash_read_block>:

	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
	uint32_t *dest_adr = (void *)&LoggingData;

	for (i=0; i < size/4; ++i)
 8000324:	4a05      	ldr	r2, [pc, #20]	; (800033c <flash_read_block+0x18>)
{
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <flash_read_block+0x1c>)
	for (i=0; i < size/4; ++i)
 8000328:	4906      	ldr	r1, [pc, #24]	; (8000344 <flash_read_block+0x20>)
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 800032a:	f853 0b04 	ldr.w	r0, [r3], #4
	for (i=0; i < size/4; ++i)
 800032e:	428b      	cmp	r3, r1
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000330:	f842 0b04 	str.w	r0, [r2], #4
	for (i=0; i < size/4; ++i)
 8000334:	d1f9      	bne.n	800032a <flash_read_block+0x6>
	}

	return 1;

}
 8000336:	2001      	movs	r0, #1
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000878 	.word	0x20000878
 8000340:	0801e400 	.word	0x0801e400
 8000344:	0801e59c 	.word	0x0801e59c

08000348 <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 800034a:	6804      	ldr	r4, [r0, #0]
{
 800034c:	4607      	mov	r7, r0
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 800034e:	428c      	cmp	r4, r1
{
 8000350:	460d      	mov	r5, r1
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000352:	d301      	bcc.n	8000358 <flash_read+0x10>
 8000354:	4294      	cmp	r4, r2
 8000356:	d91b      	bls.n	8000390 <flash_read+0x48>
	{
		return EEpromValue;
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 8000358:	2600      	movs	r6, #0
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <flash_read+0x4c>)
		logDebugD("Fail to read address: ",address,0);
 800035c:	480e      	ldr	r0, [pc, #56]	; (8000398 <flash_read+0x50>)
		EEpromReadStatus = 0;
 800035e:	701e      	strb	r6, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000360:	f004 ff8c 	bl	800527c <printToBufferWithoutEndUART1>
 8000364:	4632      	mov	r2, r6
 8000366:	4639      	mov	r1, r7
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <flash_read+0x54>)
 800036a:	f004 ffc5 	bl	80052f8 <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 800036e:	480a      	ldr	r0, [pc, #40]	; (8000398 <flash_read+0x50>)
 8000370:	f004 ff84 	bl	800527c <printToBufferWithoutEndUART1>
 8000374:	4621      	mov	r1, r4
 8000376:	4632      	mov	r2, r6
 8000378:	4809      	ldr	r0, [pc, #36]	; (80003a0 <flash_read+0x58>)
 800037a:	f004 ffbd 	bl	80052f8 <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 800037e:	4806      	ldr	r0, [pc, #24]	; (8000398 <flash_read+0x50>)
 8000380:	f004 ff7c 	bl	800527c <printToBufferWithoutEndUART1>
 8000384:	4632      	mov	r2, r6
 8000386:	4907      	ldr	r1, [pc, #28]	; (80003a4 <flash_read+0x5c>)
 8000388:	4807      	ldr	r0, [pc, #28]	; (80003a8 <flash_read+0x60>)
 800038a:	f004 ffb5 	bl	80052f8 <printToBufferUART1D>
		return MinValue;
 800038e:	462c      	mov	r4, r5
	}
}
 8000390:	4620      	mov	r0, r4
 8000392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000394:	20000000 	.word	0x20000000
 8000398:	0800593c 	.word	0x0800593c
 800039c:	08005951 	.word	0x08005951
 80003a0:	08005968 	.word	0x08005968
 80003a4:	0801ec00 	.word	0x0801ec00
 80003a8:	0800597a 	.word	0x0800597a

080003ac <CalibrationWriteToFlash>:
	__enable_irq();

}

uint8_t CalibrationWriteToFlash(void)
{
 80003ac:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationData.CRC_AddresInEEprom);
 80003ae:	4c19      	ldr	r4, [pc, #100]	; (8000414 <CalibrationWriteToFlash+0x68>)
 80003b0:	6860      	ldr	r0, [r4, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationData.CRC_AddresInEEprom, CalibrationData.CRC_data);
 80003b6:	e9d4 1000 	ldrd	r1, r0, [r4]
 80003ba:	f7ff ff5d 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent);
 80003be:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80003c2:	f7ff ff59 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent1);
 80003c6:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80003ca:	f7ff ff55 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent_AddresInEEprom, CalibrationData.CalibrationValueForCurrent_x50);
 80003ce:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 80003d2:	f7ff ff51 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent1_AddresInEEprom, CalibrationData.CalibrationValueForCurrent_x1);
 80003d6:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80003da:	f7ff ff4d 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage_AddresInEEprom, CalibrationData.CalibrationValueForVoltage);
 80003de:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 80003e2:	f7ff ff49 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage1_AddresInEEprom, CalibrationData.CalibrationValueForU_OUT);
 80003e6:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 80003ea:	f7ff ff45 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage2_AddresInEEprom, CalibrationData.CalibrationValueForU_IN);
 80003ee:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 80003f2:	f7ff ff41 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationData.ResistanceComp_Ishunt_Wires);
 80003f6:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 80003fa:	f7ff ff3d 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_MOSFET_AddresInEEprom, CalibrationData.ResistanceComp_MOSFET);
 80003fe:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 8000402:	f7ff ff39 	bl	8000278 <flash_write>
	logDebug("CalibrationWriteToFlash ");
 8000406:	4804      	ldr	r0, [pc, #16]	; (8000418 <CalibrationWriteToFlash+0x6c>)
 8000408:	f004 ff38 	bl	800527c <printToBufferWithoutEndUART1>
 800040c:	4803      	ldr	r0, [pc, #12]	; (800041c <CalibrationWriteToFlash+0x70>)
 800040e:	f004 fecf 	bl	80051b0 <printToBufferUART1>

}
 8000412:	bd10      	pop	{r4, pc}
 8000414:	20000004 	.word	0x20000004
 8000418:	0800593c 	.word	0x0800593c
 800041c:	08005991 	.word	0x08005991

08000420 <CalibrationFactoryWriteToFlash>:
uint8_t CalibrationFactoryWriteToFlash(void)
{
 8000420:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationDataFactory.CRC_AddresInEEprom);
 8000422:	4c19      	ldr	r4, [pc, #100]	; (8000488 <CalibrationFactoryWriteToFlash+0x68>)
 8000424:	6860      	ldr	r0, [r4, #4]
 8000426:	f7ff fef3 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationDataFactory.CRC_AddresInEEprom, CalibrationDataFactory.CRC_data);
 800042a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800042e:	f7ff ff23 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent);
 8000432:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000436:	f7ff ff1f 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent1);
 800043a:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800043e:	f7ff ff1b 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent_x50);
 8000442:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000446:	f7ff ff17 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent_x1);
 800044a:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800044e:	f7ff ff13 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage);
 8000452:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000456:	f7ff ff0f 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForU_OUT);
 800045a:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800045e:	f7ff ff0b 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage2_AddresInEEprom, CalibrationDataFactory.CalibrationValueForU_IN);
 8000462:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000466:	f7ff ff07 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationDataFactory.ResistanceComp_Ishunt_Wires);
 800046a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800046e:	f7ff ff03 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_MOSFET_AddresInEEprom, CalibrationDataFactory.ResistanceComp_MOSFET);
 8000472:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 8000476:	f7ff feff 	bl	8000278 <flash_write>
	logDebug("CalibrationFactoryWriteToFlash ");
 800047a:	4804      	ldr	r0, [pc, #16]	; (800048c <CalibrationFactoryWriteToFlash+0x6c>)
 800047c:	f004 fefe 	bl	800527c <printToBufferWithoutEndUART1>
 8000480:	4803      	ldr	r0, [pc, #12]	; (8000490 <CalibrationFactoryWriteToFlash+0x70>)
 8000482:	f004 fe95 	bl	80051b0 <printToBufferUART1>
}
 8000486:	bd10      	pop	{r4, pc}
 8000488:	20000054 	.word	0x20000054
 800048c:	0800593c 	.word	0x0800593c
 8000490:	080059aa 	.word	0x080059aa

08000494 <CalibrationReadFromFlash>:
uint8_t CalibrationReadFromFlash(void)
{
 8000494:	b538      	push	{r3, r4, r5, lr}
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 8000496:	4c25      	ldr	r4, [pc, #148]	; (800052c <CalibrationReadFromFlash+0x98>)
 8000498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800049c:	2100      	movs	r1, #0
 800049e:	6860      	ldr	r0, [r4, #4]
 80004a0:	f7ff ff52 	bl	8000348 <flash_read>
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004a8:	6020      	str	r0, [r4, #0]
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004aa:	2100      	movs	r1, #0
 80004ac:	68e0      	ldr	r0, [r4, #12]
 80004ae:	f7ff ff4b 	bl	8000348 <flash_read>
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004b6:	60a0      	str	r0, [r4, #8]
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004b8:	2100      	movs	r1, #0
 80004ba:	6960      	ldr	r0, [r4, #20]
 80004bc:	f7ff ff44 	bl	8000348 <flash_read>
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004c0:	4d1b      	ldr	r5, [pc, #108]	; (8000530 <CalibrationReadFromFlash+0x9c>)
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004c2:	6120      	str	r0, [r4, #16]
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004c4:	462a      	mov	r2, r5
 80004c6:	210a      	movs	r1, #10
 80004c8:	69e0      	ldr	r0, [r4, #28]
 80004ca:	f7ff ff3d 	bl	8000348 <flash_read>
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004ce:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004d0:	61a0      	str	r0, [r4, #24]
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004d2:	210a      	movs	r1, #10
 80004d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80004d6:	f7ff ff37 	bl	8000348 <flash_read>
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004da:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004dc:	6220      	str	r0, [r4, #32]
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004de:	210a      	movs	r1, #10
 80004e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004e2:	f7ff ff31 	bl	8000348 <flash_read>
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004e6:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004e8:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004ea:	210a      	movs	r1, #10
 80004ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80004ee:	f7ff ff2b 	bl	8000348 <flash_read>
	CalibrationData.CalibrationValueForU_IN = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80004f2:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004f4:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationData.CalibrationValueForU_IN = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80004f6:	210a      	movs	r1, #10
 80004f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80004fa:	f7ff ff25 	bl	8000348 <flash_read>
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 80004fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
	CalibrationData.CalibrationValueForU_IN = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 8000502:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 8000504:	2146      	movs	r1, #70	; 0x46
 8000506:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000508:	f7ff ff1e 	bl	8000348 <flash_read>
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,300);
 800050c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000510:	210a      	movs	r1, #10
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 8000512:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,300);
 8000514:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000516:	f7ff ff17 	bl	8000348 <flash_read>
 800051a:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <CalibrationReadFromFlash+0xa0>)
 800051e:	f004 fead 	bl	800527c <printToBufferWithoutEndUART1>
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <CalibrationReadFromFlash+0xa4>)
 8000524:	f004 fe44 	bl	80051b0 <printToBufferUART1>
}
 8000528:	bd38      	pop	{r3, r4, r5, pc}
 800052a:	bf00      	nop
 800052c:	20000004 	.word	0x20000004
 8000530:	000186a0 	.word	0x000186a0
 8000534:	0800593c 	.word	0x0800593c
 8000538:	080059ca 	.word	0x080059ca

0800053c <CalibrationReadFromFlashForVerify>:
uint8_t CalibrationReadFromFlashForVerify(void)
{
 800053c:	b538      	push	{r3, r4, r5, lr}
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 800053e:	4c25      	ldr	r4, [pc, #148]	; (80005d4 <CalibrationReadFromFlashForVerify+0x98>)
 8000540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000544:	2100      	movs	r1, #0
 8000546:	6860      	ldr	r0, [r4, #4]
 8000548:	f7ff fefe 	bl	8000348 <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800054c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 8000550:	6020      	str	r0, [r4, #0]
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 8000552:	2100      	movs	r1, #0
 8000554:	68e0      	ldr	r0, [r4, #12]
 8000556:	f7ff fef7 	bl	8000348 <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800055a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800055e:	60a0      	str	r0, [r4, #8]
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 8000560:	2100      	movs	r1, #0
 8000562:	6960      	ldr	r0, [r4, #20]
 8000564:	f7ff fef0 	bl	8000348 <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000568:	4d1b      	ldr	r5, [pc, #108]	; (80005d8 <CalibrationReadFromFlashForVerify+0x9c>)
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800056a:	6120      	str	r0, [r4, #16]
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 800056c:	462a      	mov	r2, r5
 800056e:	210a      	movs	r1, #10
 8000570:	69e0      	ldr	r0, [r4, #28]
 8000572:	f7ff fee9 	bl	8000348 <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000576:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000578:	61a0      	str	r0, [r4, #24]
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 800057a:	210a      	movs	r1, #10
 800057c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800057e:	f7ff fee3 	bl	8000348 <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000582:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000584:	6220      	str	r0, [r4, #32]
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000586:	210a      	movs	r1, #10
 8000588:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800058a:	f7ff fedd 	bl	8000348 <flash_read>
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 800058e:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000590:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 8000592:	210a      	movs	r1, #10
 8000594:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000596:	f7ff fed7 	bl	8000348 <flash_read>
	CalibrationDataForVerify.CalibrationValueForU_IN = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 800059a:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 800059c:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationDataForVerify.CalibrationValueForU_IN = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 800059e:	210a      	movs	r1, #10
 80005a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80005a2:	f7ff fed1 	bl	8000348 <flash_read>
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 80005a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
	CalibrationDataForVerify.CalibrationValueForU_IN = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005aa:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 80005ac:	2146      	movs	r1, #70	; 0x46
 80005ae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005b0:	f7ff feca 	bl	8000348 <flash_read>
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,300);
 80005b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005b8:	210a      	movs	r1, #10
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 80005ba:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,300);
 80005bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80005be:	f7ff fec3 	bl	8000348 <flash_read>
 80005c2:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlashForVerify ");
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <CalibrationReadFromFlashForVerify+0xa0>)
 80005c6:	f004 fe59 	bl	800527c <printToBufferWithoutEndUART1>
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <CalibrationReadFromFlashForVerify+0xa4>)
 80005cc:	f004 fdf0 	bl	80051b0 <printToBufferUART1>
}
 80005d0:	bd38      	pop	{r3, r4, r5, pc}
 80005d2:	bf00      	nop
 80005d4:	200000a4 	.word	0x200000a4
 80005d8:	000186a0 	.word	0x000186a0
 80005dc:	0800593c 	.word	0x0800593c
 80005e0:	080059e4 	.word	0x080059e4

080005e4 <SettingsWriteToFlash>:
//==============
uint8_t SettingsWriteToFlash(void)
{
 80005e4:	b510      	push	{r4, lr}
	flash_erase_page( SettingsData.CRC_AddresInEEprom);
 80005e6:	4c17      	ldr	r4, [pc, #92]	; (8000644 <SettingsWriteToFlash+0x60>)
 80005e8:	6860      	ldr	r0, [r4, #4]
 80005ea:	f7ff fe11 	bl	8000210 <flash_erase_page>
	flash_write( SettingsData.CRC_AddresInEEprom, SettingsData.CRC_data);
 80005ee:	e9d4 1000 	ldrd	r1, r0, [r4]
 80005f2:	f7ff fe41 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option1_AddresInEEprom, SettingsData.Option1);
 80005f6:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80005fa:	f7ff fe3d 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeTime_AddresInEEprom, SettingsData.ChargeTime);
 80005fe:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000602:	f7ff fe39 	bl	8000278 <flash_write>
	flash_write( SettingsData.LowVoltage_AddresInEEprom, SettingsData.LowVoltage);
 8000606:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800060a:	f7ff fe35 	bl	8000278 <flash_write>
	flash_write( SettingsData.MaxVoltage_AddresInEEprom, SettingsData.MaxVoltage);
 800060e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000612:	f7ff fe31 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_Chrg_time_AddresInEEprom, SettingsData.Swing_Chrg_time);
 8000616:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 800061a:	f7ff fe2d 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_DChrg_time_AddresInEEprom, SettingsData.Swing_DChrg_time);
 800061e:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 8000622:	f7ff fe29 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeAdapt_AddresInEEprom, SettingsData.ChargeAdapt);
 8000626:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800062a:	f7ff fe25 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option2_AddresInEEprom, SettingsData.Option2);
 800062e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 8000632:	f7ff fe21 	bl	8000278 <flash_write>
	logDebug("SettingsWriteToFlash ");
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <SettingsWriteToFlash+0x64>)
 8000638:	f004 fe20 	bl	800527c <printToBufferWithoutEndUART1>
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <SettingsWriteToFlash+0x68>)
 800063e:	f004 fdb7 	bl	80051b0 <printToBufferUART1>
}
 8000642:	bd10      	pop	{r4, pc}
 8000644:	20000154 	.word	0x20000154
 8000648:	0800593c 	.word	0x0800593c
 800064c:	08005a07 	.word	0x08005a07

08000650 <SettingsFactoryWriteToFlash>:
uint8_t SettingsFactoryWriteToFlash(void)
{
 8000650:	b510      	push	{r4, lr}
	flash_erase_page( SettingsDataFactory.CRC_AddresInEEprom);
 8000652:	4c17      	ldr	r4, [pc, #92]	; (80006b0 <SettingsFactoryWriteToFlash+0x60>)
 8000654:	6860      	ldr	r0, [r4, #4]
 8000656:	f7ff fddb 	bl	8000210 <flash_erase_page>
	flash_write( SettingsDataFactory.CRC_AddresInEEprom, SettingsDataFactory.CRC_data);
 800065a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800065e:	f7ff fe0b 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option1_AddresInEEprom, SettingsDataFactory.Option1);
 8000662:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000666:	f7ff fe07 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeTime_AddresInEEprom, SettingsDataFactory.ChargeTime);
 800066a:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800066e:	f7ff fe03 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.LowVoltage_AddresInEEprom, SettingsDataFactory.LowVoltage);
 8000672:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000676:	f7ff fdff 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.MaxVoltage_AddresInEEprom, SettingsDataFactory.MaxVoltage);
 800067a:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800067e:	f7ff fdfb 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_Chrg_time_AddresInEEprom, SettingsDataFactory.Swing_Chrg_time);
 8000682:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000686:	f7ff fdf7 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_DChrg_time_AddresInEEprom, SettingsDataFactory.Swing_DChrg_time);
 800068a:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800068e:	f7ff fdf3 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
 8000692:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000696:	f7ff fdef 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
 800069a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800069e:	f7ff fdeb 	bl	8000278 <flash_write>
	logDebug("SettingsFactoryWriteToFlash ");
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <SettingsFactoryWriteToFlash+0x64>)
 80006a4:	f004 fdea 	bl	800527c <printToBufferWithoutEndUART1>
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <SettingsFactoryWriteToFlash+0x68>)
 80006aa:	f004 fd81 	bl	80051b0 <printToBufferUART1>
}
 80006ae:	bd10      	pop	{r4, pc}
 80006b0:	2000019c 	.word	0x2000019c
 80006b4:	0800593c 	.word	0x0800593c
 80006b8:	08005a1d 	.word	0x08005a1d

080006bc <SettingsReadFromFlash>:
uint8_t SettingsReadFromFlash(void)
{
 80006bc:	b510      	push	{r4, lr}
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006be:	4c22      	ldr	r4, [pc, #136]	; (8000748 <SettingsReadFromFlash+0x8c>)
 80006c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c4:	2100      	movs	r1, #0
 80006c6:	6860      	ldr	r0, [r4, #4]
 80006c8:	f7ff fe3e 	bl	8000348 <flash_read>
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006cc:	220a      	movs	r2, #10
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006ce:	6020      	str	r0, [r4, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006d0:	2101      	movs	r1, #1
 80006d2:	68e0      	ldr	r0, [r4, #12]
 80006d4:	f7ff fe38 	bl	8000348 <flash_read>
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006dc:	60a0      	str	r0, [r4, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006de:	2101      	movs	r1, #1
 80006e0:	6960      	ldr	r0, [r4, #20]
 80006e2:	f7ff fe31 	bl	8000348 <flash_read>
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006e6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006ea:	6120      	str	r0, [r4, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006ec:	2101      	movs	r1, #1
 80006ee:	69e0      	ldr	r0, [r4, #28]
 80006f0:	f7ff fe2a 	bl	8000348 <flash_read>
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 80006f4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006f8:	61a0      	str	r0, [r4, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 80006fa:	2101      	movs	r1, #1
 80006fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80006fe:	f7ff fe23 	bl	8000348 <flash_read>
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000702:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000706:	6220      	str	r0, [r4, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000708:	2100      	movs	r1, #0
 800070a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800070c:	f7ff fe1c 	bl	8000348 <flash_read>
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000710:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000714:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000716:	2100      	movs	r1, #0
 8000718:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800071a:	f7ff fe15 	bl	8000348 <flash_read>
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800071e:	2264      	movs	r2, #100	; 0x64
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000720:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000722:	2100      	movs	r1, #0
 8000724:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000726:	f7ff fe0f 	bl	8000348 <flash_read>
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 800072a:	2203      	movs	r2, #3
 800072c:	2101      	movs	r1, #1
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800072e:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000730:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000732:	f7ff fe09 	bl	8000348 <flash_read>
 8000736:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <SettingsReadFromFlash+0x90>)
 800073a:	f004 fd9f 	bl	800527c <printToBufferWithoutEndUART1>
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <SettingsReadFromFlash+0x94>)
 8000740:	f004 fd36 	bl	80051b0 <printToBufferUART1>
}
 8000744:	bd10      	pop	{r4, pc}
 8000746:	bf00      	nop
 8000748:	20000154 	.word	0x20000154
 800074c:	0800593c 	.word	0x0800593c
 8000750:	08005a3a 	.word	0x08005a3a

08000754 <SettingsReadFromFlashForVerify>:
uint8_t SettingsReadFromFlashForVerify(void)
{
 8000754:	b510      	push	{r4, lr}
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000756:	4c22      	ldr	r4, [pc, #136]	; (80007e0 <SettingsReadFromFlashForVerify+0x8c>)
 8000758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075c:	2100      	movs	r1, #0
 800075e:	6860      	ldr	r0, [r4, #4]
 8000760:	f7ff fdf2 	bl	8000348 <flash_read>
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000764:	220a      	movs	r2, #10
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000766:	6020      	str	r0, [r4, #0]
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000768:	2101      	movs	r1, #1
 800076a:	68e0      	ldr	r0, [r4, #12]
 800076c:	f7ff fdec 	bl	8000348 <flash_read>
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000774:	60a0      	str	r0, [r4, #8]
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000776:	2101      	movs	r1, #1
 8000778:	6960      	ldr	r0, [r4, #20]
 800077a:	f7ff fde5 	bl	8000348 <flash_read>
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800077e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000782:	6120      	str	r0, [r4, #16]
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000784:	2101      	movs	r1, #1
 8000786:	69e0      	ldr	r0, [r4, #28]
 8000788:	f7ff fdde 	bl	8000348 <flash_read>
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 800078c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000790:	61a0      	str	r0, [r4, #24]
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 8000792:	2101      	movs	r1, #1
 8000794:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000796:	f7ff fdd7 	bl	8000348 <flash_read>
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 800079a:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 800079e:	6220      	str	r0, [r4, #32]
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007a0:	2100      	movs	r1, #0
 80007a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80007a4:	f7ff fdd0 	bl	8000348 <flash_read>
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007a8:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007ac:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007ae:	2100      	movs	r1, #0
 80007b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80007b2:	f7ff fdc9 	bl	8000348 <flash_read>
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007b6:	2264      	movs	r2, #100	; 0x64
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007b8:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007ba:	2100      	movs	r1, #0
 80007bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007be:	f7ff fdc3 	bl	8000348 <flash_read>
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007c2:	2203      	movs	r2, #3
 80007c4:	2101      	movs	r1, #1
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007c6:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007c8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80007ca:	f7ff fdbd 	bl	8000348 <flash_read>
 80007ce:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlashForVerify ");
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <SettingsReadFromFlashForVerify+0x90>)
 80007d2:	f004 fd53 	bl	800527c <printToBufferWithoutEndUART1>
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <SettingsReadFromFlashForVerify+0x94>)
 80007d8:	f004 fcea 	bl	80051b0 <printToBufferUART1>
}
 80007dc:	bd10      	pop	{r4, pc}
 80007de:	bf00      	nop
 80007e0:	200001e4 	.word	0x200001e4
 80007e4:	0800593c 	.word	0x0800593c
 80007e8:	08005a51 	.word	0x08005a51

080007ec <DataWhenPowerOff_Factory_WriteToFlash>:
	flash_write( SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent);
	flash_write( SaveDataWhenPowerOff.OutState_AddresInEEprom, SaveDataWhenPowerOff.OutState);
	logDebug("DataWhenPowerOffWriteToFlash ");
}
uint8_t DataWhenPowerOff_Factory_WriteToFlash(void)
{
 80007ec:	b510      	push	{r4, lr}
	flash_erase_page( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom);
 80007ee:	4c0d      	ldr	r4, [pc, #52]	; (8000824 <DataWhenPowerOff_Factory_WriteToFlash+0x38>)
 80007f0:	6860      	ldr	r0, [r4, #4]
 80007f2:	f7ff fd0d 	bl	8000210 <flash_erase_page>
	flash_write( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom, SaveDataWhenPowerOffFactory.CRC_data);
 80007f6:	e9d4 1000 	ldrd	r1, r0, [r4]
 80007fa:	f7ff fd3d 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargePrevious_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargePreviousValue);
 80007fe:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000802:	f7ff fd39 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent);
 8000806:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800080a:	f7ff fd35 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
 800080e:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000812:	f7ff fd31 	bl	8000278 <flash_write>
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <DataWhenPowerOff_Factory_WriteToFlash+0x3c>)
 8000818:	f004 fd30 	bl	800527c <printToBufferWithoutEndUART1>
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <DataWhenPowerOff_Factory_WriteToFlash+0x40>)
 800081e:	f004 fcc7 	bl	80051b0 <printToBufferUART1>
}
 8000822:	bd10      	pop	{r4, pc}
 8000824:	20000114 	.word	0x20000114
 8000828:	0800593c 	.word	0x0800593c
 800082c:	08005a71 	.word	0x08005a71

08000830 <DataWhenPowerOffReadFromFlash>:
uint8_t DataWhenPowerOffReadFromFlash(void)
{
 8000830:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 8000832:	4c11      	ldr	r4, [pc, #68]	; (8000878 <DataWhenPowerOffReadFromFlash+0x48>)
 8000834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000838:	2100      	movs	r1, #0
 800083a:	6860      	ldr	r0, [r4, #4]
 800083c:	f7ff fd84 	bl	8000348 <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000840:	4d0e      	ldr	r5, [pc, #56]	; (800087c <DataWhenPowerOffReadFromFlash+0x4c>)
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 8000842:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000844:	462a      	mov	r2, r5
 8000846:	2100      	movs	r1, #0
 8000848:	68e0      	ldr	r0, [r4, #12]
 800084a:	f7ff fd7d 	bl	8000348 <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800084e:	462a      	mov	r2, r5
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000850:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 8000852:	2100      	movs	r1, #0
 8000854:	6960      	ldr	r0, [r4, #20]
 8000856:	f7ff fd77 	bl	8000348 <flash_read>
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 800085a:	2201      	movs	r2, #1
 800085c:	2100      	movs	r1, #0
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800085e:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 8000860:	69e0      	ldr	r0, [r4, #28]
 8000862:	f7ff fd71 	bl	8000348 <flash_read>
 8000866:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <DataWhenPowerOffReadFromFlash+0x50>)
 800086a:	f004 fd07 	bl	800527c <printToBufferWithoutEndUART1>
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <DataWhenPowerOffReadFromFlash+0x54>)
 8000870:	f004 fc9e 	bl	80051b0 <printToBufferUART1>
}
 8000874:	bd38      	pop	{r3, r4, r5, pc}
 8000876:	bf00      	nop
 8000878:	200000f4 	.word	0x200000f4
 800087c:	ee6b2800 	.word	0xee6b2800
 8000880:	0800593c 	.word	0x0800593c
 8000884:	08005a98 	.word	0x08005a98

08000888 <DataWhenPowerOffReadFromFlashForVerify>:
uint8_t DataWhenPowerOffReadFromFlashForVerify(void)
{
 8000888:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 800088a:	4c11      	ldr	r4, [pc, #68]	; (80008d0 <DataWhenPowerOffReadFromFlashForVerify+0x48>)
 800088c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000890:	2100      	movs	r1, #0
 8000892:	6860      	ldr	r0, [r4, #4]
 8000894:	f7ff fd58 	bl	8000348 <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000898:	4d0e      	ldr	r5, [pc, #56]	; (80008d4 <DataWhenPowerOffReadFromFlashForVerify+0x4c>)
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 800089a:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 800089c:	462a      	mov	r2, r5
 800089e:	2100      	movs	r1, #0
 80008a0:	68e0      	ldr	r0, [r4, #12]
 80008a2:	f7ff fd51 	bl	8000348 <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008a6:	462a      	mov	r2, r5
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008a8:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008aa:	2100      	movs	r1, #0
 80008ac:	6960      	ldr	r0, [r4, #20]
 80008ae:	f7ff fd4b 	bl	8000348 <flash_read>
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2100      	movs	r1, #0
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008b6:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 80008b8:	69e0      	ldr	r0, [r4, #28]
 80008ba:	f7ff fd45 	bl	8000348 <flash_read>
 80008be:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlashForVerify ");
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <DataWhenPowerOffReadFromFlashForVerify+0x50>)
 80008c2:	f004 fcdb 	bl	800527c <printToBufferWithoutEndUART1>
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <DataWhenPowerOffReadFromFlashForVerify+0x54>)
 80008c8:	f004 fc72 	bl	80051b0 <printToBufferUART1>
}
 80008cc:	bd38      	pop	{r3, r4, r5, pc}
 80008ce:	bf00      	nop
 80008d0:	20000134 	.word	0x20000134
 80008d4:	ee6b2800 	.word	0xee6b2800
 80008d8:	0800593c 	.word	0x0800593c
 80008dc:	08005ab7 	.word	0x08005ab7

080008e0 <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 80008e0:	b570      	push	{r4, r5, r6, lr}
		EEpromReadStatus = 1;
 80008e2:	2401      	movs	r4, #1
 80008e4:	4d0e      	ldr	r5, [pc, #56]	; (8000920 <ReadFromFlash+0x40>)
 80008e6:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
	    __disable_irq();

	    DataWhenPowerOffReadFromFlash();
 80008ea:	f7ff ffa1 	bl	8000830 <DataWhenPowerOffReadFromFlash>
	    SettingsReadFromFlash();
 80008ee:	f7ff fee5 	bl	80006bc <SettingsReadFromFlash>
	    CalibrationReadFromFlash();
 80008f2:	f7ff fdcf 	bl	8000494 <CalibrationReadFromFlash>
  __ASM volatile ("cpsie i" : : : "memory");
 80008f6:	b662      	cpsie	i


		__enable_irq();
		if (EEpromReadStatus == 0)
 80008f8:	782e      	ldrb	r6, [r5, #0]
		{
			logDebug("Read from EEprom - FAIL ");
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <ReadFromFlash+0x44>)
		if (EEpromReadStatus == 0)
 80008fc:	b93e      	cbnz	r6, 800090e <ReadFromFlash+0x2e>
			logDebug("Read from EEprom - FAIL ");
 80008fe:	f004 fcbd 	bl	800527c <printToBufferWithoutEndUART1>
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <ReadFromFlash+0x48>)
 8000904:	f004 fc54 	bl	80051b0 <printToBufferUART1>
			EEpromReadStatus = 1;
 8000908:	702c      	strb	r4, [r5, #0]
		{
			logDebug("Read from EEprom - SUCCESS");
			EEpromReadStatus = 1;
			return 1;
		}
}
 800090a:	4630      	mov	r0, r6
 800090c:	bd70      	pop	{r4, r5, r6, pc}
			logDebug("Read from EEprom - SUCCESS");
 800090e:	f004 fcb5 	bl	800527c <printToBufferWithoutEndUART1>
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <ReadFromFlash+0x4c>)
 8000914:	f004 fc4c 	bl	80051b0 <printToBufferUART1>
			return 1;
 8000918:	4626      	mov	r6, r4
			EEpromReadStatus = 1;
 800091a:	702c      	strb	r4, [r5, #0]
			return 1;
 800091c:	e7f5      	b.n	800090a <ReadFromFlash+0x2a>
 800091e:	bf00      	nop
 8000920:	20000000 	.word	0x20000000
 8000924:	0800593c 	.word	0x0800593c
 8000928:	08005adf 	.word	0x08005adf
 800092c:	08005af8 	.word	0x08005af8

08000930 <CalcCRC8>:



char CalcCRC8(char *Ptr, char Num, char CRC1)
{
 8000930:	b570      	push	{r4, r5, r6, lr}
 8000932:	4614      	mov	r4, r2
 8000934:	b0c0      	sub	sp, #256	; 0x100
 8000936:	4606      	mov	r6, r0
 8000938:	460d      	mov	r5, r1
   const char CrcTable[256] = {
 800093a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800093e:	4668      	mov	r0, sp
 8000940:	4907      	ldr	r1, [pc, #28]	; (8000960 <CalcCRC8+0x30>)
 8000942:	f004 ff59 	bl	80057f8 <memcpy>
 8000946:	4620      	mov	r0, r4
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 8000948:	f816 2b01 	ldrb.w	r2, [r6], #1
 800094c:	3d01      	subs	r5, #1
 800094e:	4042      	eors	r2, r0
 8000950:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8000954:	f81d 0002 	ldrb.w	r0, [sp, r2]
 8000958:	d1f6      	bne.n	8000948 <CalcCRC8+0x18>
  return CRC1;
}
 800095a:	b040      	add	sp, #256	; 0x100
 800095c:	bd70      	pop	{r4, r5, r6, pc}
 800095e:	bf00      	nop
 8000960:	0800583c 	.word	0x0800583c

08000964 <CalibrationWriteToFlash_CRC>:
{
 8000964:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8000966:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationData)+4,((unsigned char)sizeof(CalibrationData))-4,0);
 8000968:	4d14      	ldr	r5, [pc, #80]	; (80009bc <CalibrationWriteToFlash_CRC+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	214c      	movs	r1, #76	; 0x4c
 800096e:	4628      	mov	r0, r5
 8000970:	f7ff ffde 	bl	8000930 <CalcCRC8>
 8000974:	4604      	mov	r4, r0
	CalibrationData.CRC_data = CRC_Calibration;
 8000976:	f845 0c04 	str.w	r0, [r5, #-4]
	flash_unlock();
 800097a:	f7ff fc69 	bl	8000250 <flash_unlock>
	CalibrationWriteToFlash();
 800097e:	f7ff fd15 	bl	80003ac <CalibrationWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000982:	f7ff fddb 	bl	800053c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000986:	2200      	movs	r2, #0
 8000988:	214c      	movs	r1, #76	; 0x4c
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <CalibrationWriteToFlash_CRC+0x5c>)
 800098c:	f7ff ffd0 	bl	8000930 <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000990:	4284      	cmp	r4, r0
		logDebug("Calibration write to Flash success ");
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <CalibrationWriteToFlash_CRC+0x60>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000994:	d109      	bne.n	80009aa <CalibrationWriteToFlash_CRC+0x46>
		logDebug("Calibration write to Flash success ");
 8000996:	f004 fc71 	bl	800527c <printToBufferWithoutEndUART1>
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <CalibrationWriteToFlash_CRC+0x64>)
 800099c:	f004 fc08 	bl	80051b0 <printToBufferUART1>
	flash_lock();
 80009a0:	f7ff fc62 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80009a4:	b662      	cpsie	i
}
 80009a6:	2001      	movs	r0, #1
 80009a8:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Calibration write to Flash Fail, try again... ");
 80009aa:	f004 fc67 	bl	800527c <printToBufferWithoutEndUART1>
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <CalibrationWriteToFlash_CRC+0x68>)
 80009b0:	f004 fbfe 	bl	80051b0 <printToBufferUART1>
		CalibrationWriteToFlash();
 80009b4:	f7ff fcfa 	bl	80003ac <CalibrationWriteToFlash>
 80009b8:	e7f2      	b.n	80009a0 <CalibrationWriteToFlash_CRC+0x3c>
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	200000a8 	.word	0x200000a8
 80009c4:	0800593c 	.word	0x0800593c
 80009c8:	08005b2c 	.word	0x08005b2c
 80009cc:	08005b51 	.word	0x08005b51

080009d0 <SettingsWriteToFlash_CRC>:
{
 80009d0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80009d2:	b672      	cpsid	i
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsData)+4,((unsigned char)sizeof(SettingsData))-4,0);
 80009d4:	4d24      	ldr	r5, [pc, #144]	; (8000a68 <SettingsWriteToFlash_CRC+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	2144      	movs	r1, #68	; 0x44
 80009da:	4628      	mov	r0, r5
 80009dc:	f7ff ffa8 	bl	8000930 <CalcCRC8>
 80009e0:	4604      	mov	r4, r0
	logDebugD("CRC is : ",CRC_Settings,0);
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <SettingsWriteToFlash_CRC+0x9c>)
 80009e4:	f004 fc4a 	bl	800527c <printToBufferWithoutEndUART1>
 80009e8:	2200      	movs	r2, #0
 80009ea:	4621      	mov	r1, r4
 80009ec:	4820      	ldr	r0, [pc, #128]	; (8000a70 <SettingsWriteToFlash_CRC+0xa0>)
 80009ee:	f004 fc83 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsData))-4,0);
 80009f2:	481e      	ldr	r0, [pc, #120]	; (8000a6c <SettingsWriteToFlash_CRC+0x9c>)
 80009f4:	f004 fc42 	bl	800527c <printToBufferWithoutEndUART1>
 80009f8:	2200      	movs	r2, #0
 80009fa:	2144      	movs	r1, #68	; 0x44
 80009fc:	481d      	ldr	r0, [pc, #116]	; (8000a74 <SettingsWriteToFlash_CRC+0xa4>)
 80009fe:	f004 fc7b 	bl	80052f8 <printToBufferUART1D>
	SettingsData.CRC_data = CRC_Settings;
 8000a02:	f845 4c04 	str.w	r4, [r5, #-4]
	flash_unlock();
 8000a06:	f7ff fc23 	bl	8000250 <flash_unlock>
	SettingsWriteToFlash();
 8000a0a:	f7ff fdeb 	bl	80005e4 <SettingsWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000a0e:	f7ff fea1 	bl	8000754 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2144      	movs	r1, #68	; 0x44
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <SettingsWriteToFlash_CRC+0xa8>)
 8000a18:	f7ff ff8a 	bl	8000930 <CalcCRC8>
 8000a1c:	4605      	mov	r5, r0
	logDebugD("CRC is : ",CRC_SettingsVerify,0);
 8000a1e:	4813      	ldr	r0, [pc, #76]	; (8000a6c <SettingsWriteToFlash_CRC+0x9c>)
 8000a20:	f004 fc2c 	bl	800527c <printToBufferWithoutEndUART1>
 8000a24:	2200      	movs	r2, #0
 8000a26:	4629      	mov	r1, r5
 8000a28:	4811      	ldr	r0, [pc, #68]	; (8000a70 <SettingsWriteToFlash_CRC+0xa0>)
 8000a2a:	f004 fc65 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a2e:	480f      	ldr	r0, [pc, #60]	; (8000a6c <SettingsWriteToFlash_CRC+0x9c>)
 8000a30:	f004 fc24 	bl	800527c <printToBufferWithoutEndUART1>
 8000a34:	480f      	ldr	r0, [pc, #60]	; (8000a74 <SettingsWriteToFlash_CRC+0xa4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	2144      	movs	r1, #68	; 0x44
 8000a3a:	f004 fc5d 	bl	80052f8 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000a3e:	42ac      	cmp	r4, r5
		logDebug("Settings write to Flash success ");
 8000a40:	480a      	ldr	r0, [pc, #40]	; (8000a6c <SettingsWriteToFlash_CRC+0x9c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000a42:	d109      	bne.n	8000a58 <SettingsWriteToFlash_CRC+0x88>
		logDebug("Settings write to Flash success ");
 8000a44:	f004 fc1a 	bl	800527c <printToBufferWithoutEndUART1>
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <SettingsWriteToFlash_CRC+0xac>)
 8000a4a:	f004 fbb1 	bl	80051b0 <printToBufferUART1>
	flash_lock();
 8000a4e:	f7ff fc0b 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a52:	b662      	cpsie	i
}
 8000a54:	2001      	movs	r0, #1
 8000a56:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Settings write to Flash Fail, try again... ");
 8000a58:	f004 fc10 	bl	800527c <printToBufferWithoutEndUART1>
 8000a5c:	4808      	ldr	r0, [pc, #32]	; (8000a80 <SettingsWriteToFlash_CRC+0xb0>)
 8000a5e:	f004 fba7 	bl	80051b0 <printToBufferUART1>
		SettingsWriteToFlash();
 8000a62:	f7ff fdbf 	bl	80005e4 <SettingsWriteToFlash>
 8000a66:	e7f2      	b.n	8000a4e <SettingsWriteToFlash_CRC+0x7e>
 8000a68:	20000158 	.word	0x20000158
 8000a6c:	0800593c 	.word	0x0800593c
 8000a70:	08005b81 	.word	0x08005b81
 8000a74:	08005b8c 	.word	0x08005b8c
 8000a78:	200001e8 	.word	0x200001e8
 8000a7c:	08005b98 	.word	0x08005b98
 8000a80:	08005bba 	.word	0x08005bba

08000a84 <FactoryWriteToFlash_CRC>:
{
 8000a84:	b538      	push	{r3, r4, r5, lr}
	logDebug("FactoryWriteToFlash_CRC");
 8000a86:	484a      	ldr	r0, [pc, #296]	; (8000bb0 <FactoryWriteToFlash_CRC+0x12c>)
 8000a88:	f004 fbf8 	bl	800527c <printToBufferWithoutEndUART1>
 8000a8c:	4849      	ldr	r0, [pc, #292]	; (8000bb4 <FactoryWriteToFlash_CRC+0x130>)
 8000a8e:	f004 fb8f 	bl	80051b0 <printToBufferUART1>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a92:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000a94:	4d48      	ldr	r5, [pc, #288]	; (8000bb8 <FactoryWriteToFlash_CRC+0x134>)
 8000a96:	214c      	movs	r1, #76	; 0x4c
	flash_unlock();
 8000a98:	f7ff fbda 	bl	8000250 <flash_unlock>
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f7ff ff46 	bl	8000930 <CalcCRC8>
 8000aa4:	4604      	mov	r4, r0
	CalibrationDataFactory.CRC_data = CRC_Calibration;
 8000aa6:	f845 0c04 	str.w	r0, [r5, #-4]
	CalibrationFactoryWriteToFlash();
 8000aaa:	f7ff fcb9 	bl	8000420 <CalibrationFactoryWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000aae:	f7ff fd45 	bl	800053c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	214c      	movs	r1, #76	; 0x4c
 8000ab6:	4841      	ldr	r0, [pc, #260]	; (8000bbc <FactoryWriteToFlash_CRC+0x138>)
 8000ab8:	f7ff ff3a 	bl	8000930 <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000abc:	4284      	cmp	r4, r0
		logDebug("FCalibration write to Flash success ");
 8000abe:	483c      	ldr	r0, [pc, #240]	; (8000bb0 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000ac0:	d15d      	bne.n	8000b7e <FactoryWriteToFlash_CRC+0xfa>
		logDebug("FCalibration write to Flash success ");
 8000ac2:	f004 fbdb 	bl	800527c <printToBufferWithoutEndUART1>
 8000ac6:	483e      	ldr	r0, [pc, #248]	; (8000bc0 <FactoryWriteToFlash_CRC+0x13c>)
 8000ac8:	f004 fb72 	bl	80051b0 <printToBufferUART1>
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsDataFactory)+4,((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000acc:	4d3d      	ldr	r5, [pc, #244]	; (8000bc4 <FactoryWriteToFlash_CRC+0x140>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2144      	movs	r1, #68	; 0x44
 8000ad2:	4628      	mov	r0, r5
 8000ad4:	f7ff ff2c 	bl	8000930 <CalcCRC8>
 8000ad8:	4604      	mov	r4, r0
	logDebugD("FCRC is : ",CRC_Settings,0);
 8000ada:	4835      	ldr	r0, [pc, #212]	; (8000bb0 <FactoryWriteToFlash_CRC+0x12c>)
 8000adc:	f004 fbce 	bl	800527c <printToBufferWithoutEndUART1>
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	4838      	ldr	r0, [pc, #224]	; (8000bc8 <FactoryWriteToFlash_CRC+0x144>)
 8000ae6:	f004 fc07 	bl	80052f8 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000aea:	4831      	ldr	r0, [pc, #196]	; (8000bb0 <FactoryWriteToFlash_CRC+0x12c>)
 8000aec:	f004 fbc6 	bl	800527c <printToBufferWithoutEndUART1>
 8000af0:	2200      	movs	r2, #0
 8000af2:	2144      	movs	r1, #68	; 0x44
 8000af4:	4835      	ldr	r0, [pc, #212]	; (8000bcc <FactoryWriteToFlash_CRC+0x148>)
 8000af6:	f004 fbff 	bl	80052f8 <printToBufferUART1D>
	SettingsDataFactory.CRC_data = CRC_Settings;
 8000afa:	f845 4c04 	str.w	r4, [r5, #-4]
	SettingsFactoryWriteToFlash();
 8000afe:	f7ff fda7 	bl	8000650 <SettingsFactoryWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000b02:	f7ff fe27 	bl	8000754 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2144      	movs	r1, #68	; 0x44
 8000b0a:	4831      	ldr	r0, [pc, #196]	; (8000bd0 <FactoryWriteToFlash_CRC+0x14c>)
 8000b0c:	f7ff ff10 	bl	8000930 <CalcCRC8>
 8000b10:	4605      	mov	r5, r0
	logDebugD("FCRC is : ",CRC_SettingsVerify,0);
 8000b12:	4827      	ldr	r0, [pc, #156]	; (8000bb0 <FactoryWriteToFlash_CRC+0x12c>)
 8000b14:	f004 fbb2 	bl	800527c <printToBufferWithoutEndUART1>
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4629      	mov	r1, r5
 8000b1c:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <FactoryWriteToFlash_CRC+0x144>)
 8000b1e:	f004 fbeb 	bl	80052f8 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000b22:	4823      	ldr	r0, [pc, #140]	; (8000bb0 <FactoryWriteToFlash_CRC+0x12c>)
 8000b24:	f004 fbaa 	bl	800527c <printToBufferWithoutEndUART1>
 8000b28:	4828      	ldr	r0, [pc, #160]	; (8000bcc <FactoryWriteToFlash_CRC+0x148>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2144      	movs	r1, #68	; 0x44
 8000b2e:	f004 fbe3 	bl	80052f8 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000b32:	42ac      	cmp	r4, r5
		logDebug("FSettings write to Flash success ");
 8000b34:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000b36:	d12a      	bne.n	8000b8e <FactoryWriteToFlash_CRC+0x10a>
		logDebug("FSettings write to Flash success ");
 8000b38:	f004 fba0 	bl	800527c <printToBufferWithoutEndUART1>
 8000b3c:	4825      	ldr	r0, [pc, #148]	; (8000bd4 <FactoryWriteToFlash_CRC+0x150>)
 8000b3e:	f004 fb37 	bl	80051b0 <printToBufferUART1>
	CRC_DataWhenPowerOff = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffFactory)+4,((unsigned char)sizeof(SaveDataWhenPowerOffFactory))-4,0);
 8000b42:	4d25      	ldr	r5, [pc, #148]	; (8000bd8 <FactoryWriteToFlash_CRC+0x154>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	211c      	movs	r1, #28
 8000b48:	4628      	mov	r0, r5
 8000b4a:	f7ff fef1 	bl	8000930 <CalcCRC8>
 8000b4e:	4604      	mov	r4, r0
	SaveDataWhenPowerOffFactory.CRC_data = CRC_DataWhenPowerOff;
 8000b50:	f845 0c04 	str.w	r0, [r5, #-4]
	DataWhenPowerOff_Factory_WriteToFlash();
 8000b54:	f7ff fe4a 	bl	80007ec <DataWhenPowerOff_Factory_WriteToFlash>
	DataWhenPowerOffReadFromFlashForVerify();
 8000b58:	f7ff fe96 	bl	8000888 <DataWhenPowerOffReadFromFlashForVerify>
	CRC_DataWhenPowerOffVerify = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffForVerify)+4,((unsigned char)sizeof(SaveDataWhenPowerOffForVerify))-4,0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	211c      	movs	r1, #28
 8000b60:	481e      	ldr	r0, [pc, #120]	; (8000bdc <FactoryWriteToFlash_CRC+0x158>)
 8000b62:	f7ff fee5 	bl	8000930 <CalcCRC8>
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b66:	4284      	cmp	r4, r0
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b6a:	d118      	bne.n	8000b9e <FactoryWriteToFlash_CRC+0x11a>
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000b6c:	f004 fb86 	bl	800527c <printToBufferWithoutEndUART1>
 8000b70:	481b      	ldr	r0, [pc, #108]	; (8000be0 <FactoryWriteToFlash_CRC+0x15c>)
 8000b72:	f004 fb1d 	bl	80051b0 <printToBufferUART1>
	flash_lock();
 8000b76:	f7ff fb77 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b7a:	b662      	cpsie	i
}
 8000b7c:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("FCalibration write to Flash Fail, try again... ");
 8000b7e:	f004 fb7d 	bl	800527c <printToBufferWithoutEndUART1>
 8000b82:	4818      	ldr	r0, [pc, #96]	; (8000be4 <FactoryWriteToFlash_CRC+0x160>)
 8000b84:	f004 fb14 	bl	80051b0 <printToBufferUART1>
		CalibrationFactoryWriteToFlash();
 8000b88:	f7ff fc4a 	bl	8000420 <CalibrationFactoryWriteToFlash>
 8000b8c:	e79e      	b.n	8000acc <FactoryWriteToFlash_CRC+0x48>
		logDebug("FSettings write to Flash Fail, try again... ");
 8000b8e:	f004 fb75 	bl	800527c <printToBufferWithoutEndUART1>
 8000b92:	4815      	ldr	r0, [pc, #84]	; (8000be8 <FactoryWriteToFlash_CRC+0x164>)
 8000b94:	f004 fb0c 	bl	80051b0 <printToBufferUART1>
		SettingsFactoryWriteToFlash();
 8000b98:	f7ff fd5a 	bl	8000650 <SettingsFactoryWriteToFlash>
 8000b9c:	e7d1      	b.n	8000b42 <FactoryWriteToFlash_CRC+0xbe>
		logDebug("FDataWhenPowerOff write to Flash Fail, try again... ");
 8000b9e:	f004 fb6d 	bl	800527c <printToBufferWithoutEndUART1>
 8000ba2:	4812      	ldr	r0, [pc, #72]	; (8000bec <FactoryWriteToFlash_CRC+0x168>)
 8000ba4:	f004 fb04 	bl	80051b0 <printToBufferUART1>
		DataWhenPowerOff_Factory_WriteToFlash();
 8000ba8:	f7ff fe20 	bl	80007ec <DataWhenPowerOff_Factory_WriteToFlash>
 8000bac:	e7e3      	b.n	8000b76 <FactoryWriteToFlash_CRC+0xf2>
 8000bae:	bf00      	nop
 8000bb0:	0800593c 	.word	0x0800593c
 8000bb4:	08005b13 	.word	0x08005b13
 8000bb8:	20000058 	.word	0x20000058
 8000bbc:	200000a8 	.word	0x200000a8
 8000bc0:	08005b2b 	.word	0x08005b2b
 8000bc4:	200001a0 	.word	0x200001a0
 8000bc8:	08005b80 	.word	0x08005b80
 8000bcc:	08005b8b 	.word	0x08005b8b
 8000bd0:	200001e8 	.word	0x200001e8
 8000bd4:	08005b97 	.word	0x08005b97
 8000bd8:	20000118 	.word	0x20000118
 8000bdc:	20000138 	.word	0x20000138
 8000be0:	08005be6 	.word	0x08005be6
 8000be4:	08005b50 	.word	0x08005b50
 8000be8:	08005bb9 	.word	0x08005bb9
 8000bec:	08005c10 	.word	0x08005c10

08000bf0 <Generation_Coefficients_R_A_B>:
		{150,500}
};
void Generation_Coefficients_R_A_B()
{
	int8_t i;
	for (i=0;i<(TLT-1);i++)
 8000bf0:	4916      	ldr	r1, [pc, #88]	; (8000c4c <Generation_Coefficients_R_A_B+0x5c>)
 8000bf2:	4817      	ldr	r0, [pc, #92]	; (8000c50 <Generation_Coefficients_R_A_B+0x60>)
{
 8000bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		Temp_R_A_B[i].R = T_Table[i].R;
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000bf8:	f242 7c10 	movw	ip, #10000	; 0x2710
{
 8000bfc:	2400      	movs	r4, #0
 8000bfe:	460e      	mov	r6, r1
 8000c00:	4605      	mov	r5, r0
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c02:	4f14      	ldr	r7, [pc, #80]	; (8000c54 <Generation_Coefficients_R_A_B+0x64>)
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c04:	f9b1 e000 	ldrsh.w	lr, [r1]
 8000c08:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
		Temp_R_A_B[i].R = T_Table[i].R;
 8000c0c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c10:	eba2 020e 	sub.w	r2, r2, lr
 8000c14:	fb0c f202 	mul.w	r2, ip, r2
 8000c18:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
		Temp_R_A_B[i].R = T_Table[i].R;
 8000c1c:	6003      	str	r3, [r0, #0]
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c1e:	eba8 0803 	sub.w	r8, r8, r3
 8000c22:	fb92 f2f8 	sdiv	r2, r2, r8
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c26:	4353      	muls	r3, r2
 8000c28:	fb93 f3f7 	sdiv	r3, r3, r7
	for (i=0;i<(TLT-1);i++)
 8000c2c:	3401      	adds	r4, #1
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c2e:	4473      	add	r3, lr
	for (i=0;i<(TLT-1);i++)
 8000c30:	2c07      	cmp	r4, #7
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c32:	6042      	str	r2, [r0, #4]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c34:	6083      	str	r3, [r0, #8]
	for (i=0;i<(TLT-1);i++)
 8000c36:	f101 0104 	add.w	r1, r1, #4
 8000c3a:	f100 000c 	add.w	r0, r0, #12
 8000c3e:	d1e1      	bne.n	8000c04 <Generation_Coefficients_R_A_B+0x14>
	}
	Temp_R_A_B[i].R = T_Table[i].R;
 8000c40:	f9b6 301e 	ldrsh.w	r3, [r6, #30]
 8000c44:	656b      	str	r3, [r5, #84]	; 0x54
	    c=(Temp_R_A_B[i].R-Temp_R_A_B[i+1].R)/2+Temp_R_A_B[i+1].R;
	    Print_to_USART1_d(c,"c= ",0);
	    Print_to_USART1_d(Temp_R_A_B[i].A10000*c/10000+Temp_R_A_B[i].B,"T:",0);
	}
*/
}
 8000c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000022c 	.word	0x2000022c
 8000c50:	200007f4 	.word	0x200007f4
 8000c54:	ffffd8f0 	.word	0xffffd8f0

08000c58 <GetTemperature>:
int32_t GetTemperature(int32_t Rtemp)
{
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <GetTemperature+0x48>)
{
 8000c5a:	b510      	push	{r4, lr}
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	db1a      	blt.n	8000c98 <GetTemperature+0x40>
 8000c62:	4619      	mov	r1, r3
 8000c64:	2200      	movs	r2, #0

	int8_t i;
	for (i=0; i<(TLT-1);i++)
	{
		if (Rtemp <= Temp_R_A_B[i].R  && Rtemp > Temp_R_A_B[i+1].R)
 8000c66:	680c      	ldr	r4, [r1, #0]
 8000c68:	4284      	cmp	r4, r0
 8000c6a:	db0e      	blt.n	8000c8a <GetTemperature+0x32>
 8000c6c:	68cc      	ldr	r4, [r1, #12]
 8000c6e:	4284      	cmp	r4, r0
 8000c70:	da0b      	bge.n	8000c8a <GetTemperature+0x32>
		{
			return Rtemp*Temp_R_A_B[i].A10000/10000+Temp_R_A_B[i].B;
 8000c72:	210c      	movs	r1, #12
 8000c74:	fb01 3302 	mla	r3, r1, r2, r3
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4350      	muls	r0, r2
 8000c7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c82:	fb90 f0f2 	sdiv	r0, r0, r2
 8000c86:	4418      	add	r0, r3

		}
	}
	return 200;
}
 8000c88:	bd10      	pop	{r4, pc}
	for (i=0; i<(TLT-1);i++)
 8000c8a:	3201      	adds	r2, #1
 8000c8c:	2a07      	cmp	r2, #7
 8000c8e:	f101 010c 	add.w	r1, r1, #12
 8000c92:	d1e8      	bne.n	8000c66 <GetTemperature+0xe>
	return 200;
 8000c94:	20c8      	movs	r0, #200	; 0xc8
 8000c96:	e7f7      	b.n	8000c88 <GetTemperature+0x30>
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000c98:	f06f 0009 	mvn.w	r0, #9
 8000c9c:	e7f4      	b.n	8000c88 <GetTemperature+0x30>
 8000c9e:	bf00      	nop
 8000ca0:	200007f4 	.word	0x200007f4

08000ca4 <WriteInLOG>:

void WriteInLOG(char  str [17])
{
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000ca8:	4d51      	ldr	r5, [pc, #324]	; (8000df0 <WriteInLOG+0x14c>)
{
 8000caa:	4606      	mov	r6, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000cac:	6828      	ldr	r0, [r5, #0]
 8000cae:	f000 faa7 	bl	8001200 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000cb2:	2300      	movs	r3, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000cb4:	682a      	ldr	r2, [r5, #0]
 8000cb6:	eb02 1102 	add.w	r1, r2, r2, lsl #4
 8000cba:	0117      	lsls	r7, r2, #4
 8000cbc:	4429      	add	r1, r5
	for(i=0;number[i]!='\0';i++)
 8000cbe:	f810 c003 	ldrb.w	ip, [r0, r3]
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000cc2:	461c      	mov	r4, r3
	for(i=0;number[i]!='\0';i++)
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f1bc 0f00 	cmp.w	ip, #0
 8000ccc:	d11b      	bne.n	8000d06 <WriteInLOG+0x62>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000cce:	18b9      	adds	r1, r7, r2
 8000cd0:	1868      	adds	r0, r5, r1
 8000cd2:	4404      	add	r4, r0
 8000cd4:	203a      	movs	r0, #58	; 0x3a
 8000cd6:	7120      	strb	r0, [r4, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000cd8:	1d08      	adds	r0, r1, #4
 8000cda:	3e01      	subs	r6, #1
 8000cdc:	eb05 0c00 	add.w	ip, r5, r0
 8000ce0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ce4:	b2dc      	uxtb	r4, r3
 8000ce6:	b991      	cbnz	r1, 8000d0e <WriteInLOG+0x6a>
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000ce8:	2c10      	cmp	r4, #16
 8000cea:	f1c4 0610 	rsb	r6, r4, #16
 8000cee:	b2f6      	uxtb	r6, r6
 8000cf0:	bf88      	it	hi
 8000cf2:	2600      	movhi	r6, #0
 8000cf4:	4420      	add	r0, r4
 8000cf6:	4632      	mov	r2, r6
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4428      	add	r0, r5
 8000cfc:	4434      	add	r4, r6
 8000cfe:	f004 fd89 	bl	8005814 <memset>
 8000d02:	b2e4      	uxtb	r4, r4
 8000d04:	e00e      	b.n	8000d24 <WriteInLOG+0x80>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000d06:	440c      	add	r4, r1
 8000d08:	f884 c004 	strb.w	ip, [r4, #4]
	for(i=0;number[i]!='\0';i++)
 8000d0c:	e7d7      	b.n	8000cbe <WriteInLOG+0x1a>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000d0e:	2c0f      	cmp	r4, #15
 8000d10:	d803      	bhi.n	8000d1a <WriteInLOG+0x76>
 8000d12:	f80c 1003 	strb.w	r1, [ip, r3]
	for(j=0;str[j]!='\0';i++,j++)
 8000d16:	3301      	adds	r3, #1
 8000d18:	e7e2      	b.n	8000ce0 <WriteInLOG+0x3c>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d1a:	443a      	add	r2, r7
 8000d1c:	442a      	add	r2, r5
 8000d1e:	4413      	add	r3, r2
 8000d20:	2200      	movs	r2, #0
 8000d22:	711a      	strb	r2, [r3, #4]
	}
	logDebugD("ii: ",i,0);
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d24:	2600      	movs	r6, #0
	logDebugD("ii: ",i,0);
 8000d26:	4833      	ldr	r0, [pc, #204]	; (8000df4 <WriteInLOG+0x150>)
 8000d28:	f004 faa8 	bl	800527c <printToBufferWithoutEndUART1>
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4621      	mov	r1, r4
 8000d30:	4831      	ldr	r0, [pc, #196]	; (8000df8 <WriteInLOG+0x154>)
 8000d32:	f004 fae1 	bl	80052f8 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d36:	682b      	ldr	r3, [r5, #0]
 8000d38:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000d3c:	442a      	add	r2, r5

	LoggingData.RecordsQuantity++;
 8000d3e:	3301      	adds	r3, #1
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d40:	4414      	add	r4, r2
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000d42:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d44:	7126      	strb	r6, [r4, #4]
	LoggingData.RecordsQuantity++;
 8000d46:	602b      	str	r3, [r5, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000d48:	d939      	bls.n	8000dbe <WriteInLOG+0x11a>
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
			{
				LoggingData.Records[i][k] = number[k];
			}
			LoggingData.Records[i][k] = ':';
 8000d4a:	f04f 093a 	mov.w	r9, #58	; 0x3a
			number = itoa(i);
 8000d4e:	4630      	mov	r0, r6
 8000d50:	f000 fa56 	bl	8001200 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000d54:	2200      	movs	r2, #0
				LoggingData.Records[i][k] = number[k];
 8000d56:	eb06 1406 	add.w	r4, r6, r6, lsl #4
 8000d5a:	0133      	lsls	r3, r6, #4
 8000d5c:	442c      	add	r4, r5
			for(k=0;number[k]!='\0';k++)
 8000d5e:	5c87      	ldrb	r7, [r0, r2]
				LoggingData.Records[i][k] = number[k];
 8000d60:	4611      	mov	r1, r2
			for(k=0;number[k]!='\0';k++)
 8000d62:	3201      	adds	r2, #1
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	bbb7      	cbnz	r7, 8000dd6 <WriteInLOG+0x132>
			LoggingData.Records[i][k] = ':';
 8000d68:	199f      	adds	r7, r3, r6
 8000d6a:	442f      	add	r7, r5
 8000d6c:	4439      	add	r1, r7
 8000d6e:	f881 9004 	strb.w	r9, [r1, #4]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000d72:	f106 010a 	add.w	r1, r6, #10
			{
				if (i>=10)
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
				else
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000d76:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8000d7a:	4429      	add	r1, r5
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000d7c:	18b8      	adds	r0, r7, r2
 8000d7e:	f890 a004 	ldrb.w	sl, [r0, #4]
 8000d82:	f1ba 0f00 	cmp.w	sl, #0
 8000d86:	d129      	bne.n	8000ddc <WriteInLOG+0x138>
			}
			j--;
 8000d88:	f102 38ff 	add.w	r8, r2, #4294967295
 8000d8c:	fa5f f888 	uxtb.w	r8, r8
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000d90:	f1b8 0f10 	cmp.w	r8, #16
 8000d94:	f1c2 0411 	rsb	r4, r2, #17
 8000d98:	b2e4      	uxtb	r4, r4
 8000d9a:	bf88      	it	hi
 8000d9c:	2400      	movhi	r4, #0
 8000d9e:	1998      	adds	r0, r3, r6
 8000da0:	3004      	adds	r0, #4
 8000da2:	4440      	add	r0, r8
 8000da4:	4622      	mov	r2, r4
 8000da6:	2120      	movs	r1, #32
 8000da8:	4428      	add	r0, r5
			}
			LoggingData.Records[i][j] = '\0';
 8000daa:	4447      	add	r7, r8
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000dac:	3601      	adds	r6, #1
				LoggingData.Records[i][j] = ' ';
 8000dae:	f004 fd31 	bl	8005814 <memset>
			LoggingData.Records[i][j] = '\0';
 8000db2:	4427      	add	r7, r4
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000db4:	2e0e      	cmp	r6, #14
			LoggingData.Records[i][j] = '\0';
 8000db6:	f887 a004 	strb.w	sl, [r7, #4]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000dba:	d1c8      	bne.n	8000d4e <WriteInLOG+0xaa>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000dbc:	602e      	str	r6, [r5, #0]
	}
	flash_write_block();
 8000dbe:	f7ff fa7f 	bl	80002c0 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <WriteInLOG+0x150>)
 8000dc4:	f004 fa5a 	bl	800527c <printToBufferWithoutEndUART1>
 8000dc8:	6829      	ldr	r1, [r5, #0]
 8000dca:	2200      	movs	r2, #0
}
 8000dcc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <WriteInLOG+0x158>)
 8000dd2:	f004 ba91 	b.w	80052f8 <printToBufferUART1D>
				LoggingData.Records[i][k] = number[k];
 8000dd6:	4421      	add	r1, r4
 8000dd8:	710f      	strb	r7, [r1, #4]
			for(k=0;number[k]!='\0';k++)
 8000dda:	e7c0      	b.n	8000d5e <WriteInLOG+0xba>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000ddc:	1888      	adds	r0, r1, r2
				if (i>=10)
 8000dde:	2e09      	cmp	r6, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000de0:	bf8c      	ite	hi
 8000de2:	7900      	ldrbhi	r0, [r0, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000de4:	7940      	ldrbls	r0, [r0, #5]
 8000de6:	18bc      	adds	r4, r7, r2
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000de8:	3201      	adds	r2, #1
 8000dea:	7120      	strb	r0, [r4, #4]
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	e7c5      	b.n	8000d7c <WriteInLOG+0xd8>
 8000df0:	20000878 	.word	0x20000878
 8000df4:	0800593c 	.word	0x0800593c
 8000df8:	08005c45 	.word	0x08005c45
 8000dfc:	08005c4a 	.word	0x08005c4a

08000e00 <WriteInLOGc>:

void WriteInLOGc(char  str [17],char c)
{
 8000e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000e04:	4d51      	ldr	r5, [pc, #324]	; (8000f4c <WriteInLOGc+0x14c>)
{
 8000e06:	4606      	mov	r6, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000e08:	6828      	ldr	r0, [r5, #0]
{
 8000e0a:	4689      	mov	r9, r1
	number = itoa(LoggingData.RecordsQuantity);
 8000e0c:	f000 f9f8 	bl	8001200 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000e10:	2300      	movs	r3, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000e12:	682a      	ldr	r2, [r5, #0]
 8000e14:	eb02 1102 	add.w	r1, r2, r2, lsl #4
 8000e18:	0117      	lsls	r7, r2, #4
 8000e1a:	4429      	add	r1, r5
	for(i=0;number[i]!='\0';i++)
 8000e1c:	f810 c003 	ldrb.w	ip, [r0, r3]
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000e20:	461c      	mov	r4, r3
	for(i=0;number[i]!='\0';i++)
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f1bc 0f00 	cmp.w	ip, #0
 8000e2a:	d11b      	bne.n	8000e64 <WriteInLOGc+0x64>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = c;
 8000e2c:	18b9      	adds	r1, r7, r2
 8000e2e:	1868      	adds	r0, r5, r1
 8000e30:	4404      	add	r4, r0
 8000e32:	1d08      	adds	r0, r1, #4
 8000e34:	f884 9004 	strb.w	r9, [r4, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000e38:	3e01      	subs	r6, #1
 8000e3a:	eb05 0c00 	add.w	ip, r5, r0
 8000e3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000e42:	b2dc      	uxtb	r4, r3
 8000e44:	b991      	cbnz	r1, 8000e6c <WriteInLOGc+0x6c>
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000e46:	2c10      	cmp	r4, #16
 8000e48:	f1c4 0610 	rsb	r6, r4, #16
 8000e4c:	b2f6      	uxtb	r6, r6
 8000e4e:	bf88      	it	hi
 8000e50:	2600      	movhi	r6, #0
 8000e52:	4420      	add	r0, r4
 8000e54:	4632      	mov	r2, r6
 8000e56:	2120      	movs	r1, #32
 8000e58:	4428      	add	r0, r5
 8000e5a:	4434      	add	r4, r6
 8000e5c:	f004 fcda 	bl	8005814 <memset>
 8000e60:	b2e4      	uxtb	r4, r4
 8000e62:	e00e      	b.n	8000e82 <WriteInLOGc+0x82>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000e64:	440c      	add	r4, r1
 8000e66:	f884 c004 	strb.w	ip, [r4, #4]
	for(i=0;number[i]!='\0';i++)
 8000e6a:	e7d7      	b.n	8000e1c <WriteInLOGc+0x1c>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000e6c:	2c0f      	cmp	r4, #15
 8000e6e:	d803      	bhi.n	8000e78 <WriteInLOGc+0x78>
 8000e70:	f80c 1003 	strb.w	r1, [ip, r3]
	for(j=0;str[j]!='\0';i++,j++)
 8000e74:	3301      	adds	r3, #1
 8000e76:	e7e2      	b.n	8000e3e <WriteInLOGc+0x3e>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e78:	443a      	add	r2, r7
 8000e7a:	442a      	add	r2, r5
 8000e7c:	4413      	add	r3, r2
 8000e7e:	2200      	movs	r2, #0
 8000e80:	711a      	strb	r2, [r3, #4]
	}
	logDebugD("ii: ",i,0);
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e82:	2600      	movs	r6, #0
	logDebugD("ii: ",i,0);
 8000e84:	4832      	ldr	r0, [pc, #200]	; (8000f50 <WriteInLOGc+0x150>)
 8000e86:	f004 f9f9 	bl	800527c <printToBufferWithoutEndUART1>
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	4831      	ldr	r0, [pc, #196]	; (8000f54 <WriteInLOGc+0x154>)
 8000e90:	f004 fa32 	bl	80052f8 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000e9a:	442a      	add	r2, r5

	LoggingData.RecordsQuantity++;
 8000e9c:	3301      	adds	r3, #1
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e9e:	4414      	add	r4, r2
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000ea0:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000ea2:	7126      	strb	r6, [r4, #4]
	LoggingData.RecordsQuantity++;
 8000ea4:	602b      	str	r3, [r5, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000ea6:	d937      	bls.n	8000f18 <WriteInLOGc+0x118>
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	f000 f9a9 	bl	8001200 <itoa>
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000eae:	2200      	movs	r2, #0
			{
				LoggingData.Records[i][k] = number[k];
 8000eb0:	eb06 1406 	add.w	r4, r6, r6, lsl #4
 8000eb4:	0133      	lsls	r3, r6, #4
 8000eb6:	442c      	add	r4, r5
			for(k=0;number[k]!='\0';k++)
 8000eb8:	5c87      	ldrb	r7, [r0, r2]
				LoggingData.Records[i][k] = number[k];
 8000eba:	4611      	mov	r1, r2
			for(k=0;number[k]!='\0';k++)
 8000ebc:	3201      	adds	r2, #1
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	bbb7      	cbnz	r7, 8000f30 <WriteInLOGc+0x130>
			}
			LoggingData.Records[i][k] = c;
 8000ec2:	199f      	adds	r7, r3, r6
 8000ec4:	442f      	add	r7, r5
 8000ec6:	4439      	add	r1, r7
 8000ec8:	f881 9004 	strb.w	r9, [r1, #4]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000ecc:	f106 010a 	add.w	r1, r6, #10
			{
				if (i>=10)
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
				else
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000ed0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8000ed4:	4429      	add	r1, r5
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000ed6:	18b8      	adds	r0, r7, r2
 8000ed8:	f890 a004 	ldrb.w	sl, [r0, #4]
 8000edc:	f1ba 0f00 	cmp.w	sl, #0
 8000ee0:	d129      	bne.n	8000f36 <WriteInLOGc+0x136>
			}
			j--;
 8000ee2:	f102 38ff 	add.w	r8, r2, #4294967295
 8000ee6:	fa5f f888 	uxtb.w	r8, r8
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000eea:	f1b8 0f10 	cmp.w	r8, #16
 8000eee:	f1c2 0411 	rsb	r4, r2, #17
 8000ef2:	b2e4      	uxtb	r4, r4
 8000ef4:	bf88      	it	hi
 8000ef6:	2400      	movhi	r4, #0
 8000ef8:	1998      	adds	r0, r3, r6
 8000efa:	3004      	adds	r0, #4
 8000efc:	4440      	add	r0, r8
 8000efe:	4622      	mov	r2, r4
 8000f00:	2120      	movs	r1, #32
 8000f02:	4428      	add	r0, r5
			}
			LoggingData.Records[i][j] = '\0';
 8000f04:	4447      	add	r7, r8
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000f06:	3601      	adds	r6, #1
				LoggingData.Records[i][j] = ' ';
 8000f08:	f004 fc84 	bl	8005814 <memset>
			LoggingData.Records[i][j] = '\0';
 8000f0c:	4427      	add	r7, r4
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000f0e:	2e0e      	cmp	r6, #14
			LoggingData.Records[i][j] = '\0';
 8000f10:	f887 a004 	strb.w	sl, [r7, #4]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000f14:	d1c8      	bne.n	8000ea8 <WriteInLOGc+0xa8>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000f16:	602e      	str	r6, [r5, #0]
	}
	flash_write_block();
 8000f18:	f7ff f9d2 	bl	80002c0 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <WriteInLOGc+0x150>)
 8000f1e:	f004 f9ad 	bl	800527c <printToBufferWithoutEndUART1>
 8000f22:	6829      	ldr	r1, [r5, #0]
 8000f24:	2200      	movs	r2, #0
}
 8000f26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000f2a:	480b      	ldr	r0, [pc, #44]	; (8000f58 <WriteInLOGc+0x158>)
 8000f2c:	f004 b9e4 	b.w	80052f8 <printToBufferUART1D>
				LoggingData.Records[i][k] = number[k];
 8000f30:	4421      	add	r1, r4
 8000f32:	710f      	strb	r7, [r1, #4]
			for(k=0;number[k]!='\0';k++)
 8000f34:	e7c0      	b.n	8000eb8 <WriteInLOGc+0xb8>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000f36:	1888      	adds	r0, r1, r2
				if (i>=10)
 8000f38:	2e09      	cmp	r6, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000f3a:	bf8c      	ite	hi
 8000f3c:	7900      	ldrbhi	r0, [r0, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f3e:	7940      	ldrbls	r0, [r0, #5]
 8000f40:	18bc      	adds	r4, r7, r2
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000f42:	3201      	adds	r2, #1
 8000f44:	7120      	strb	r0, [r4, #4]
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	e7c5      	b.n	8000ed6 <WriteInLOGc+0xd6>
 8000f4a:	bf00      	nop
 8000f4c:	20000878 	.word	0x20000878
 8000f50:	0800593c 	.word	0x0800593c
 8000f54:	08005c45 	.word	0x08005c45
 8000f58:	08005c4a 	.word	0x08005c4a

08000f5c <delay_us>:
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
	delay_ms(50);
}
void delay_us(uint32_t us)
{
	volatile uint32_t n = 0;
 8000f5c:	2300      	movs	r3, #0
{
 8000f5e:	b084      	sub	sp, #16
	if (us==1) n=1;//в тактах процесора
 8000f60:	2801      	cmp	r0, #1
	volatile uint32_t n = 0;
 8000f62:	9300      	str	r3, [sp, #0]
	if (us==1) n=1;//в тактах процесора
 8000f64:	d101      	bne.n	8000f6a <delay_us+0xe>
	if (us==2) n=2;//в тактах процесора
	if (us==3) n=18;//в тактах процесора
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000f66:	9000      	str	r0, [sp, #0]
 8000f68:	e004      	b.n	8000f74 <delay_us+0x18>
	if (us==2) n=2;//в тактах процесора
 8000f6a:	2802      	cmp	r0, #2
 8000f6c:	d0fb      	beq.n	8000f66 <delay_us+0xa>
	if (us==3) n=18;//в тактах процесора
 8000f6e:	2803      	cmp	r0, #3
 8000f70:	d01b      	beq.n	8000faa <delay_us+0x4e>
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000f72:	d81d      	bhi.n	8000fb0 <delay_us+0x54>
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 8000f74:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000f78:	6993      	ldr	r3, [r2, #24]
 8000f7a:	9301      	str	r3, [sp, #4]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 8000f7c:	9b01      	ldr	r3, [sp, #4]
 8000f7e:	9302      	str	r3, [sp, #8]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 8000f80:	6993      	ldr	r3, [r2, #24]
 8000f82:	9303      	str	r3, [sp, #12]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 8000f84:	9903      	ldr	r1, [sp, #12]
 8000f86:	9b02      	ldr	r3, [sp, #8]
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d304      	bcc.n	8000f96 <delay_us+0x3a>
            n0+=SysTick->LOAD+1;
 8000f8c:	6953      	ldr	r3, [r2, #20]
 8000f8e:	9901      	ldr	r1, [sp, #4]
 8000f90:	440b      	add	r3, r1
 8000f92:	3301      	adds	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
        np=nc;
 8000f96:	9b03      	ldr	r3, [sp, #12]
 8000f98:	9302      	str	r3, [sp, #8]
    }while(n0-nc<n);
 8000f9a:	9b01      	ldr	r3, [sp, #4]
 8000f9c:	9803      	ldr	r0, [sp, #12]
 8000f9e:	9900      	ldr	r1, [sp, #0]
 8000fa0:	1a1b      	subs	r3, r3, r0
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	d3ec      	bcc.n	8000f80 <delay_us+0x24>
}
 8000fa6:	b004      	add	sp, #16
 8000fa8:	4770      	bx	lr
	if (us==3) n=18;//в тактах процесора
 8000faa:	2312      	movs	r3, #18
 8000fac:	9300      	str	r3, [sp, #0]
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000fae:	e7e1      	b.n	8000f74 <delay_us+0x18>
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <delay_us+0x64>)
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <delay_us+0x68>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3803      	subs	r0, #3
 8000fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fbc:	4358      	muls	r0, r3
 8000fbe:	e7d2      	b.n	8000f66 <delay_us+0xa>
 8000fc0:	2000028c 	.word	0x2000028c
 8000fc4:	000f4240 	.word	0x000f4240

08000fc8 <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 8000fc8:	b507      	push	{r0, r1, r2, lr}
 8000fca:	9001      	str	r0, [sp, #4]
	while(value>0)
 8000fcc:	9b01      	ldr	r3, [sp, #4]
 8000fce:	b913      	cbnz	r3, 8000fd6 <delay_ms+0xe>
	{
		delay_us(1000);
		value--;
	}
}
 8000fd0:	b003      	add	sp, #12
 8000fd2:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_us(1000);
 8000fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fda:	f7ff ffbf 	bl	8000f5c <delay_us>
		value--;
 8000fde:	9b01      	ldr	r3, [sp, #4]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	e7f2      	b.n	8000fcc <delay_ms+0x4>
	...

08000fe8 <InfoToUARTBeforeStart>:
{
 8000fe8:	b538      	push	{r3, r4, r5, lr}
	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 8000fea:	4c68      	ldr	r4, [pc, #416]	; (800118c <InfoToUARTBeforeStart+0x1a4>)
 8000fec:	4d68      	ldr	r5, [pc, #416]	; (8001190 <InfoToUARTBeforeStart+0x1a8>)
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f004 f944 	bl	800527c <printToBufferWithoutEndUART1>
 8000ff4:	6829      	ldr	r1, [r5, #0]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4866      	ldr	r0, [pc, #408]	; (8001194 <InfoToUARTBeforeStart+0x1ac>)
 8000ffa:	f004 f97d 	bl	80052f8 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.Calibration0ValueForCurrent ,0);
 8000ffe:	4620      	mov	r0, r4
 8001000:	f004 f93c 	bl	800527c <printToBufferWithoutEndUART1>
 8001004:	68a9      	ldr	r1, [r5, #8]
 8001006:	2200      	movs	r2, #0
 8001008:	4863      	ldr	r0, [pc, #396]	; (8001198 <InfoToUARTBeforeStart+0x1b0>)
 800100a:	f004 f975 	bl	80052f8 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent1 =",CalibrationData.Calibration0ValueForCurrent1 ,0);
 800100e:	4620      	mov	r0, r4
 8001010:	f004 f934 	bl	800527c <printToBufferWithoutEndUART1>
 8001014:	6929      	ldr	r1, [r5, #16]
 8001016:	2200      	movs	r2, #0
 8001018:	4860      	ldr	r0, [pc, #384]	; (800119c <InfoToUARTBeforeStart+0x1b4>)
 800101a:	f004 f96d 	bl	80052f8 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent =",CalibrationData.CalibrationValueForCurrent_x50 ,0);
 800101e:	4620      	mov	r0, r4
 8001020:	f004 f92c 	bl	800527c <printToBufferWithoutEndUART1>
 8001024:	69a9      	ldr	r1, [r5, #24]
 8001026:	2200      	movs	r2, #0
 8001028:	485d      	ldr	r0, [pc, #372]	; (80011a0 <InfoToUARTBeforeStart+0x1b8>)
 800102a:	f004 f965 	bl	80052f8 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent1 =",CalibrationData.CalibrationValueForCurrent_x1 ,0);
 800102e:	4620      	mov	r0, r4
 8001030:	f004 f924 	bl	800527c <printToBufferWithoutEndUART1>
 8001034:	6a29      	ldr	r1, [r5, #32]
 8001036:	2200      	movs	r2, #0
 8001038:	485a      	ldr	r0, [pc, #360]	; (80011a4 <InfoToUARTBeforeStart+0x1bc>)
 800103a:	f004 f95d 	bl	80052f8 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage =",CalibrationData.CalibrationValueForVoltage ,0);
 800103e:	4620      	mov	r0, r4
 8001040:	f004 f91c 	bl	800527c <printToBufferWithoutEndUART1>
 8001044:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001046:	2200      	movs	r2, #0
 8001048:	4857      	ldr	r0, [pc, #348]	; (80011a8 <InfoToUARTBeforeStart+0x1c0>)
 800104a:	f004 f955 	bl	80052f8 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage1 =",CalibrationData.CalibrationValueForU_OUT ,0);
 800104e:	4620      	mov	r0, r4
 8001050:	f004 f914 	bl	800527c <printToBufferWithoutEndUART1>
 8001054:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001056:	2200      	movs	r2, #0
 8001058:	4854      	ldr	r0, [pc, #336]	; (80011ac <InfoToUARTBeforeStart+0x1c4>)
 800105a:	f004 f94d 	bl	80052f8 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForU_IN,0);
 800105e:	4620      	mov	r0, r4
 8001060:	f004 f90c 	bl	800527c <printToBufferWithoutEndUART1>
 8001064:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001066:	2200      	movs	r2, #0
 8001068:	4851      	ldr	r0, [pc, #324]	; (80011b0 <InfoToUARTBeforeStart+0x1c8>)
 800106a:	f004 f945 	bl	80052f8 <printToBufferUART1D>
	logInfoD("ResistanceComp_Ishunt_Wires =",CalibrationData.ResistanceComp_Ishunt_Wires ,0) ;
 800106e:	4620      	mov	r0, r4
 8001070:	f004 f904 	bl	800527c <printToBufferWithoutEndUART1>
 8001074:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001076:	2200      	movs	r2, #0
 8001078:	484e      	ldr	r0, [pc, #312]	; (80011b4 <InfoToUARTBeforeStart+0x1cc>)
 800107a:	f004 f93d 	bl	80052f8 <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 800107e:	4620      	mov	r0, r4
 8001080:	f004 f8fc 	bl	800527c <printToBufferWithoutEndUART1>
 8001084:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001086:	2200      	movs	r2, #0
 8001088:	484b      	ldr	r0, [pc, #300]	; (80011b8 <InfoToUARTBeforeStart+0x1d0>)
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 800108a:	4d4c      	ldr	r5, [pc, #304]	; (80011bc <InfoToUARTBeforeStart+0x1d4>)
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 800108c:	f004 f934 	bl	80052f8 <printToBufferUART1D>
	delay_ms(50);
 8001090:	2032      	movs	r0, #50	; 0x32
 8001092:	f7ff ff99 	bl	8000fc8 <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 8001096:	4620      	mov	r0, r4
 8001098:	f004 f8f0 	bl	800527c <printToBufferWithoutEndUART1>
 800109c:	6829      	ldr	r1, [r5, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	4847      	ldr	r0, [pc, #284]	; (80011c0 <InfoToUARTBeforeStart+0x1d8>)
 80010a2:	f004 f929 	bl	80052f8 <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 80010a6:	4620      	mov	r0, r4
 80010a8:	f004 f8e8 	bl	800527c <printToBufferWithoutEndUART1>
 80010ac:	68a9      	ldr	r1, [r5, #8]
 80010ae:	2200      	movs	r2, #0
 80010b0:	4844      	ldr	r0, [pc, #272]	; (80011c4 <InfoToUARTBeforeStart+0x1dc>)
 80010b2:	f004 f921 	bl	80052f8 <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 80010b6:	4620      	mov	r0, r4
 80010b8:	f004 f8e0 	bl	800527c <printToBufferWithoutEndUART1>
 80010bc:	6929      	ldr	r1, [r5, #16]
 80010be:	2200      	movs	r2, #0
 80010c0:	4841      	ldr	r0, [pc, #260]	; (80011c8 <InfoToUARTBeforeStart+0x1e0>)
 80010c2:	f004 f919 	bl	80052f8 <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 80010c6:	4620      	mov	r0, r4
 80010c8:	f004 f8d8 	bl	800527c <printToBufferWithoutEndUART1>
 80010cc:	69a9      	ldr	r1, [r5, #24]
 80010ce:	2200      	movs	r2, #0
 80010d0:	483e      	ldr	r0, [pc, #248]	; (80011cc <InfoToUARTBeforeStart+0x1e4>)
 80010d2:	f004 f911 	bl	80052f8 <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 80010d6:	4620      	mov	r0, r4
 80010d8:	f004 f8d0 	bl	800527c <printToBufferWithoutEndUART1>
 80010dc:	6a29      	ldr	r1, [r5, #32]
 80010de:	2200      	movs	r2, #0
 80010e0:	483b      	ldr	r0, [pc, #236]	; (80011d0 <InfoToUARTBeforeStart+0x1e8>)
 80010e2:	f004 f909 	bl	80052f8 <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 80010e6:	4620      	mov	r0, r4
 80010e8:	f004 f8c8 	bl	800527c <printToBufferWithoutEndUART1>
 80010ec:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80010ee:	2200      	movs	r2, #0
 80010f0:	4838      	ldr	r0, [pc, #224]	; (80011d4 <InfoToUARTBeforeStart+0x1ec>)
 80010f2:	f004 f901 	bl	80052f8 <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 80010f6:	4620      	mov	r0, r4
 80010f8:	f004 f8c0 	bl	800527c <printToBufferWithoutEndUART1>
 80010fc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80010fe:	2200      	movs	r2, #0
 8001100:	4835      	ldr	r0, [pc, #212]	; (80011d8 <InfoToUARTBeforeStart+0x1f0>)
 8001102:	f004 f8f9 	bl	80052f8 <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 8001106:	4620      	mov	r0, r4
 8001108:	f004 f8b8 	bl	800527c <printToBufferWithoutEndUART1>
 800110c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800110e:	2200      	movs	r2, #0
 8001110:	4832      	ldr	r0, [pc, #200]	; (80011dc <InfoToUARTBeforeStart+0x1f4>)
 8001112:	f004 f8f1 	bl	80052f8 <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 8001116:	4620      	mov	r0, r4
 8001118:	f004 f8b0 	bl	800527c <printToBufferWithoutEndUART1>
 800111c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800111e:	2200      	movs	r2, #0
 8001120:	482f      	ldr	r0, [pc, #188]	; (80011e0 <InfoToUARTBeforeStart+0x1f8>)
 8001122:	f004 f8e9 	bl	80052f8 <printToBufferUART1D>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 8001126:	4d2f      	ldr	r5, [pc, #188]	; (80011e4 <InfoToUARTBeforeStart+0x1fc>)
	delay_ms(50);
 8001128:	2032      	movs	r0, #50	; 0x32
 800112a:	f7ff ff4d 	bl	8000fc8 <delay_ms>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 800112e:	4620      	mov	r0, r4
 8001130:	f004 f8a4 	bl	800527c <printToBufferWithoutEndUART1>
 8001134:	6829      	ldr	r1, [r5, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	482b      	ldr	r0, [pc, #172]	; (80011e8 <InfoToUARTBeforeStart+0x200>)
 800113a:	f004 f8dd 	bl	80052f8 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue ,0);
 800113e:	4620      	mov	r0, r4
 8001140:	f004 f89c 	bl	800527c <printToBufferWithoutEndUART1>
 8001144:	68a9      	ldr	r1, [r5, #8]
 8001146:	2200      	movs	r2, #0
 8001148:	4828      	ldr	r0, [pc, #160]	; (80011ec <InfoToUARTBeforeStart+0x204>)
 800114a:	f004 f8d5 	bl	80052f8 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent ,0);
 800114e:	4620      	mov	r0, r4
 8001150:	f004 f894 	bl	800527c <printToBufferWithoutEndUART1>
 8001154:	6929      	ldr	r1, [r5, #16]
 8001156:	2200      	movs	r2, #0
 8001158:	4825      	ldr	r0, [pc, #148]	; (80011f0 <InfoToUARTBeforeStart+0x208>)
 800115a:	f004 f8cd 	bl	80052f8 <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 800115e:	4620      	mov	r0, r4
 8001160:	f004 f88c 	bl	800527c <printToBufferWithoutEndUART1>
 8001164:	69a9      	ldr	r1, [r5, #24]
 8001166:	2200      	movs	r2, #0
 8001168:	4822      	ldr	r0, [pc, #136]	; (80011f4 <InfoToUARTBeforeStart+0x20c>)
 800116a:	f004 f8c5 	bl	80052f8 <printToBufferUART1D>
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 800116e:	4620      	mov	r0, r4
 8001170:	f004 f884 	bl	800527c <printToBufferWithoutEndUART1>
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <InfoToUARTBeforeStart+0x210>)
 8001176:	4821      	ldr	r0, [pc, #132]	; (80011fc <InfoToUARTBeforeStart+0x214>)
 8001178:	6819      	ldr	r1, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	f004 f8bc 	bl	80052f8 <printToBufferUART1D>
}
 8001180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delay_ms(50);
 8001184:	2032      	movs	r0, #50	; 0x32
 8001186:	f7ff bf1f 	b.w	8000fc8 <delay_ms>
 800118a:	bf00      	nop
 800118c:	08005c4e 	.word	0x08005c4e
 8001190:	20000004 	.word	0x20000004
 8001194:	08005c55 	.word	0x08005c55
 8001198:	08005c68 	.word	0x08005c68
 800119c:	08005c86 	.word	0x08005c86
 80011a0:	08005ca5 	.word	0x08005ca5
 80011a4:	08005cc2 	.word	0x08005cc2
 80011a8:	08005ce0 	.word	0x08005ce0
 80011ac:	08005cfd 	.word	0x08005cfd
 80011b0:	08005d1b 	.word	0x08005d1b
 80011b4:	08005d39 	.word	0x08005d39
 80011b8:	08005d57 	.word	0x08005d57
 80011bc:	20000154 	.word	0x20000154
 80011c0:	08005d6f 	.word	0x08005d6f
 80011c4:	08005d83 	.word	0x08005d83
 80011c8:	08005d9c 	.word	0x08005d9c
 80011cc:	08005da9 	.word	0x08005da9
 80011d0:	08005db6 	.word	0x08005db6
 80011d4:	08005dc3 	.word	0x08005dc3
 80011d8:	08005dd1 	.word	0x08005dd1
 80011dc:	08005de3 	.word	0x08005de3
 80011e0:	08005df6 	.word	0x08005df6
 80011e4:	200000f4 	.word	0x200000f4
 80011e8:	08005e13 	.word	0x08005e13
 80011ec:	08005e2f 	.word	0x08005e2f
 80011f0:	08005e57 	.word	0x08005e57
 80011f4:	08005e79 	.word	0x08005e79
 80011f8:	2000028c 	.word	0x2000028c
 80011fc:	08005e85 	.word	0x08005e85

08001200 <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	2300      	movs	r3, #0
	static char s1[16];
     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 8001204:	270a      	movs	r7, #10
 8001206:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
{
 800120a:	b085      	sub	sp, #20
 800120c:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
         s[i++] = n % 10 + '0';
 8001210:	fbb1 f6f7 	udiv	r6, r1, r7
 8001214:	461c      	mov	r4, r3
 8001216:	fb07 1516 	mls	r5, r7, r6, r1
 800121a:	3410      	adds	r4, #16
 800121c:	446c      	add	r4, sp
 800121e:	3530      	adds	r5, #48	; 0x30
 8001220:	f804 5c10 	strb.w	r5, [r4, #-16]
 8001224:	460c      	mov	r4, r1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	1c53      	adds	r3, r2, #1
     } while ((n /= 10) > 0);
 800122a:	2c09      	cmp	r4, #9
 800122c:	4631      	mov	r1, r6
 800122e:	b25b      	sxtb	r3, r3
 8001230:	dcee      	bgt.n	8001210 <itoa+0x10>
     if (sign < 0)
 8001232:	2800      	cmp	r0, #0
 8001234:	da06      	bge.n	8001244 <itoa+0x44>
         s[i++] = '-';
 8001236:	212d      	movs	r1, #45	; 0x2d
 8001238:	3310      	adds	r3, #16
 800123a:	446b      	add	r3, sp
 800123c:	3202      	adds	r2, #2
 800123e:	f803 1c10 	strb.w	r1, [r3, #-16]
 8001242:	b253      	sxtb	r3, r2
     s[i] = '\0';
 8001244:	2100      	movs	r1, #0
 8001246:	f103 0210 	add.w	r2, r3, #16
 800124a:	446a      	add	r2, sp
 800124c:	f802 1c10 	strb.w	r1, [r2, #-16]

     k=0;
     while (i)
 8001250:	461a      	mov	r2, r3
 8001252:	4c08      	ldr	r4, [pc, #32]	; (8001274 <itoa+0x74>)
 8001254:	b2d0      	uxtb	r0, r2
     {
    	s1[k]=s[i-1];
 8001256:	1a19      	subs	r1, r3, r0
 8001258:	b249      	sxtb	r1, r1
     while (i)
 800125a:	b91a      	cbnz	r2, 8001264 <itoa+0x64>
    	i--;
    	k++;
     }
     s1[k] = '\0';
     return s1;
}
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <itoa+0x74>)
     s1[k] = '\0';
 800125e:	5462      	strb	r2, [r4, r1]
}
 8001260:	b005      	add	sp, #20
 8001262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 8001264:	3210      	adds	r2, #16
 8001266:	446a      	add	r2, sp
 8001268:	f812 2c11 	ldrb.w	r2, [r2, #-17]
 800126c:	5462      	strb	r2, [r4, r1]
    	i--;
 800126e:	1e42      	subs	r2, r0, #1
 8001270:	b252      	sxtb	r2, r2
    	k++;
 8001272:	e7ef      	b.n	8001254 <itoa+0x54>
 8001274:	2000075d 	.word	0x2000075d

08001278 <itoaP>:

char * itoaP(int32_t n,char *s1)
{
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	4604      	mov	r4, r0
 800127c:	2300      	movs	r3, #0

     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 800127e:	f04f 0c0a 	mov.w	ip, #10
{
 8001282:	4608      	mov	r0, r1
 8001284:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8001288:	b085      	sub	sp, #20
 800128a:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
         s[i++] = n % 10 + '0';
 800128e:	fbb1 f7fc 	udiv	r7, r1, ip
 8001292:	461d      	mov	r5, r3
 8001294:	fb0c 1617 	mls	r6, ip, r7, r1
 8001298:	3510      	adds	r5, #16
 800129a:	446d      	add	r5, sp
 800129c:	3630      	adds	r6, #48	; 0x30
 800129e:	f805 6c10 	strb.w	r6, [r5, #-16]
 80012a2:	460d      	mov	r5, r1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	1c53      	adds	r3, r2, #1
     } while ((n /= 10) > 0);
 80012a8:	2d09      	cmp	r5, #9
 80012aa:	4639      	mov	r1, r7
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	dcee      	bgt.n	800128e <itoaP+0x16>
     if (sign < 0)
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	da06      	bge.n	80012c2 <itoaP+0x4a>
         s[i++] = '-';
 80012b4:	212d      	movs	r1, #45	; 0x2d
 80012b6:	3310      	adds	r3, #16
 80012b8:	446b      	add	r3, sp
 80012ba:	3202      	adds	r2, #2
 80012bc:	f803 1c10 	strb.w	r1, [r3, #-16]
 80012c0:	b253      	sxtb	r3, r2
     s[i] = '\0';
 80012c2:	2100      	movs	r1, #0
 80012c4:	f103 0210 	add.w	r2, r3, #16
 80012c8:	446a      	add	r2, sp
 80012ca:	f802 1c10 	strb.w	r1, [r2, #-16]

     k=0;
     while (i)
 80012ce:	461a      	mov	r2, r3
 80012d0:	b2d4      	uxtb	r4, r2
     {
    	s1[k]=s[i-1];
 80012d2:	1b19      	subs	r1, r3, r4
 80012d4:	b249      	sxtb	r1, r1
 80012d6:	1845      	adds	r5, r0, r1
     while (i)
 80012d8:	b912      	cbnz	r2, 80012e0 <itoaP+0x68>
    	i--;
    	k++;
     }
     s1[k] = '\0';
 80012da:	702a      	strb	r2, [r5, #0]
     return s1;
}
 80012dc:	b005      	add	sp, #20
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 80012e0:	3210      	adds	r2, #16
 80012e2:	446a      	add	r2, sp
 80012e4:	f812 2c11 	ldrb.w	r2, [r2, #-17]
 80012e8:	5442      	strb	r2, [r0, r1]
    	i--;
 80012ea:	1e62      	subs	r2, r4, #1
 80012ec:	b252      	sxtb	r2, r2
    	k++;
 80012ee:	e7ef      	b.n	80012d0 <itoaP+0x58>

080012f0 <itoa_koma>:

char * itoa_koma(int32_t n,uint8_t koma)
{
 80012f0:	2200      	movs	r2, #0
    if ((sign = n) < 0)
    	n = -n;
     i = 0;
     do
     {
         s[i++] = n % 10 + '0';
 80012f2:	f04f 0c0a 	mov.w	ip, #10
{
 80012f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f8:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 80012fc:	b08b      	sub	sp, #44	; 0x2c
 80012fe:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
         s[i++] = n % 10 + '0';
 8001302:	fbb4 f7fc 	udiv	r7, r4, ip
 8001306:	4615      	mov	r5, r2
 8001308:	fb0c 4617 	mls	r6, ip, r7, r4
 800130c:	3528      	adds	r5, #40	; 0x28
 800130e:	446d      	add	r5, sp
 8001310:	3630      	adds	r6, #48	; 0x30
 8001312:	f805 6c28 	strb.w	r6, [r5, #-40]
 8001316:	4625      	mov	r5, r4
 8001318:	b2d3      	uxtb	r3, r2
 800131a:	1c5a      	adds	r2, r3, #1
     } while ((n /= 10) > 0);
 800131c:	2d09      	cmp	r5, #9
 800131e:	463c      	mov	r4, r7
 8001320:	b252      	sxtb	r2, r2
 8001322:	dcee      	bgt.n	8001302 <itoa_koma+0x12>
     s[i] = '\0';
     if (i<=1)
 8001324:	2a01      	cmp	r2, #1
 8001326:	f102 0428 	add.w	r4, r2, #40	; 0x28
     {
       	 s[i] = '0';
 800132a:	bfd4      	ite	le
 800132c:	2230      	movle	r2, #48	; 0x30
     s[i] = '\0';
 800132e:	2300      	movgt	r3, #0
 8001330:	446c      	add	r4, sp
       	 i++;
 8001332:	bfdd      	ittte	le
 8001334:	3302      	addle	r3, #2
       	 s[i] = '0';
 8001336:	f804 2c28 	strble.w	r2, [r4, #-40]
       	 i++;
 800133a:	b25a      	sxtble	r2, r3
     s[i] = '\0';
 800133c:	f804 3c28 	strbgt.w	r3, [r4, #-40]
     }
     if (i<=2&&koma>1)
 8001340:	2a02      	cmp	r2, #2
 8001342:	dc09      	bgt.n	8001358 <itoa_koma+0x68>
 8001344:	2901      	cmp	r1, #1
 8001346:	d907      	bls.n	8001358 <itoa_koma+0x68>
     {
    	 s[i] = '0';
 8001348:	2430      	movs	r4, #48	; 0x30
 800134a:	f102 0328 	add.w	r3, r2, #40	; 0x28
 800134e:	446b      	add	r3, sp
    	 i++;
 8001350:	3201      	adds	r2, #1
    	 s[i] = '0';
 8001352:	f803 4c28 	strb.w	r4, [r3, #-40]
    	 i++;
 8001356:	b252      	sxtb	r2, r2
     }
     k=0;
     j=0;
     while (j<i)
 8001358:	2400      	movs	r4, #0
 800135a:	466e      	mov	r6, sp
     k=0;
 800135c:	4623      	mov	r3, r4
     {
    	 if (k==koma)
         {
         	 sKoma[k]='.';
 800135e:	272e      	movs	r7, #46	; 0x2e
     while (j<i)
 8001360:	b265      	sxtb	r5, r4
 8001362:	42aa      	cmp	r2, r5
 8001364:	dc12      	bgt.n	800138c <itoa_koma+0x9c>
         }
    	 sKoma[k]=s[j];
         j++;
         k++;
      }
     if (sign < 0) sKoma[k++] = '-';
 8001366:	2800      	cmp	r0, #0
 8001368:	da06      	bge.n	8001378 <itoa_koma+0x88>
 800136a:	212d      	movs	r1, #45	; 0x2d
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	3328      	adds	r3, #40	; 0x28
 8001370:	446b      	add	r3, sp
 8001372:	f803 1c14 	strb.w	r1, [r3, #-20]
 8001376:	b253      	sxtb	r3, r2
 8001378:	461a      	mov	r2, r3
 800137a:	4c12      	ldr	r4, [pc, #72]	; (80013c4 <itoa_koma+0xd4>)
 800137c:	b2d0      	uxtb	r0, r2
     i=0;
     while (k)
     {
    	s1[i]=sKoma[k-1];
 800137e:	1a19      	subs	r1, r3, r0
 8001380:	b249      	sxtb	r1, r1
     while (k)
 8001382:	b9ba      	cbnz	r2, 80013b4 <itoa_koma+0xc4>
    	k--;
    	i++;
     }
     s1[i] = '\0';
     return s1;
}
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <itoa_koma+0xd4>)
     s1[i] = '\0';
 8001386:	5462      	strb	r2, [r4, r1]
}
 8001388:	b00b      	add	sp, #44	; 0x2c
 800138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	 if (k==koma)
 800138c:	428b      	cmp	r3, r1
 800138e:	461d      	mov	r5, r3
 8001390:	d105      	bne.n	800139e <itoa_koma+0xae>
         	 sKoma[k]='.';
 8001392:	3528      	adds	r5, #40	; 0x28
         	 k++;
 8001394:	3301      	adds	r3, #1
         	 sKoma[k]='.';
 8001396:	446d      	add	r5, sp
         	 k++;
 8001398:	b25b      	sxtb	r3, r3
         	 sKoma[k]='.';
 800139a:	f805 7c14 	strb.w	r7, [r5, #-20]
    	 sKoma[k]=s[j];
 800139e:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80013a2:	f816 cb01 	ldrb.w	ip, [r6], #1
 80013a6:	446d      	add	r5, sp
         k++;
 80013a8:	3301      	adds	r3, #1
    	 sKoma[k]=s[j];
 80013aa:	f805 cc14 	strb.w	ip, [r5, #-20]
         k++;
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	3401      	adds	r4, #1
 80013b2:	e7d5      	b.n	8001360 <itoa_koma+0x70>
    	s1[i]=sKoma[k-1];
 80013b4:	3228      	adds	r2, #40	; 0x28
 80013b6:	446a      	add	r2, sp
 80013b8:	f812 2c15 	ldrb.w	r2, [r2, #-21]
 80013bc:	5462      	strb	r2, [r4, r1]
    	k--;
 80013be:	1e42      	subs	r2, r0, #1
 80013c0:	b252      	sxtb	r2, r2
    	i++;
 80013c2:	e7db      	b.n	800137c <itoa_koma+0x8c>
 80013c4:	2000074c 	.word	0x2000074c

080013c8 <Module16>:
     s1[i] = '\0';
     return s1;
}
int16_t Module16 (int16_t value)
{
	if (value == 0) return 0;
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d002      	beq.n	80013d2 <Module16+0xa>
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
 80013cc:	bfdc      	itt	le
 80013ce:	4240      	negle	r0, r0
 80013d0:	b200      	sxthle	r0, r0
}
 80013d2:	4770      	bx	lr

080013d4 <strlen1>:
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
}

uint8_t strlen1(char string[])
{
 80013d4:	4602      	mov	r2, r0
	uint8_t i=0;
	while(string[i]!='\0')
 80013d6:	2300      	movs	r3, #0
 80013d8:	b2d8      	uxtb	r0, r3
 80013da:	5c11      	ldrb	r1, [r2, r0]
 80013dc:	3301      	adds	r3, #1
 80013de:	2900      	cmp	r1, #0
 80013e0:	d1fa      	bne.n	80013d8 <strlen1+0x4>
		i++;
	return i;
}
 80013e2:	4770      	bx	lr

080013e4 <Merge2Strings>:

char * Merge2Strings(char * str1in, char * str2in, char * strout)
{
 80013e4:	b570      	push	{r4, r5, r6, lr}
 80013e6:	4604      	mov	r4, r0
 80013e8:	4610      	mov	r0, r2
	int8_t i, j;
	for (i=0; str1in[i]!='\0'; i++)
 80013ea:	2200      	movs	r2, #0
 80013ec:	b255      	sxtb	r5, r2
 80013ee:	5d63      	ldrb	r3, [r4, r5]
 80013f0:	b2d6      	uxtb	r6, r2
 80013f2:	3201      	adds	r2, #1
 80013f4:	b943      	cbnz	r3, 8001408 <Merge2Strings+0x24>
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 80013f6:	b25a      	sxtb	r2, r3
 80013f8:	5c8c      	ldrb	r4, [r1, r2]
	{
		strout[i] = str2in[j];
 80013fa:	18f2      	adds	r2, r6, r3
 80013fc:	b252      	sxtb	r2, r2
 80013fe:	1885      	adds	r5, r0, r2
	for (j=0; str2in[j]!='\0'; j++,i++)
 8001400:	3301      	adds	r3, #1
 8001402:	b91c      	cbnz	r4, 800140c <Merge2Strings+0x28>
	}
	strout[i] = '\0';
 8001404:	702c      	strb	r4, [r5, #0]
	return strout;
}
 8001406:	bd70      	pop	{r4, r5, r6, pc}
		strout[i] = str1in[i];
 8001408:	5543      	strb	r3, [r0, r5]
	for (i=0; str1in[i]!='\0'; i++)
 800140a:	e7ef      	b.n	80013ec <Merge2Strings+0x8>
		strout[i] = str2in[j];
 800140c:	5484      	strb	r4, [r0, r2]
	for (j=0; str2in[j]!='\0'; j++,i++)
 800140e:	e7f2      	b.n	80013f6 <Merge2Strings+0x12>

08001410 <Merge3Strings>:
char * Merge3Strings(char * str1in, char * str2in,char * str3in, char * strout)
{
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	4605      	mov	r5, r0
 8001414:	460e      	mov	r6, r1
 8001416:	4618      	mov	r0, r3
	int8_t i, j,k;
	for (i=0; str1in[i]!='\0'; i++)
 8001418:	2400      	movs	r4, #0
 800141a:	b261      	sxtb	r1, r4
 800141c:	5c6b      	ldrb	r3, [r5, r1]
 800141e:	b2e7      	uxtb	r7, r4
 8001420:	3401      	adds	r4, #1
 8001422:	b983      	cbnz	r3, 8001446 <Merge3Strings+0x36>
 8001424:	b2dd      	uxtb	r5, r3
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 8001426:	5cf1      	ldrb	r1, [r6, r3]
 8001428:	19ec      	adds	r4, r5, r7
 800142a:	fa5f fc84 	uxtb.w	ip, r4
	{
		strout[i] = str2in[j];
 800142e:	b264      	sxtb	r4, r4
	for (j=0; str2in[j]!='\0'; j++,i++)
 8001430:	b959      	cbnz	r1, 800144a <Merge3Strings+0x3a>
	}
	for (k=0; str3in[k]!='\0'; k++,i++)
 8001432:	b24b      	sxtb	r3, r1
 8001434:	5cd4      	ldrb	r4, [r2, r3]
	{
		strout[i] = str3in[k];
 8001436:	eb0c 0301 	add.w	r3, ip, r1
 800143a:	b25b      	sxtb	r3, r3
 800143c:	18c5      	adds	r5, r0, r3
	for (k=0; str3in[k]!='\0'; k++,i++)
 800143e:	3101      	adds	r1, #1
 8001440:	b93c      	cbnz	r4, 8001452 <Merge3Strings+0x42>
	}
	strout[i] = '\0';
 8001442:	702c      	strb	r4, [r5, #0]
	return strout;
}
 8001444:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strout[i] = str1in[i];
 8001446:	5443      	strb	r3, [r0, r1]
	for (i=0; str1in[i]!='\0'; i++)
 8001448:	e7e7      	b.n	800141a <Merge3Strings+0xa>
		strout[i] = str2in[j];
 800144a:	1c6b      	adds	r3, r5, #1
 800144c:	5501      	strb	r1, [r0, r4]
	for (j=0; str2in[j]!='\0'; j++,i++)
 800144e:	b25b      	sxtb	r3, r3
 8001450:	e7e8      	b.n	8001424 <Merge3Strings+0x14>
		strout[i] = str3in[k];
 8001452:	54c4      	strb	r4, [r0, r3]
	for (k=0; str3in[k]!='\0'; k++,i++)
 8001454:	e7ed      	b.n	8001432 <Merge3Strings+0x22>

08001456 <ClockStringWithSec>:

char *ClockStringWithSec(uint32_t time, char *OutStr)
{
 8001456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800145a:	4607      	mov	r7, r0
	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 800145c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 8001460:	b086      	sub	sp, #24
 8001462:	460c      	mov	r4, r1
	itoaP(time/3600,s);
 8001464:	fbb7 f0f0 	udiv	r0, r7, r0
 8001468:	a901      	add	r1, sp, #4
 800146a:	f7ff ff05 	bl	8001278 <itoaP>
	i=0;
	if (strlen1(s)<2)
 800146e:	a801      	add	r0, sp, #4
 8001470:	f7ff ffb0 	bl	80013d4 <strlen1>
 8001474:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 8001476:	bf96      	itet	ls
 8001478:	2201      	movls	r2, #1
	i=0;
 800147a:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 800147c:	2330      	movls	r3, #48	; 0x30
	i=0;
 800147e:	4615      	mov	r5, r2
		OutStr[i] = '0';
 8001480:	bf98      	it	ls
 8001482:	7023      	strbls	r3, [r4, #0]
		i++;
 8001484:	b2ee      	uxtb	r6, r5
	}

	for (k=0; s[k]!='\0';k++, i++)
 8001486:	1ab3      	subs	r3, r6, r2
 8001488:	b25b      	sxtb	r3, r3
 800148a:	3318      	adds	r3, #24
 800148c:	446b      	add	r3, sp
 800148e:	f813 1c14 	ldrb.w	r1, [r3, #-20]
	{
		OutStr[i] = s[k];
 8001492:	1963      	adds	r3, r4, r5
 8001494:	1c75      	adds	r5, r6, #1
 8001496:	b26d      	sxtb	r5, r5
	for (k=0; s[k]!='\0';k++, i++)
 8001498:	2900      	cmp	r1, #0
 800149a:	d149      	bne.n	8001530 <ClockStringWithSec+0xda>
	}

	OutStr[i] = ':';
 800149c:	223a      	movs	r2, #58	; 0x3a
 800149e:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 80014a0:	233c      	movs	r3, #60	; 0x3c
 80014a2:	fbb7 f2f3 	udiv	r2, r7, r3
 80014a6:	fbb2 f0f3 	udiv	r0, r2, r3
 80014aa:	a901      	add	r1, sp, #4
 80014ac:	fb03 2010 	mls	r0, r3, r0, r2
 80014b0:	f7ff fee2 	bl	8001278 <itoaP>
	if (strlen1(s)<2)
 80014b4:	a801      	add	r0, sp, #4
 80014b6:	f7ff ff8d 	bl	80013d4 <strlen1>
 80014ba:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 80014bc:	bf9f      	itttt	ls
 80014be:	2330      	movls	r3, #48	; 0x30
 80014c0:	5563      	strbls	r3, [r4, r5]
		i++;
 80014c2:	1cb5      	addls	r5, r6, #2
 80014c4:	b26d      	sxtbls	r5, r5
	i=0;
 80014c6:	462e      	mov	r6, r5
 80014c8:	fa5f f886 	uxtb.w	r8, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 80014cc:	eba8 0305 	sub.w	r3, r8, r5
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	3318      	adds	r3, #24
 80014d4:	446b      	add	r3, sp
 80014d6:	f813 2c14 	ldrb.w	r2, [r3, #-20]
	{
		OutStr[i] = s[j];
 80014da:	19a3      	adds	r3, r4, r6
 80014dc:	f108 0601 	add.w	r6, r8, #1
 80014e0:	b276      	sxtb	r6, r6
	for (j=0; s[j]!='\0'; i++,j++)
 80014e2:	bb3a      	cbnz	r2, 8001534 <ClockStringWithSec+0xde>
	}

	OutStr[i] = ':';
 80014e4:	223a      	movs	r2, #58	; 0x3a
 80014e6:	701a      	strb	r2, [r3, #0]
	i++;

	itoaP(time%60,s);
 80014e8:	233c      	movs	r3, #60	; 0x3c
 80014ea:	fbb7 f0f3 	udiv	r0, r7, r3
 80014ee:	a901      	add	r1, sp, #4
 80014f0:	fb03 7010 	mls	r0, r3, r0, r7
 80014f4:	f7ff fec0 	bl	8001278 <itoaP>
	if (strlen1(s)<2)
 80014f8:	a801      	add	r0, sp, #4
 80014fa:	f7ff ff6b 	bl	80013d4 <strlen1>
 80014fe:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 8001500:	bf9c      	itt	ls
 8001502:	2330      	movls	r3, #48	; 0x30
 8001504:	55a3      	strbls	r3, [r4, r6]
	i=0;
 8001506:	f04f 0300 	mov.w	r3, #0
		i++;
 800150a:	bf9c      	itt	ls
 800150c:	f108 0602 	addls.w	r6, r8, #2
 8001510:	b276      	sxtbls	r6, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 8001512:	b25a      	sxtb	r2, r3
 8001514:	3218      	adds	r2, #24
 8001516:	446a      	add	r2, sp
 8001518:	f812 1c14 	ldrb.w	r1, [r2, #-20]
	{
		OutStr[i] = s[j];
 800151c:	199a      	adds	r2, r3, r6
 800151e:	b252      	sxtb	r2, r2
 8001520:	18a0      	adds	r0, r4, r2
	for (j=0; s[j]!='\0'; i++,j++)
 8001522:	3301      	adds	r3, #1
 8001524:	b941      	cbnz	r1, 8001538 <ClockStringWithSec+0xe2>
	}

	OutStr[i] = '\0';
 8001526:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 8001528:	4620      	mov	r0, r4
 800152a:	b006      	add	sp, #24
 800152c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		OutStr[i] = s[k];
 8001530:	7019      	strb	r1, [r3, #0]
	for (k=0; s[k]!='\0';k++, i++)
 8001532:	e7a7      	b.n	8001484 <ClockStringWithSec+0x2e>
		OutStr[i] = s[j];
 8001534:	701a      	strb	r2, [r3, #0]
	for (j=0; s[j]!='\0'; i++,j++)
 8001536:	e7c7      	b.n	80014c8 <ClockStringWithSec+0x72>
		OutStr[i] = s[j];
 8001538:	54a1      	strb	r1, [r4, r2]
	for (j=0; s[j]!='\0'; i++,j++)
 800153a:	e7ea      	b.n	8001512 <ClockStringWithSec+0xbc>

0800153c <ClockStringNoSec>:

char *ClockStringNoSec(uint32_t time, char *OutStr)
{
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	4606      	mov	r6, r0

	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 8001540:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 8001544:	b087      	sub	sp, #28
 8001546:	460c      	mov	r4, r1
	itoaP(time/3600,s);
 8001548:	fbb6 f0f0 	udiv	r0, r6, r0
 800154c:	a901      	add	r1, sp, #4
 800154e:	f7ff fe93 	bl	8001278 <itoaP>
	i=0;
	if (strlen1(s)<2)
 8001552:	a801      	add	r0, sp, #4
 8001554:	f7ff ff3e 	bl	80013d4 <strlen1>
 8001558:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 800155a:	bf96      	itet	ls
 800155c:	2201      	movls	r2, #1
	i=0;
 800155e:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 8001560:	2330      	movls	r3, #48	; 0x30
	i=0;
 8001562:	4615      	mov	r5, r2
		OutStr[i] = '0';
 8001564:	bf98      	it	ls
 8001566:	7023      	strbls	r3, [r4, #0]
		i++;
 8001568:	b2ef      	uxtb	r7, r5
	}

	for (k=0; s[k]!='\0';k++, i++)
 800156a:	1abb      	subs	r3, r7, r2
 800156c:	b25b      	sxtb	r3, r3
 800156e:	3318      	adds	r3, #24
 8001570:	446b      	add	r3, sp
 8001572:	f813 1c14 	ldrb.w	r1, [r3, #-20]
	{
		OutStr[i] = s[k];
 8001576:	1963      	adds	r3, r4, r5
 8001578:	1c7d      	adds	r5, r7, #1
 800157a:	b26d      	sxtb	r5, r5
	for (k=0; s[k]!='\0';k++, i++)
 800157c:	bb29      	cbnz	r1, 80015ca <ClockStringNoSec+0x8e>
	}

	OutStr[i] = ':';
 800157e:	223a      	movs	r2, #58	; 0x3a
 8001580:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 8001582:	233c      	movs	r3, #60	; 0x3c
 8001584:	fbb6 f6f3 	udiv	r6, r6, r3
 8001588:	fbb6 f0f3 	udiv	r0, r6, r3
 800158c:	a901      	add	r1, sp, #4
 800158e:	fb03 6010 	mls	r0, r3, r0, r6
 8001592:	f7ff fe71 	bl	8001278 <itoaP>
	if (strlen1(s)<2)
 8001596:	a801      	add	r0, sp, #4
 8001598:	f7ff ff1c 	bl	80013d4 <strlen1>
 800159c:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 800159e:	bf9c      	itt	ls
 80015a0:	2330      	movls	r3, #48	; 0x30
 80015a2:	5563      	strbls	r3, [r4, r5]
	i=0;
 80015a4:	f04f 0300 	mov.w	r3, #0
		i++;
 80015a8:	bf9c      	itt	ls
 80015aa:	1cbd      	addls	r5, r7, #2
 80015ac:	b26d      	sxtbls	r5, r5
	}
	for (j=0; s[j]!='\0'; i++,j++)
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	3218      	adds	r2, #24
 80015b2:	446a      	add	r2, sp
 80015b4:	f812 1c14 	ldrb.w	r1, [r2, #-20]
	{
		OutStr[i] = s[j];
 80015b8:	195a      	adds	r2, r3, r5
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	18a0      	adds	r0, r4, r2
	for (j=0; s[j]!='\0'; i++,j++)
 80015be:	3301      	adds	r3, #1
 80015c0:	b929      	cbnz	r1, 80015ce <ClockStringNoSec+0x92>
	}


	OutStr[i] = '\0';
 80015c2:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 80015c4:	4620      	mov	r0, r4
 80015c6:	b007      	add	sp, #28
 80015c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		OutStr[i] = s[k];
 80015ca:	7019      	strb	r1, [r3, #0]
	for (k=0; s[k]!='\0';k++, i++)
 80015cc:	e7cc      	b.n	8001568 <ClockStringNoSec+0x2c>
		OutStr[i] = s[j];
 80015ce:	54a1      	strb	r1, [r4, r2]
	for (j=0; s[j]!='\0'; i++,j++)
 80015d0:	e7ed      	b.n	80015ae <ClockStringNoSec+0x72>
	...

080015d4 <middle_of_3Imax1>:


int32_t middle_of_3Imax1(int32_t value)
{
 80015d4:	4603      	mov	r3, r0
   static int32_t InputValueI1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI1[2] = InputValueI1[1];
 80015d6:	490c      	ldr	r1, [pc, #48]	; (8001608 <middle_of_3Imax1+0x34>)
 80015d8:	6848      	ldr	r0, [r1, #4]
   InputValueI1[1] = InputValueI1[0];
 80015da:	680a      	ldr	r2, [r1, #0]
   InputValueI1[2] = InputValueI1[1];
 80015dc:	6088      	str	r0, [r1, #8]
   InputValueI1[0] = value;
   a = InputValueI1[2];
   b = InputValueI1[1];
   c = InputValueI1[0];
   if ((a <= b) && (a <= c)){
 80015de:	4290      	cmp	r0, r2
   InputValueI1[0] = value;
 80015e0:	e9c1 3200 	strd	r3, r2, [r1]
   if ((a <= b) && (a <= c)){
 80015e4:	dc06      	bgt.n	80015f4 <middle_of_3Imax1+0x20>
 80015e6:	4298      	cmp	r0, r3
 80015e8:	dc0a      	bgt.n	8001600 <middle_of_3Imax1+0x2c>
      middle = (b <= c) ? b : c;
 80015ea:	429a      	cmp	r2, r3
 80015ec:	bfa8      	it	ge
 80015ee:	461a      	movge	r2, r3
 80015f0:	4610      	mov	r0, r2
 80015f2:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dc03      	bgt.n	8001600 <middle_of_3Imax1+0x2c>
         middle = (a <= c) ? a : c;
 80015f8:	4298      	cmp	r0, r3
 80015fa:	bfa8      	it	ge
 80015fc:	4618      	movge	r0, r3
 80015fe:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001600:	4290      	cmp	r0, r2
 8001602:	bfa8      	it	ge
 8001604:	4610      	movge	r0, r2
      }
   }

   return middle;
}
 8001606:	4770      	bx	lr
 8001608:	20000710 	.word	0x20000710

0800160c <middle_of_3Imax2>:

int32_t middle_of_3Imax2(int32_t value)
{
 800160c:	4603      	mov	r3, r0
   static int32_t InputValueI2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI2[2] = InputValueI2[1];
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <middle_of_3Imax2+0x34>)
 8001610:	6848      	ldr	r0, [r1, #4]
   InputValueI2[1] = InputValueI2[0];
 8001612:	680a      	ldr	r2, [r1, #0]
   InputValueI2[2] = InputValueI2[1];
 8001614:	6088      	str	r0, [r1, #8]
   InputValueI2[0] = value;
   a = InputValueI2[2];
   b = InputValueI2[1];
   c = InputValueI2[0];
   if ((a <= b) && (a <= c)){
 8001616:	4290      	cmp	r0, r2
   InputValueI2[0] = value;
 8001618:	e9c1 3200 	strd	r3, r2, [r1]
   if ((a <= b) && (a <= c)){
 800161c:	dc06      	bgt.n	800162c <middle_of_3Imax2+0x20>
 800161e:	4298      	cmp	r0, r3
 8001620:	dc0a      	bgt.n	8001638 <middle_of_3Imax2+0x2c>
      middle = (b <= c) ? b : c;
 8001622:	429a      	cmp	r2, r3
 8001624:	bfa8      	it	ge
 8001626:	461a      	movge	r2, r3
 8001628:	4610      	mov	r0, r2
 800162a:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 800162c:	429a      	cmp	r2, r3
 800162e:	dc03      	bgt.n	8001638 <middle_of_3Imax2+0x2c>
         middle = (a <= c) ? a : c;
 8001630:	4298      	cmp	r0, r3
 8001632:	bfa8      	it	ge
 8001634:	4618      	movge	r0, r3
 8001636:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001638:	4290      	cmp	r0, r2
 800163a:	bfa8      	it	ge
 800163c:	4610      	movge	r0, r2
      }
   }

   return middle;
}
 800163e:	4770      	bx	lr
 8001640:	2000071c 	.word	0x2000071c

08001644 <middle_of_3Umax1>:

int32_t middle_of_3Umax1(int32_t value)
{
 8001644:	4603      	mov	r3, r0
   static int32_t InputValueU1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU1[2] = InputValueU1[1];
 8001646:	490c      	ldr	r1, [pc, #48]	; (8001678 <middle_of_3Umax1+0x34>)
 8001648:	6848      	ldr	r0, [r1, #4]
   InputValueU1[1] = InputValueU1[0];
 800164a:	680a      	ldr	r2, [r1, #0]
   InputValueU1[2] = InputValueU1[1];
 800164c:	6088      	str	r0, [r1, #8]
   InputValueU1[0] = value;
   a = InputValueU1[2];
   b = InputValueU1[1];
   c = InputValueU1[0];
   if ((a <= b) && (a <= c)){
 800164e:	4290      	cmp	r0, r2
   InputValueU1[0] = value;
 8001650:	e9c1 3200 	strd	r3, r2, [r1]
   if ((a <= b) && (a <= c)){
 8001654:	dc06      	bgt.n	8001664 <middle_of_3Umax1+0x20>
 8001656:	4298      	cmp	r0, r3
 8001658:	dc0a      	bgt.n	8001670 <middle_of_3Umax1+0x2c>
      middle = (b <= c) ? b : c;
 800165a:	429a      	cmp	r2, r3
 800165c:	bfa8      	it	ge
 800165e:	461a      	movge	r2, r3
 8001660:	4610      	mov	r0, r2
 8001662:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 8001664:	429a      	cmp	r2, r3
 8001666:	dc03      	bgt.n	8001670 <middle_of_3Umax1+0x2c>
         middle = (a <= c) ? a : c;
 8001668:	4298      	cmp	r0, r3
 800166a:	bfa8      	it	ge
 800166c:	4618      	movge	r0, r3
 800166e:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001670:	4290      	cmp	r0, r2
 8001672:	bfa8      	it	ge
 8001674:	4610      	movge	r0, r2
      }
   }

   return middle;
}
 8001676:	4770      	bx	lr
 8001678:	20000728 	.word	0x20000728

0800167c <middle_of_3Umax2>:

int32_t middle_of_3Umax2(int32_t value)
{
 800167c:	4603      	mov	r3, r0
   static int32_t InputValueU2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU2[2] = InputValueU2[1];
 800167e:	490c      	ldr	r1, [pc, #48]	; (80016b0 <middle_of_3Umax2+0x34>)
 8001680:	6848      	ldr	r0, [r1, #4]
   InputValueU2[1] = InputValueU2[0];
 8001682:	680a      	ldr	r2, [r1, #0]
   InputValueU2[2] = InputValueU2[1];
 8001684:	6088      	str	r0, [r1, #8]
   InputValueU2[0] = value;
   a = InputValueU2[2];
   b = InputValueU2[1];
   c = InputValueU2[0];
   if ((a <= b) && (a <= c)){
 8001686:	4290      	cmp	r0, r2
   InputValueU2[0] = value;
 8001688:	e9c1 3200 	strd	r3, r2, [r1]
   if ((a <= b) && (a <= c)){
 800168c:	dc06      	bgt.n	800169c <middle_of_3Umax2+0x20>
 800168e:	4298      	cmp	r0, r3
 8001690:	dc0a      	bgt.n	80016a8 <middle_of_3Umax2+0x2c>
      middle = (b <= c) ? b : c;
 8001692:	429a      	cmp	r2, r3
 8001694:	bfa8      	it	ge
 8001696:	461a      	movge	r2, r3
 8001698:	4610      	mov	r0, r2
 800169a:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 800169c:	429a      	cmp	r2, r3
 800169e:	dc03      	bgt.n	80016a8 <middle_of_3Umax2+0x2c>
         middle = (a <= c) ? a : c;
 80016a0:	4298      	cmp	r0, r3
 80016a2:	bfa8      	it	ge
 80016a4:	4618      	movge	r0, r3
 80016a6:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80016a8:	4290      	cmp	r0, r2
 80016aa:	bfa8      	it	ge
 80016ac:	4610      	movge	r0, r2
      }
   }

   return middle;
}
 80016ae:	4770      	bx	lr
 80016b0:	20000734 	.word	0x20000734

080016b4 <middle_of_3Umax3>:
int32_t middle_of_3Umax3(int32_t value)
{
 80016b4:	4603      	mov	r3, r0
   static int32_t InputValueU3[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU3[2] = InputValueU3[1];
 80016b6:	490c      	ldr	r1, [pc, #48]	; (80016e8 <middle_of_3Umax3+0x34>)
 80016b8:	6848      	ldr	r0, [r1, #4]
   InputValueU3[1] = InputValueU3[0];
 80016ba:	680a      	ldr	r2, [r1, #0]
   InputValueU3[2] = InputValueU3[1];
 80016bc:	6088      	str	r0, [r1, #8]
   InputValueU3[0] = value;
   a = InputValueU3[2];
   b = InputValueU3[1];
   c = InputValueU3[0];
   if ((a <= b) && (a <= c)){
 80016be:	4290      	cmp	r0, r2
   InputValueU3[0] = value;
 80016c0:	e9c1 3200 	strd	r3, r2, [r1]
   if ((a <= b) && (a <= c)){
 80016c4:	dc06      	bgt.n	80016d4 <middle_of_3Umax3+0x20>
 80016c6:	4298      	cmp	r0, r3
 80016c8:	dc0a      	bgt.n	80016e0 <middle_of_3Umax3+0x2c>
      middle = (b <= c) ? b : c;
 80016ca:	429a      	cmp	r2, r3
 80016cc:	bfa8      	it	ge
 80016ce:	461a      	movge	r2, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dc03      	bgt.n	80016e0 <middle_of_3Umax3+0x2c>
         middle = (a <= c) ? a : c;
 80016d8:	4298      	cmp	r0, r3
 80016da:	bfa8      	it	ge
 80016dc:	4618      	movge	r0, r3
 80016de:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80016e0:	4290      	cmp	r0, r2
 80016e2:	bfa8      	it	ge
 80016e4:	4610      	movge	r0, r2
      }
   }

   return middle;
}
 80016e6:	4770      	bx	lr
 80016e8:	20000740 	.word	0x20000740

080016ec <RunningAverageI1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI1 = 0;
	filteredlValueI1 += (newValue - filteredlValueI1) * k;
	return filteredlValueI1/10;
}
 80016ec:	4770      	bx	lr

080016ee <RunningAverageI2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI2 = 0;
	filteredlValueI2 += (newValue - filteredlValueI2) * k;
	return filteredlValueI2/10;
}
 80016ee:	4770      	bx	lr

080016f0 <RunningAverageU1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU1 = 0;
	filteredlValueU1 += (newValue - filteredlValueU1) * k;
	return filteredlValueU1/10;
}
 80016f0:	4770      	bx	lr

080016f2 <RunningAverageU2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU2 = 0;
	filteredlValueU2 += (newValue - filteredlValueU2) * k;
	return filteredlValueU2/10;
}
 80016f2:	4770      	bx	lr

080016f4 <Menu_GetCurrentMenu>:


Menu_Item_t* Menu_GetCurrentMenu(void)
{
 return CurrentMenuItem;
}
 80016f4:	4b01      	ldr	r3, [pc, #4]	; (80016fc <Menu_GetCurrentMenu+0x8>)
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	2000024c 	.word	0x2000024c

08001700 <Menu_Navigate>:

void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <Menu_Navigate+0x28>)
{
 8001702:	b510      	push	{r4, lr}
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 8001704:	4298      	cmp	r0, r3
 8001706:	d00d      	beq.n	8001724 <Menu_Navigate+0x24>
 8001708:	b160      	cbz	r0, 8001724 <Menu_Navigate+0x24>
  return;

 CurrentMenuItem = NewMenu;

 if (MenuWriteFunc)
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <Menu_Navigate+0x2c>)
 CurrentMenuItem = NewMenu;
 800170c:	4c08      	ldr	r4, [pc, #32]	; (8001730 <Menu_Navigate+0x30>)
 if (MenuWriteFunc)
 800170e:	681b      	ldr	r3, [r3, #0]
 CurrentMenuItem = NewMenu;
 8001710:	6020      	str	r0, [r4, #0]
 if (MenuWriteFunc)
 8001712:	b10b      	cbz	r3, 8001718 <Menu_Navigate+0x18>
  MenuWriteFunc(CurrentMenuItem->Text);
 8001714:	3018      	adds	r0, #24
 8001716:	4798      	blx	r3

 void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	691b      	ldr	r3, [r3, #16]

 if (EnterCallback)
 800171c:	b113      	cbz	r3, 8001724 <Menu_Navigate+0x24>
  EnterCallback();
}
 800171e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EnterCallback();
 8001722:	4718      	bx	r3
}
 8001724:	bd10      	pop	{r4, pc}
 8001726:	bf00      	nop
 8001728:	08005e98 	.word	0x08005e98
 800172c:	20000770 	.word	0x20000770
 8001730:	2000024c 	.word	0x2000024c

08001734 <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)( char* Text))
{
 MenuWriteFunc = WriteFunc;
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <Menu_SetGenericWriteCallback+0xc>)
 8001736:	6018      	str	r0, [r3, #0]
 Menu_Navigate(CurrentMenuItem);
 8001738:	4b02      	ldr	r3, [pc, #8]	; (8001744 <Menu_SetGenericWriteCallback+0x10>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	f7ff bfe0 	b.w	8001700 <Menu_Navigate>
 8001740:	20000770 	.word	0x20000770
 8001744:	2000024c 	.word	0x2000024c

08001748 <Menu_SelectItem>:
}

void Menu_SelectItem(Key_Pressed_t key)
{
 if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <Menu_SelectItem+0x14>)
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <Menu_SelectItem+0x18>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4293      	cmp	r3, r2
 8001750:	d003      	beq.n	800175a <Menu_SelectItem+0x12>
 8001752:	b113      	cbz	r3, 800175a <Menu_SelectItem+0x12>
  return;

 void (*SelectCallback)(Key_Pressed_t) = CurrentMenuItem->SelectCallback;
 8001754:	695b      	ldr	r3, [r3, #20]

 if (SelectCallback)
 8001756:	b103      	cbz	r3, 800175a <Menu_SelectItem+0x12>
  SelectCallback(key);
 8001758:	4718      	bx	r3
}
 800175a:	4770      	bx	lr
 800175c:	2000024c 	.word	0x2000024c
 8001760:	08005e98 	.word	0x08005e98

08001764 <strobe>:
uint8_t pos_x = 0;
uint8_t pos_y = 0;

void strobe(void)
{
	LCD_PORT->BSRR=LCD_EN_BS;
 8001764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
{
 8001768:	b510      	push	{r4, lr}
	LCD_PORT->BSRR=LCD_EN_BS;
 800176a:	4c06      	ldr	r4, [pc, #24]	; (8001784 <strobe+0x20>)
	delay_us(2);
 800176c:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BS;
 800176e:	6123      	str	r3, [r4, #16]
	delay_us(2);
 8001770:	f7ff fbf4 	bl	8000f5c <delay_us>
	LCD_PORT->BSRR=LCD_EN_BC;
 8001774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	delay_us(2);
 8001778:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BC;
 800177a:	6123      	str	r3, [r4, #16]
}
 800177c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(2);
 8001780:	f7ff bbec 	b.w	8000f5c <delay_us>
 8001784:	40010c00 	.word	0x40010c00

08001788 <lcd_set_4bit_mode>:
			}
		}
	}
}

void lcd_set_4bit_mode(void) {
 8001788:	b570      	push	{r4, r5, r6, lr}


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 800178a:	f04f 457c 	mov.w	r5, #4227858432	; 0xfc000000
	LCD_PORT->BSRR=(LCD_DB5_BS);
 800178e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001792:	4c0d      	ldr	r4, [pc, #52]	; (80017c8 <lcd_set_4bit_mode+0x40>)
 8001794:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 8001796:	6126      	str	r6, [r4, #16]

	//LCD_PORT->BSRR=LCD_EN_BS;
	//delay_ms(1);
	//LCD_PORT->BSRR=LCD_EN_BC;

	strobe();
 8001798:	f7ff ffe4 	bl	8001764 <strobe>
	delay_ms(1);
 800179c:	2001      	movs	r0, #1
 800179e:	f7ff fc13 	bl	8000fc8 <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80017a2:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80017a4:	6126      	str	r6, [r4, #16]

	strobe();
 80017a6:	f7ff ffdd 	bl	8001764 <strobe>
	delay_ms(1);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff fc0c 	bl	8000fc8 <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
	LCD_PORT->BSRR=(LCD_DB7_BS);
 80017b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80017b4:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB7_BS);
 80017b6:	6123      	str	r3, [r4, #16]

	strobe();
 80017b8:	f7ff ffd4 	bl	8001764 <strobe>
	delay_ms(1);

}
 80017bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	delay_ms(1);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff bc01 	b.w	8000fc8 <delay_ms>
 80017c6:	bf00      	nop
 80017c8:	40010c00 	.word	0x40010c00

080017cc <lcd_send>:

void lcd_send(uint8_t byte, dat_or_comm dc)  {

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80017cc:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <lcd_send+0x98>)
void lcd_send(uint8_t byte, dat_or_comm dc)  {
 80017d2:	b570      	push	{r4, r5, r6, lr}
 80017d4:	4604      	mov	r4, r0

	if (dc) {
 80017d6:	460d      	mov	r5, r1
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80017d8:	611a      	str	r2, [r3, #16]
	if (dc) {
 80017da:	b111      	cbz	r1, 80017e2 <lcd_send+0x16>
		LCD_PORT->BSRR=LCD_CD_BS;
 80017dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017e0:	611a      	str	r2, [r3, #16]
	}

	if (byte & 0x10) {
 80017e2:	06e2      	lsls	r2, r4, #27
		LCD_PORT->BSRR=LCD_DB4_BS;
 80017e4:	bf44      	itt	mi
 80017e6:	f44f 5200 	movmi.w	r2, #8192	; 0x2000
 80017ea:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x20) {
 80017ec:	f014 0f20 	tst.w	r4, #32
		LCD_PORT->BSRR=LCD_DB5_BS;
 80017f0:	bf18      	it	ne
 80017f2:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 80017f6:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <lcd_send+0x98>)
 80017f8:	bf18      	it	ne
 80017fa:	611a      	strne	r2, [r3, #16]
	}
	if (byte & 0x40) {
 80017fc:	0666      	lsls	r6, r4, #25
		LCD_PORT->BSRR=LCD_DB6_BS;
 80017fe:	bf44      	itt	mi
 8001800:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 8001804:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x80) {
 8001806:	f014 0f80 	tst.w	r4, #128	; 0x80
		LCD_PORT->BSRR=LCD_DB7_BS;
 800180a:	bf18      	it	ne
 800180c:	f44f 6380 	movne.w	r3, #1024	; 0x400
 8001810:	4e14      	ldr	r6, [pc, #80]	; (8001864 <lcd_send+0x98>)
 8001812:	bf18      	it	ne
 8001814:	6133      	strne	r3, [r6, #16]
	}

	strobe();
 8001816:	f7ff ffa5 	bl	8001764 <strobe>


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 800181a:	f04f 5370 	mov.w	r3, #1006632960	; 0x3c000000

	if (byte & 0x01) {
 800181e:	07e0      	lsls	r0, r4, #31
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 8001820:	6133      	str	r3, [r6, #16]
		LCD_PORT->BSRR=LCD_DB4_BS;
 8001822:	bf44      	itt	mi
 8001824:	f44f 5300 	movmi.w	r3, #8192	; 0x2000
 8001828:	6133      	strmi	r3, [r6, #16]
	}
	if (byte & 0x02) {
 800182a:	07a1      	lsls	r1, r4, #30
		LCD_PORT->BSRR=LCD_DB5_BS;
 800182c:	bf42      	ittt	mi
 800182e:	f44f 5280 	movmi.w	r2, #4096	; 0x1000
 8001832:	4b0c      	ldrmi	r3, [pc, #48]	; (8001864 <lcd_send+0x98>)
 8001834:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x04) {
 8001836:	0762      	lsls	r2, r4, #29
		LCD_PORT->BSRR=LCD_DB6_BS;
 8001838:	bf42      	ittt	mi
 800183a:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 800183e:	4b09      	ldrmi	r3, [pc, #36]	; (8001864 <lcd_send+0x98>)
 8001840:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x08) {
 8001842:	0723      	lsls	r3, r4, #28
		LCD_PORT->BSRR=LCD_DB7_BS;
 8001844:	bf42      	ittt	mi
 8001846:	f44f 6280 	movmi.w	r2, #1024	; 0x400
 800184a:	4b06      	ldrmi	r3, [pc, #24]	; (8001864 <lcd_send+0x98>)
 800184c:	611a      	strmi	r2, [r3, #16]
	}



	strobe();
 800184e:	f7ff ff89 	bl	8001764 <strobe>
	delay_ms(2);
 8001852:	2002      	movs	r0, #2
 8001854:	f7ff fbb8 	bl	8000fc8 <delay_ms>
	if (dc) {
 8001858:	b11d      	cbz	r5, 8001862 <lcd_send+0x96>
			LCD_PORT->BSRR=LCD_CD_BC;
 800185a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800185e:	4b01      	ldr	r3, [pc, #4]	; (8001864 <lcd_send+0x98>)
 8001860:	611a      	str	r2, [r3, #16]
		}

}
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	40010c00 	.word	0x40010c00

08001868 <lcd_set_user_char>:
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 8001868:	00c0      	lsls	r0, r0, #3
 800186a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 800186e:	b538      	push	{r3, r4, r5, lr}
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 8001870:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 8001874:	460c      	mov	r4, r1
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 8001876:	2100      	movs	r1, #0
 8001878:	f7ff ffa8 	bl	80017cc <lcd_send>
	for (i=0;i<=7;i++) {
 800187c:	1e65      	subs	r5, r4, #1
 800187e:	3407      	adds	r4, #7
		lcd_send(char_data[i],DATA);
 8001880:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001884:	2101      	movs	r1, #1
 8001886:	f7ff ffa1 	bl	80017cc <lcd_send>
	for (i=0;i<=7;i++) {
 800188a:	42a5      	cmp	r5, r4
 800188c:	d1f8      	bne.n	8001880 <lcd_set_user_char+0x18>
}
 800188e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_send((1<<7), COMMAND);
 8001892:	2100      	movs	r1, #0
 8001894:	2080      	movs	r0, #128	; 0x80
 8001896:	f7ff bf99 	b.w	80017cc <lcd_send>

0800189a <SetSymbols>:
{
 800189a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	sym[4]=0b00000;
 800189e:	2500      	movs	r5, #0
	sym[0]=0b00100;
 80018a0:	2404      	movs	r4, #4
	sym[1]=0b10101;
 80018a2:	2715      	movs	r7, #21
	sym[6]=0b11111;
 80018a4:	261f      	movs	r6, #31
	sym[2]=0b01110;
 80018a6:	f04f 080e 	mov.w	r8, #14
	lcd_set_user_char(0,sym);//charge
 80018aa:	4669      	mov	r1, sp
 80018ac:	4628      	mov	r0, r5
	sym[0]=0b00100;
 80018ae:	f88d 4000 	strb.w	r4, [sp]
	sym[3]=0b00100;
 80018b2:	f88d 4003 	strb.w	r4, [sp, #3]
	sym[5]=0b00100;
 80018b6:	f88d 4005 	strb.w	r4, [sp, #5]
	sym[1]=0b10101;
 80018ba:	f88d 7001 	strb.w	r7, [sp, #1]
	sym[2]=0b01110;
 80018be:	f88d 8002 	strb.w	r8, [sp, #2]
	sym[4]=0b00000;
 80018c2:	f88d 5004 	strb.w	r5, [sp, #4]
	sym[6]=0b11111;
 80018c6:	f88d 6006 	strb.w	r6, [sp, #6]
	sym[7]=0b11111;
 80018ca:	f88d 6007 	strb.w	r6, [sp, #7]
	lcd_set_user_char(0,sym);//charge
 80018ce:	f7ff ffcb 	bl	8001868 <lcd_set_user_char>
	lcd_set_user_char(1,sym);//charge
 80018d2:	4669      	mov	r1, sp
 80018d4:	2001      	movs	r0, #1
	sym[2]=0b00100;
 80018d6:	f88d 4002 	strb.w	r4, [sp, #2]
	sym[6]=0b00100;
 80018da:	f88d 4006 	strb.w	r4, [sp, #6]
	sym[0]=0b10101;
 80018de:	f88d 7000 	strb.w	r7, [sp]
	sym[1]=0b01110;
 80018e2:	f88d 8001 	strb.w	r8, [sp, #1]
	sym[3]=0b00000;
 80018e6:	f88d 5003 	strb.w	r5, [sp, #3]
	sym[4]=0b00000;
 80018ea:	f88d 5004 	strb.w	r5, [sp, #4]
	sym[5]=0b00000;
 80018ee:	f88d 5005 	strb.w	r5, [sp, #5]
	sym[7]=0b11111;
 80018f2:	f88d 6007 	strb.w	r6, [sp, #7]
	lcd_set_user_char(1,sym);//charge
 80018f6:	f7ff ffb7 	bl	8001868 <lcd_set_user_char>
	lcd_set_user_char(2,sym);//discharge
 80018fa:	4669      	mov	r1, sp
 80018fc:	2002      	movs	r0, #2
	sym[1]=0b00100;
 80018fe:	f88d 4001 	strb.w	r4, [sp, #1]
	sym[5]=0b00100;
 8001902:	f88d 4005 	strb.w	r4, [sp, #5]
	sym[0]=0b00000;
 8001906:	f88d 5000 	strb.w	r5, [sp]
	sym[2]=0b01110;
 800190a:	f88d 8002 	strb.w	r8, [sp, #2]
	sym[3]=0b10101;
 800190e:	f88d 7003 	strb.w	r7, [sp, #3]
	sym[4]=0b00000;
 8001912:	f88d 5004 	strb.w	r5, [sp, #4]
	sym[6]=0b11111;
 8001916:	f88d 6006 	strb.w	r6, [sp, #6]
	sym[7]=0b11111;
 800191a:	f88d 6007 	strb.w	r6, [sp, #7]
	lcd_set_user_char(2,sym);//discharge
 800191e:	f7ff ffa3 	bl	8001868 <lcd_set_user_char>
	lcd_set_user_char(3,sym);//discharge
 8001922:	4669      	mov	r1, sp
 8001924:	2003      	movs	r0, #3
	sym[0]=0b00100;
 8001926:	f88d 4000 	strb.w	r4, [sp]
	sym[3]=0b00100;
 800192a:	f88d 4003 	strb.w	r4, [sp, #3]
	sym[6]=0b00100;
 800192e:	f88d 4006 	strb.w	r4, [sp, #6]
	sym[1]=0b01110;
 8001932:	f88d 8001 	strb.w	r8, [sp, #1]
	sym[2]=0b10101;
 8001936:	f88d 7002 	strb.w	r7, [sp, #2]
	sym[4]=0b00000;
 800193a:	f88d 5004 	strb.w	r5, [sp, #4]
	sym[5]=0b00000;
 800193e:	f88d 5005 	strb.w	r5, [sp, #5]
	sym[7]=0b11111;
 8001942:	f88d 6007 	strb.w	r6, [sp, #7]
	lcd_set_user_char(3,sym);//discharge
 8001946:	f7ff ff8f 	bl	8001868 <lcd_set_user_char>
	lcd_set_user_char(4,sym);//training
 800194a:	4669      	mov	r1, sp
 800194c:	4620      	mov	r0, r4
	sym[0]=0b00100;
 800194e:	f88d 4000 	strb.w	r4, [sp]
	sym[3]=0b00100;
 8001952:	f88d 4003 	strb.w	r4, [sp, #3]
	sym[4]=0b00100;
 8001956:	f88d 4004 	strb.w	r4, [sp, #4]
	sym[7]=0b00100;
 800195a:	f88d 4007 	strb.w	r4, [sp, #7]
	sym[1]=0b01110;
 800195e:	f88d 8001 	strb.w	r8, [sp, #1]
	sym[2]=0b10101;
 8001962:	f88d 7002 	strb.w	r7, [sp, #2]
	sym[5]=0b10101;
 8001966:	f88d 7005 	strb.w	r7, [sp, #5]
	sym[6]=0b01110;
 800196a:	f88d 8006 	strb.w	r8, [sp, #6]
	lcd_set_user_char(4,sym);//training
 800196e:	f7ff ff7b 	bl	8001868 <lcd_set_user_char>
	sym[0]=0b00010;
 8001972:	2302      	movs	r3, #2
 8001974:	f88d 3000 	strb.w	r3, [sp]
	sym[3]=0b01010;
 8001978:	230a      	movs	r3, #10
 800197a:	f88d 3003 	strb.w	r3, [sp, #3]
	sym[4]=0b01010;
 800197e:	f88d 3004 	strb.w	r3, [sp, #4]
	sym[5]=0b11100;
 8001982:	231c      	movs	r3, #28
	sym[1]=0b00111;
 8001984:	2407      	movs	r4, #7
	sym[5]=0b11100;
 8001986:	f88d 3005 	strb.w	r3, [sp, #5]
	sym[6]=0b11100;
 800198a:	f88d 3006 	strb.w	r3, [sp, #6]
	sym[7]=0b01000;
 800198e:	2308      	movs	r3, #8
	lcd_set_user_char(5,sym);//swing
 8001990:	4669      	mov	r1, sp
 8001992:	2005      	movs	r0, #5
	sym[7]=0b01000;
 8001994:	f88d 3007 	strb.w	r3, [sp, #7]
	sym[1]=0b00111;
 8001998:	f88d 4001 	strb.w	r4, [sp, #1]
	sym[2]=0b00111;
 800199c:	f88d 4002 	strb.w	r4, [sp, #2]
	lcd_set_user_char(5,sym);//swing
 80019a0:	f7ff ff62 	bl	8001868 <lcd_set_user_char>
	sym[0]=0b01111;
 80019a4:	230f      	movs	r3, #15
 80019a6:	f88d 3000 	strb.w	r3, [sp]
	sym[1]=0b00101;
 80019aa:	2305      	movs	r3, #5
 80019ac:	f88d 3001 	strb.w	r3, [sp, #1]
	sym[2]=0b00101;
 80019b0:	f88d 3002 	strb.w	r3, [sp, #2]
	sym[3]=0b00101;
 80019b4:	f88d 3003 	strb.w	r3, [sp, #3]
	sym[4]=0b00101;
 80019b8:	f88d 3004 	strb.w	r3, [sp, #4]
	sym[6]=0b01001;
 80019bc:	2309      	movs	r3, #9
	lcd_set_user_char(6,sym);//Л
 80019be:	4669      	mov	r1, sp
 80019c0:	2006      	movs	r0, #6
	sym[6]=0b01001;
 80019c2:	f88d 3006 	strb.w	r3, [sp, #6]
	sym[5]=0b10101;
 80019c6:	f88d 7005 	strb.w	r7, [sp, #5]
	sym[7]=0b00000;
 80019ca:	f88d 5007 	strb.w	r5, [sp, #7]
	lcd_set_user_char(6,sym);//Л
 80019ce:	f7ff ff4b 	bl	8001868 <lcd_set_user_char>
	sym[0]=0b10001;
 80019d2:	2311      	movs	r3, #17
 80019d4:	f88d 3000 	strb.w	r3, [sp]
	sym[1]=0b10001;
 80019d8:	f88d 3001 	strb.w	r3, [sp, #1]
	sym[2]=0b10001;
 80019dc:	f88d 3002 	strb.w	r3, [sp, #2]
	sym[4]=0b00001;
 80019e0:	2301      	movs	r3, #1
	lcd_set_user_char(7,sym);//Ч
 80019e2:	4669      	mov	r1, sp
 80019e4:	4620      	mov	r0, r4
	sym[3]=0b11111;
 80019e6:	f88d 6003 	strb.w	r6, [sp, #3]
	sym[4]=0b00001;
 80019ea:	f88d 3004 	strb.w	r3, [sp, #4]
	sym[5]=0b00001;
 80019ee:	f88d 3005 	strb.w	r3, [sp, #5]
	sym[6]=0b00001;
 80019f2:	f88d 3006 	strb.w	r3, [sp, #6]
	sym[7]=0b00000;
 80019f6:	f88d 5007 	strb.w	r5, [sp, #7]
	lcd_set_user_char(7,sym);//Ч
 80019fa:	f7ff ff35 	bl	8001868 <lcd_set_user_char>
}
 80019fe:	b002      	add	sp, #8
 8001a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a04 <lcd_set_xy>:
	pos_x = x;
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <lcd_set_xy+0x1c>)
 8001a06:	7010      	strb	r0, [r2, #0]
	pos_y = y;
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <lcd_set_xy+0x20>)
 8001a0a:	7011      	strb	r1, [r2, #0]
	if (y==0) {
 8001a0c:	b919      	cbnz	r1, 8001a16 <lcd_set_xy+0x12>
		lcd_send( ((1<<7) | (x)),COMMAND);
 8001a0e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
		lcd_send( ((3<<6) | (x)),COMMAND);
 8001a12:	f7ff bedb 	b.w	80017cc <lcd_send>
 8001a16:	2100      	movs	r1, #0
 8001a18:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8001a1c:	e7f9      	b.n	8001a12 <lcd_set_xy+0xe>
 8001a1e:	bf00      	nop
 8001a20:	20000774 	.word	0x20000774
 8001a24:	20000775 	.word	0x20000775

08001a28 <lcd_out>:
void lcd_out(char * txt,uint8_t TypeOfLCD) {
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	4606      	mov	r6, r0
 8001a2c:	460d      	mov	r5, r1
	while(*txt)
 8001a2e:	2400      	movs	r4, #0
 8001a30:	5d30      	ldrb	r0, [r6, r4]
 8001a32:	b900      	cbnz	r0, 8001a36 <lcd_out+0xe>
}
 8001a34:	bd70      	pop	{r4, r5, r6, pc}
		lcd_send(*txt,DATA);
 8001a36:	2101      	movs	r1, #1
 8001a38:	f7ff fec8 	bl	80017cc <lcd_send>
		if ((TypeOfLCD ==1)&&(i==7) )
 8001a3c:	2d01      	cmp	r5, #1
 8001a3e:	d106      	bne.n	8001a4e <lcd_out+0x26>
 8001a40:	b2e3      	uxtb	r3, r4
 8001a42:	2b07      	cmp	r3, #7
 8001a44:	d103      	bne.n	8001a4e <lcd_out+0x26>
			lcd_set_xy(0,1);
 8001a46:	4629      	mov	r1, r5
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff ffdb 	bl	8001a04 <lcd_set_xy>
		i++;
 8001a4e:	3401      	adds	r4, #1
 8001a50:	e7ee      	b.n	8001a30 <lcd_out+0x8>

08001a52 <LcdOutbyNumber>:
	lcd_send(num,DATA);
 8001a52:	2101      	movs	r1, #1
 8001a54:	b2c0      	uxtb	r0, r0
 8001a56:	f7ff beb9 	b.w	80017cc <lcd_send>
	...

08001a5c <LcdOut>:
{
 8001a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a60:	460d      	mov	r5, r1
			lcd_send(russ[*txt-192],DATA);
 8001a62:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001ad4 <LcdOut+0x78>
		pos_x++;
 8001a66:	4e1c      	ldr	r6, [pc, #112]	; (8001ad8 <LcdOut+0x7c>)
		if ((pos_y == 0 )&&(pos_x == 16) &&(Line ==2))
 8001a68:	4f1c      	ldr	r7, [pc, #112]	; (8001adc <LcdOut+0x80>)
 8001a6a:	1e44      	subs	r4, r0, #1
	while(*txt)
 8001a6c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001a70:	b908      	cbnz	r0, 8001a76 <LcdOut+0x1a>
}
 8001a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(*txt==178)//І
 8001a76:	28b2      	cmp	r0, #178	; 0xb2
 8001a78:	d119      	bne.n	8001aae <LcdOut+0x52>
			lcd_send(73,DATA);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	2049      	movs	r0, #73	; 0x49
			lcd_send(russ[*txt-192],DATA);
 8001a7e:	f7ff fea5 	bl	80017cc <lcd_send>
		pos_x++;
 8001a82:	7833      	ldrb	r3, [r6, #0]
		if ((pos_y == 0 )&&(pos_x == 16) &&(Line ==2))
 8001a84:	f897 9000 	ldrb.w	r9, [r7]
		pos_x++;
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	7033      	strb	r3, [r6, #0]
		if ((pos_y == 0 )&&(pos_x == 16) &&(Line ==2))
 8001a8e:	f1b9 0f00 	cmp.w	r9, #0
 8001a92:	d1eb      	bne.n	8001a6c <LcdOut+0x10>
 8001a94:	2b10      	cmp	r3, #16
 8001a96:	d1e9      	bne.n	8001a6c <LcdOut+0x10>
 8001a98:	2d02      	cmp	r5, #2
 8001a9a:	d1e7      	bne.n	8001a6c <LcdOut+0x10>
			lcd_set_xy(0,1);
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	f7ff ffb0 	bl	8001a04 <lcd_set_xy>
			pos_y = 1;
 8001aa4:	2301      	movs	r3, #1
			pos_x = 0;
 8001aa6:	f886 9000 	strb.w	r9, [r6]
			pos_y = 1;
 8001aaa:	703b      	strb	r3, [r7, #0]
 8001aac:	e7de      	b.n	8001a6c <LcdOut+0x10>
		}else if(*txt==175)//Ї
 8001aae:	28af      	cmp	r0, #175	; 0xaf
 8001ab0:	d102      	bne.n	8001ab8 <LcdOut+0x5c>
			lcd_send(3,DATA);
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	e7e2      	b.n	8001a7e <LcdOut+0x22>
		}else if(*txt==170)//Є
 8001ab8:	28aa      	cmp	r0, #170	; 0xaa
 8001aba:	d102      	bne.n	8001ac2 <LcdOut+0x66>
			lcd_send(2,DATA);
 8001abc:	2101      	movs	r1, #1
 8001abe:	2002      	movs	r0, #2
 8001ac0:	e7dd      	b.n	8001a7e <LcdOut+0x22>
		}else if(*txt<192)
 8001ac2:	28bf      	cmp	r0, #191	; 0xbf
			lcd_send(russ[*txt-192],DATA);
 8001ac4:	bf89      	itett	hi
 8001ac6:	4440      	addhi	r0, r8
			lcd_send(*txt,DATA);
 8001ac8:	2101      	movls	r1, #1
			lcd_send(russ[*txt-192],DATA);
 8001aca:	2101      	movhi	r1, #1
 8001acc:	f810 0cc0 	ldrbhi.w	r0, [r0, #-192]
 8001ad0:	e7d5      	b.n	8001a7e <LcdOut+0x22>
 8001ad2:	bf00      	nop
 8001ad4:	20000250 	.word	0x20000250
 8001ad8:	20000774 	.word	0x20000774
 8001adc:	20000775 	.word	0x20000775

08001ae0 <lcd_clear>:
	lcd_send(0x01,COMMAND);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7ff be72 	b.w	80017cc <lcd_send>

08001ae8 <lcd_init>:
void lcd_init() {
 8001ae8:	b508      	push	{r3, lr}
	delay_ms(100);
 8001aea:	2064      	movs	r0, #100	; 0x64
 8001aec:	f7ff fa6c 	bl	8000fc8 <delay_ms>
	lcd_set_4bit_mode();
 8001af0:	f7ff fe4a 	bl	8001788 <lcd_set_4bit_mode>
				lcd_send(0x0E,COMMAND);
 8001af4:	2100      	movs	r1, #0
 8001af6:	200e      	movs	r0, #14
 8001af8:	f7ff fe68 	bl	80017cc <lcd_send>
}
 8001afc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_clear();
 8001b00:	f7ff bfee 	b.w	8001ae0 <lcd_clear>

08001b04 <PrintToLCD>:


void PrintToLCD(char* str )
{
	LcdOut(str,2);
 8001b04:	2102      	movs	r1, #2
 8001b06:	f7ff bfa9 	b.w	8001a5c <LcdOut>

08001b0a <PrintToLCD_xy>:
	//Send_String_to_UART(str);
}

void PrintToLCD_xy(char* str ,uint8_t x, uint8_t y)
{
 8001b0a:	b510      	push	{r4, lr}
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	4608      	mov	r0, r1
	lcd_set_xy(x,y);
 8001b10:	4611      	mov	r1, r2
 8001b12:	f7ff ff77 	bl	8001a04 <lcd_set_xy>

	LcdOut(str,2);
 8001b16:	4620      	mov	r0, r4
	//Send_String_to_UART(str);
}
 8001b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LcdOut(str,2);
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	f7ff bf9d 	b.w	8001a5c <LcdOut>

08001b22 <InitLCD>:

{
	PrintToLCD(itoa_koma(x,k));
}
void InitLCD()
{
 8001b22:	b508      	push	{r3, lr}



	lcd_init();
 8001b24:	f7ff ffe0 	bl	8001ae8 <lcd_init>
	lcd_clear();
 8001b28:	f7ff ffda 	bl	8001ae0 <lcd_clear>
	lcd_set_state(LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
}
 8001b2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				lcd_send(0x0C,COMMAND);
 8001b30:	2100      	movs	r1, #0
 8001b32:	200c      	movs	r0, #12
 8001b34:	f7ff be4a 	b.w	80017cc <lcd_send>

08001b38 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <LL_APB2_GRP1_EnableClock+0x18>)
{
 8001b3a:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4018      	ands	r0, r3
 8001b46:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001b48:	9b01      	ldr	r3, [sp, #4]
}
 8001b4a:	b002      	add	sp, #8
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <MenuLog_Enter>:
			ClockOnLCD_noSec(DischargeTimeSec);
		}
}
void MenuLog_Enter()
{
	i_LogItems = 0;
 8001b54:	2200      	movs	r2, #0
 8001b56:	4b01      	ldr	r3, [pc, #4]	; (8001b5c <MenuLog_Enter+0x8>)
 8001b58:	801a      	strh	r2, [r3, #0]
}
 8001b5a:	4770      	bx	lr
 8001b5c:	200007de 	.word	0x200007de

08001b60 <MenuCalibrationWriteToFlash_Enter>:
			break;
	}
}

void MenuCalibrationWriteToFlash_Enter(Key_Pressed_t key)
{
 8001b60:	b508      	push	{r3, lr}
	CalibrationWriteToFlash_CRC();
 8001b62:	f7fe feff 	bl	8000964 <CalibrationWriteToFlash_CRC>
	WriteInLOG("Calibration");
}
 8001b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	WriteInLOG("Calibration");
 8001b6a:	4801      	ldr	r0, [pc, #4]	; (8001b70 <MenuCalibrationWriteToFlash_Enter+0x10>)
 8001b6c:	f7ff b89a 	b.w	8000ca4 <WriteInLOG>
 8001b70:	08005eb0 	.word	0x08005eb0

08001b74 <MenuSettingsBatteryType_Enter>:
{
 8001b74:	b510      	push	{r4, lr}
	if(CountShowBT == 0)
 8001b76:	4c3b      	ldr	r4, [pc, #236]	; (8001c64 <MenuSettingsBatteryType_Enter+0xf0>)
 8001b78:	f994 1000 	ldrsb.w	r1, [r4]
 8001b7c:	b961      	cbnz	r1, 8001b98 <MenuSettingsBatteryType_Enter+0x24>
		lcd_set_xy(0,0);
 8001b7e:	4608      	mov	r0, r1
 8001b80:	f7ff ff40 	bl	8001a04 <lcd_set_xy>
		PrintToLCD(" 10.8V  14.6V   ");
 8001b84:	4838      	ldr	r0, [pc, #224]	; (8001c68 <MenuSettingsBatteryType_Enter+0xf4>)
 8001b86:	f7ff ffbd 	bl	8001b04 <PrintToLCD>
		SettingsData.LowVoltage = 1080;
 8001b8a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <MenuSettingsBatteryType_Enter+0xf8>)
 8001b90:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1460;
 8001b92:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001b96:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 1)
 8001b98:	f994 3000 	ldrsb.w	r3, [r4]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d10d      	bne.n	8001bbc <MenuSettingsBatteryType_Enter+0x48>
		lcd_set_xy(0,0);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4608      	mov	r0, r1
 8001ba4:	f7ff ff2e 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("  3.0V   4.2V   ");
 8001ba8:	4831      	ldr	r0, [pc, #196]	; (8001c70 <MenuSettingsBatteryType_Enter+0xfc>)
 8001baa:	f7ff ffab 	bl	8001b04 <PrintToLCD>
		SettingsData.LowVoltage = 300;
 8001bae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <MenuSettingsBatteryType_Enter+0xf8>)
 8001bb4:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 420;
 8001bb6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001bba:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 2)
 8001bbc:	f994 3000 	ldrsb.w	r3, [r4]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d10d      	bne.n	8001be0 <MenuSettingsBatteryType_Enter+0x6c>
		lcd_set_xy(0,0);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4608      	mov	r0, r1
 8001bc8:	f7ff ff1c 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("  2.8V   3.7V   ");
 8001bcc:	4829      	ldr	r0, [pc, #164]	; (8001c74 <MenuSettingsBatteryType_Enter+0x100>)
 8001bce:	f7ff ff99 	bl	8001b04 <PrintToLCD>
		SettingsData.LowVoltage = 280;
 8001bd2:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <MenuSettingsBatteryType_Enter+0xf8>)
 8001bd8:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 370;
 8001bda:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001bde:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 3)
 8001be0:	f994 3000 	ldrsb.w	r3, [r4]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d10c      	bne.n	8001c02 <MenuSettingsBatteryType_Enter+0x8e>
		lcd_set_xy(0,0);
 8001be8:	2100      	movs	r1, #0
 8001bea:	4608      	mov	r0, r1
 8001bec:	f7ff ff0a 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("  1.6V   2.8V   ");
 8001bf0:	4821      	ldr	r0, [pc, #132]	; (8001c78 <MenuSettingsBatteryType_Enter+0x104>)
 8001bf2:	f7ff ff87 	bl	8001b04 <PrintToLCD>
		SettingsData.LowVoltage = 160;
 8001bf6:	22a0      	movs	r2, #160	; 0xa0
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <MenuSettingsBatteryType_Enter+0xf8>)
 8001bfa:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 280;
 8001bfc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001c00:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 4)
 8001c02:	f994 3000 	ldrsb.w	r3, [r4]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d10d      	bne.n	8001c26 <MenuSettingsBatteryType_Enter+0xb2>
		lcd_set_xy(0,0);
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	f7ff fef9 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("   8V  13.6V    ");
 8001c12:	481a      	ldr	r0, [pc, #104]	; (8001c7c <MenuSettingsBatteryType_Enter+0x108>)
 8001c14:	f7ff ff76 	bl	8001b04 <PrintToLCD>
		SettingsData.LowVoltage = 800;
 8001c18:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MenuSettingsBatteryType_Enter+0xf8>)
 8001c1e:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1360;
 8001c20:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8001c24:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 5)
 8001c26:	f994 3000 	ldrsb.w	r3, [r4]
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d10c      	bne.n	8001c48 <MenuSettingsBatteryType_Enter+0xd4>
		lcd_set_xy(0,0);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4608      	mov	r0, r1
 8001c32:	f7ff fee7 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("  1V    20V     ");
 8001c36:	4812      	ldr	r0, [pc, #72]	; (8001c80 <MenuSettingsBatteryType_Enter+0x10c>)
 8001c38:	f7ff ff64 	bl	8001b04 <PrintToLCD>
		SettingsData.LowVoltage = 100;
 8001c3c:	2264      	movs	r2, #100	; 0x64
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MenuSettingsBatteryType_Enter+0xf8>)
 8001c40:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 2000;
 8001c42:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c46:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 6)
 8001c48:	f994 3000 	ldrsb.w	r3, [r4]
 8001c4c:	2b06      	cmp	r3, #6
		CountShowBT = 0;
 8001c4e:	bf04      	itt	eq
 8001c50:	2300      	moveq	r3, #0
 8001c52:	7023      	strbeq	r3, [r4, #0]
	SettingsWriteToFlash_CRC();
 8001c54:	f7fe febc 	bl	80009d0 <SettingsWriteToFlash_CRC>
}
 8001c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay_ms(600);
 8001c5c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001c60:	f7ff b9b2 	b.w	8000fc8 <delay_ms>
 8001c64:	2000078f 	.word	0x2000078f
 8001c68:	08005ebc 	.word	0x08005ebc
 8001c6c:	20000154 	.word	0x20000154
 8001c70:	08005ecd 	.word	0x08005ecd
 8001c74:	08005ede 	.word	0x08005ede
 8001c78:	08005eef 	.word	0x08005eef
 8001c7c:	08005f00 	.word	0x08005f00
 8001c80:	08005f11 	.word	0x08005f11

08001c84 <MenuSettingsWriteToFlash_Enter>:

void MenuSettingsWriteToFlash_Enter(Key_Pressed_t key)
{
	SettingsWriteToFlash_CRC();
 8001c84:	f7fe bea4 	b.w	80009d0 <SettingsWriteToFlash_CRC>

08001c88 <MenuOption_Enter>:
	}

}

void MenuOption_Enter(Key_Pressed_t key)
{
 8001c88:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2007      	movs	r0, #7
 8001c8e:	f7ff feb9 	bl	8001a04 <lcd_set_xy>
	lcd_send(255,DATA);
 8001c92:	2101      	movs	r1, #1
 8001c94:	20ff      	movs	r0, #255	; 0xff
 8001c96:	f7ff fd99 	bl	80017cc <lcd_send>
	SettingsWriteToFlash_CRC();
 8001c9a:	f7fe fe99 	bl	80009d0 <SettingsWriteToFlash_CRC>
	SelectedOptionValue = SettingsData.Option1;
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <MenuOption_Enter+0x28>)
	delay_ms(200);
 8001ca0:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue = SettingsData.Option1;
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <MenuOption_Enter+0x2c>)
 8001ca6:	601a      	str	r2, [r3, #0]
}
 8001ca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001cac:	f7ff b98c 	b.w	8000fc8 <delay_ms>
 8001cb0:	20000154 	.word	0x20000154
 8001cb4:	20000a1c 	.word	0x20000a1c

08001cb8 <MenuOption_Enter1>:

void MenuOption_Enter1(Key_Pressed_t key)
{
 8001cb8:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001cba:	2101      	movs	r1, #1
 8001cbc:	2007      	movs	r0, #7
 8001cbe:	f7ff fea1 	bl	8001a04 <lcd_set_xy>
	lcd_send(255,DATA);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	20ff      	movs	r0, #255	; 0xff
 8001cc6:	f7ff fd81 	bl	80017cc <lcd_send>
	SettingsWriteToFlash_CRC();
 8001cca:	f7fe fe81 	bl	80009d0 <SettingsWriteToFlash_CRC>
	SelectedOptionValue1 = SettingsData.Option2;
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <MenuOption_Enter1+0x28>)
	delay_ms(200);
 8001cd0:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue1 = SettingsData.Option2;
 8001cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <MenuOption_Enter1+0x2c>)
 8001cd6:	601a      	str	r2, [r3, #0]
}
 8001cd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001cdc:	f7ff b974 	b.w	8000fc8 <delay_ms>
 8001ce0:	20000154 	.word	0x20000154
 8001ce4:	20000a14 	.word	0x20000a14

08001ce8 <Generic_Write>:
	if (Text) PrintToLCD_xy(Text,0,0);
 8001ce8:	b118      	cbz	r0, 8001cf2 <Generic_Write+0xa>
 8001cea:	2200      	movs	r2, #0
 8001cec:	4611      	mov	r1, r2
 8001cee:	f7ff bf0c 	b.w	8001b0a <PrintToLCD_xy>
}
 8001cf2:	4770      	bx	lr

08001cf4 <MenuDischarge_Enter>:
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001cf4:	f649 23af 	movw	r3, #39599	; 0x9aaf
{
 8001cf8:	b510      	push	{r4, lr}
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001cfa:	4c0e      	ldr	r4, [pc, #56]	; (8001d34 <MenuDischarge_Enter+0x40>)
{
 8001cfc:	b090      	sub	sp, #64	; 0x40
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d915      	bls.n	8001d30 <MenuDischarge_Enter+0x3c>
		ClockStringNoSec(DischargeTimeSec,s_clock);
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MenuDischarge_Enter+0x44>)
 8001d06:	a90b      	add	r1, sp, #44	; 0x2c
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	f7ff fc17 	bl	800153c <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 8001d0e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d12:	6820      	ldr	r0, [r4, #0]
 8001d14:	a901      	add	r1, sp, #4
 8001d16:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d1a:	f7ff faad 	bl	8001278 <itoaP>
 8001d1e:	4907      	ldr	r1, [pc, #28]	; (8001d3c <MenuDischarge_Enter+0x48>)
 8001d20:	ab06      	add	r3, sp, #24
 8001d22:	aa0b      	add	r2, sp, #44	; 0x2c
 8001d24:	f7ff fb74 	bl	8001410 <Merge3Strings>
		WriteInLOGc(strout,DISCHARGE_l);
 8001d28:	2102      	movs	r1, #2
 8001d2a:	a806      	add	r0, sp, #24
 8001d2c:	f7ff f868 	bl	8000e00 <WriteInLOGc>
}
 8001d30:	b010      	add	sp, #64	; 0x40
 8001d32:	bd10      	pop	{r4, pc}
 8001d34:	2000077c 	.word	0x2000077c
 8001d38:	20000794 	.word	0x20000794
 8001d3c:	08005f22 	.word	0x08005f22

08001d40 <MenuCharge_Enter>:
{
 8001d40:	b510      	push	{r4, lr}
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001d42:	4c16      	ldr	r4, [pc, #88]	; (8001d9c <MenuCharge_Enter+0x5c>)
 8001d44:	4816      	ldr	r0, [pc, #88]	; (8001da0 <MenuCharge_Enter+0x60>)
{
 8001d46:	b090      	sub	sp, #64	; 0x40
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001d48:	f003 fa98 	bl	800527c <printToBufferWithoutEndUART1>
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6821      	ldr	r1, [r4, #0]
 8001d50:	4814      	ldr	r0, [pc, #80]	; (8001da4 <MenuCharge_Enter+0x64>)
 8001d52:	f003 fad1 	bl	80052f8 <printToBufferUART1D>
	if (BatteryCapacityCharge/3600>10)
 8001d56:	f649 23af 	movw	r3, #39599	; 0x9aaf
 8001d5a:	6822      	ldr	r2, [r4, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d91b      	bls.n	8001d98 <MenuCharge_Enter+0x58>
		ClockStringNoSec(ChargeTimeSec,s_clock);
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MenuCharge_Enter+0x68>)
 8001d62:	a90b      	add	r1, sp, #44	; 0x2c
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	f7ff fbe9 	bl	800153c <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityCharge/3600,str),"mAh",s_clock,strout);
 8001d6a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d6e:	6820      	ldr	r0, [r4, #0]
 8001d70:	a901      	add	r1, sp, #4
 8001d72:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d76:	f7ff fa7f 	bl	8001278 <itoaP>
 8001d7a:	ab06      	add	r3, sp, #24
 8001d7c:	aa0b      	add	r2, sp, #44	; 0x2c
 8001d7e:	490b      	ldr	r1, [pc, #44]	; (8001dac <MenuCharge_Enter+0x6c>)
 8001d80:	f7ff fb46 	bl	8001410 <Merge3Strings>
		WriteInLOGc(strout,CHARGE_H);
 8001d84:	2101      	movs	r1, #1
 8001d86:	a806      	add	r0, sp, #24
 8001d88:	f7ff f83a 	bl	8000e00 <WriteInLOGc>
		logDebug(strout);
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <MenuCharge_Enter+0x60>)
 8001d8e:	f003 fa75 	bl	800527c <printToBufferWithoutEndUART1>
 8001d92:	a806      	add	r0, sp, #24
 8001d94:	f003 fa0c 	bl	80051b0 <printToBufferUART1>
}
 8001d98:	b010      	add	sp, #64	; 0x40
 8001d9a:	bd10      	pop	{r4, pc}
 8001d9c:	20000778 	.word	0x20000778
 8001da0:	0800593c 	.word	0x0800593c
 8001da4:	08005f26 	.word	0x08005f26
 8001da8:	20000788 	.word	0x20000788
 8001dac:	08005f22 	.word	0x08005f22

08001db0 <SelectedOption.part.0>:
void SelectedOption(void)
 8001db0:	b508      	push	{r3, lr}
		lcd_set_xy(7,1);
 8001db2:	2101      	movs	r1, #1
 8001db4:	2007      	movs	r0, #7
 8001db6:	f7ff fe25 	bl	8001a04 <lcd_set_xy>
}
 8001dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcd_send(255,DATA);
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	20ff      	movs	r0, #255	; 0xff
 8001dc2:	f7ff bd03 	b.w	80017cc <lcd_send>
	...

08001dc8 <LL_ADC_SetChannelSamplingTime.constprop.0>:
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8001dcc:	b570      	push	{r4, r5, r6, lr}
 8001dce:	fa91 f1a1 	rbit	r1, r1
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001dd2:	fab1 f381 	clz	r3, r1
 8001dd6:	4c10      	ldr	r4, [pc, #64]	; (8001e18 <LL_ADC_SetChannelSamplingTime.constprop.0+0x50>)
 8001dd8:	f000 7100 	and.w	r1, r0, #33554432	; 0x2000000
 8001ddc:	40d9      	lsrs	r1, r3
 8001dde:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
  
  MODIFY_REG(*preg,
 8001de2:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8001de6:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 8001dea:	fa92 f3a2 	rbit	r3, r2
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	fa92 f2a2 	rbit	r2, r2
 8001df6:	2607      	movs	r6, #7
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	fa20 f303 	lsr.w	r3, r0, r3
 8001e00:	fa06 f303 	lsl.w	r3, r6, r3
 8001e04:	40d0      	lsrs	r0, r2
 8001e06:	ea25 0303 	bic.w	r3, r5, r3
 8001e0a:	fa06 f000 	lsl.w	r0, r6, r0
 8001e0e:	4318      	orrs	r0, r3
 8001e10:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001e14:	bd70      	pop	{r4, r5, r6, pc}
 8001e16:	bf00      	nop
 8001e18:	4001240c 	.word	0x4001240c

08001e1c <LL_ADC_REG_SetSequencerRanks.constprop.0>:
 8001e1c:	f44f 7340 	mov.w	r3, #768	; 0x300
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
 8001e20:	b530      	push	{r4, r5, lr}
 8001e22:	fa93 f3a3 	rbit	r3, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001e26:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 8001e2a:	241f      	movs	r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001e2c:	4d08      	ldr	r5, [pc, #32]	; (8001e50 <LL_ADC_REG_SetSequencerRanks.constprop.0+0x34>)
 8001e2e:	f400 7240 	and.w	r2, r0, #768	; 0x300
 8001e32:	40da      	lsrs	r2, r3
  MODIFY_REG(*preg,
 8001e34:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8001e38:	f000 001f 	and.w	r0, r0, #31
 8001e3c:	4084      	lsls	r4, r0
 8001e3e:	f001 011f 	and.w	r1, r1, #31
 8001e42:	ea23 0304 	bic.w	r3, r3, r4
 8001e46:	4081      	lsls	r1, r0
 8001e48:	4319      	orrs	r1, r3
 8001e4a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}
 8001e4e:	bd30      	pop	{r4, r5, pc}
 8001e50:	4001242c 	.word	0x4001242c

08001e54 <NVIC_EncodePriority.constprop.0>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001e54:	2000      	movs	r0, #0
 8001e56:	4770      	bx	lr

08001e58 <MenuLoad>:
	EnterInMenu_Status = 1;
 8001e58:	2201      	movs	r2, #1
	lcd_set_xy(0,0);
 8001e5a:	2100      	movs	r1, #0
{
 8001e5c:	b510      	push	{r4, lr}
	EnterInMenu_Status = 1;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <MenuLoad+0x84>)
 8001e60:	4c1f      	ldr	r4, [pc, #124]	; (8001ee0 <MenuLoad+0x88>)
 8001e62:	701a      	strb	r2, [r3, #0]
	if (key == KEY_NEXT)
 8001e64:	2802      	cmp	r0, #2
	lcd_set_xy(0,0);
 8001e66:	4608      	mov	r0, r1
		if (On_off == 0)
 8001e68:	bf08      	it	eq
 8001e6a:	7823      	ldrbeq	r3, [r4, #0]
	lcd_set_xy(0,0);
 8001e6c:	f7ff fdca 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MenuLoad+0x8c>)
 8001e72:	2102      	movs	r1, #2
 8001e74:	8818      	ldrh	r0, [r3, #0]
 8001e76:	b280      	uxth	r0, r0
 8001e78:	f7ff fa3a 	bl	80012f0 <itoa_koma>
 8001e7c:	f7ff fe42 	bl	8001b04 <PrintToLCD>
	PrintToLCD("V ");
 8001e80:	4819      	ldr	r0, [pc, #100]	; (8001ee8 <MenuLoad+0x90>)
 8001e82:	f7ff fe3f 	bl	8001b04 <PrintToLCD>
	PrintToLCD(itoa(Current));
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <MenuLoad+0x94>)
 8001e88:	8818      	ldrh	r0, [r3, #0]
 8001e8a:	b200      	sxth	r0, r0
 8001e8c:	f7ff f9b8 	bl	8001200 <itoa>
 8001e90:	f7ff fe38 	bl	8001b04 <PrintToLCD>
	PrintToLCD("mA    ");
 8001e94:	4816      	ldr	r0, [pc, #88]	; (8001ef0 <MenuLoad+0x98>)
 8001e96:	f7ff fe35 	bl	8001b04 <PrintToLCD>
	if (On_off ==0)
 8001e9a:	7823      	ldrb	r3, [r4, #0]
			lcd_set_xy(6,1);
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2006      	movs	r0, #6
 8001ea0:	4c14      	ldr	r4, [pc, #80]	; (8001ef4 <MenuLoad+0x9c>)
	if (On_off ==0)
 8001ea2:	b97b      	cbnz	r3, 8001ec4 <MenuLoad+0x6c>
			lcd_set_xy(6,1);
 8001ea4:	f7ff fdae 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(2,1);
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f7ff fdd1 	bl	8001a52 <LcdOutbyNumber>
			LcdOutbyNumber(2,1);
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2002      	movs	r0, #2
					LcdOutbyNumber(3,1);
 8001eb4:	f7ff fdcd 	bl	8001a52 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8001eb8:	7823      	ldrb	r3, [r4, #0]
 8001eba:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8001ebc:	bf84      	itt	hi
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	7023      	strbhi	r3, [r4, #0]
}
 8001ec2:	bd10      	pop	{r4, pc}
			if (Blink_message_counter<=5)
 8001ec4:	7823      	ldrb	r3, [r4, #0]
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d9ec      	bls.n	8001ea4 <MenuLoad+0x4c>
					lcd_set_xy(6,1);
 8001eca:	f7ff fd9b 	bl	8001a04 <lcd_set_xy>
					LcdOutbyNumber(3,1);
 8001ece:	2101      	movs	r1, #1
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f7ff fdbe 	bl	8001a52 <LcdOutbyNumber>
					LcdOutbyNumber(3,1);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2003      	movs	r0, #3
 8001eda:	e7eb      	b.n	8001eb4 <MenuLoad+0x5c>
 8001edc:	2000079c 	.word	0x2000079c
 8001ee0:	2000079e 	.word	0x2000079e
 8001ee4:	2000086c 	.word	0x2000086c
 8001ee8:	08005f2e 	.word	0x08005f2e
 8001eec:	20000856 	.word	0x20000856
 8001ef0:	08005f31 	.word	0x08005f31
 8001ef4:	20000785 	.word	0x20000785

08001ef8 <MenuTraining_WriteInLOG>:
	s[1] = '\0';
 8001ef8:	2300      	movs	r3, #0
{
 8001efa:	b510      	push	{r4, lr}
 8001efc:	b096      	sub	sp, #88	; 0x58
 8001efe:	4604      	mov	r4, r0
 8001f00:	4608      	mov	r0, r1
	ClockStringNoSec(Time,s_clock);
 8001f02:	a911      	add	r1, sp, #68	; 0x44
	s[0] = c;
 8001f04:	f88d 2004 	strb.w	r2, [sp, #4]
	s[1] = '\0';
 8001f08:	f88d 3005 	strb.w	r3, [sp, #5]
	ClockStringNoSec(Time,s_clock);
 8001f0c:	f7ff fb16 	bl	800153c <ClockStringNoSec>
	Merge3Strings(itoaP(Capacity/3600,str),"mAh",s_clock,strout);
 8001f10:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001f14:	a902      	add	r1, sp, #8
 8001f16:	fbb4 f0f0 	udiv	r0, r4, r0
 8001f1a:	f7ff f9ad 	bl	8001278 <itoaP>
 8001f1e:	ab07      	add	r3, sp, #28
 8001f20:	aa11      	add	r2, sp, #68	; 0x44
 8001f22:	4907      	ldr	r1, [pc, #28]	; (8001f40 <MenuTraining_WriteInLOG+0x48>)
 8001f24:	f7ff fa74 	bl	8001410 <Merge3Strings>
	Merge2Strings(s,strout,strout1);
 8001f28:	aa0c      	add	r2, sp, #48	; 0x30
 8001f2a:	a907      	add	r1, sp, #28
 8001f2c:	a801      	add	r0, sp, #4
 8001f2e:	f7ff fa59 	bl	80013e4 <Merge2Strings>
	WriteInLOGc(strout1,TRAINING_);
 8001f32:	2104      	movs	r1, #4
 8001f34:	a80c      	add	r0, sp, #48	; 0x30
 8001f36:	f7fe ff63 	bl	8000e00 <WriteInLOGc>
}
 8001f3a:	b016      	add	sp, #88	; 0x58
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	bf00      	nop
 8001f40:	08005f22 	.word	0x08005f22

08001f44 <MenuLog>:
	if (key == KEY_NEXT)
 8001f44:	2802      	cmp	r0, #2
{
 8001f46:	b538      	push	{r3, r4, r5, lr}
 8001f48:	4c1e      	ldr	r4, [pc, #120]	; (8001fc4 <MenuLog+0x80>)
 8001f4a:	4d1f      	ldr	r5, [pc, #124]	; (8001fc8 <MenuLog+0x84>)
	if (key == KEY_NEXT)
 8001f4c:	d12a      	bne.n	8001fa4 <MenuLog+0x60>
		i_LogItems++;
 8001f4e:	8823      	ldrh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001f50:	682a      	ldr	r2, [r5, #0]
		i_LogItems++;
 8001f52:	3301      	adds	r3, #1
 8001f54:	b21b      	sxth	r3, r3
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001f56:	4293      	cmp	r3, r2
		i_LogItems++;
 8001f58:	8023      	strh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001f5a:	d301      	bcc.n	8001f60 <MenuLog+0x1c>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	8023      	strh	r3, [r4, #0]
	lcd_set_xy(0,0);
 8001f60:	2100      	movs	r1, #0
 8001f62:	4608      	mov	r0, r1
 8001f64:	f7ff fd4e 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(LoggingData.Records[LoggingData.RecordsQuantity - i_LogItems-1]);
 8001f68:	6828      	ldr	r0, [r5, #0]
 8001f6a:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001f6e:	3801      	subs	r0, #1
 8001f70:	1ac0      	subs	r0, r0, r3
 8001f72:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8001f76:	3004      	adds	r0, #4
 8001f78:	4428      	add	r0, r5
 8001f7a:	f7ff fdc3 	bl	8001b04 <PrintToLCD>
	logDebugD("i_LogItems: ",i_LogItems,0);
 8001f7e:	4813      	ldr	r0, [pc, #76]	; (8001fcc <MenuLog+0x88>)
 8001f80:	f003 f97c 	bl	800527c <printToBufferWithoutEndUART1>
 8001f84:	f9b4 1000 	ldrsh.w	r1, [r4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4811      	ldr	r0, [pc, #68]	; (8001fd0 <MenuLog+0x8c>)
 8001f8c:	f003 f9b4 	bl	80052f8 <printToBufferUART1D>
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8001f90:	480e      	ldr	r0, [pc, #56]	; (8001fcc <MenuLog+0x88>)
 8001f92:	f003 f973 	bl	800527c <printToBufferWithoutEndUART1>
 8001f96:	6829      	ldr	r1, [r5, #0]
 8001f98:	2200      	movs	r2, #0
}
 8001f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8001f9e:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <MenuLog+0x90>)
 8001fa0:	f003 b9aa 	b.w	80052f8 <printToBufferUART1D>
	if (key == KEY_BACK)
 8001fa4:	2801      	cmp	r0, #1
 8001fa6:	d1db      	bne.n	8001f60 <MenuLog+0x1c>
		i_LogItems--;
 8001fa8:	8823      	ldrh	r3, [r4, #0]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8001fae:	2b00      	cmp	r3, #0
		i_LogItems--;
 8001fb0:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8001fb2:	dad5      	bge.n	8001f60 <MenuLog+0x1c>
 8001fb4:	682b      	ldr	r3, [r5, #0]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=0;
 8001fba:	2b00      	cmp	r3, #0
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8001fbc:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=0;
 8001fbe:	dbcd      	blt.n	8001f5c <MenuLog+0x18>
 8001fc0:	e7ce      	b.n	8001f60 <MenuLog+0x1c>
 8001fc2:	bf00      	nop
 8001fc4:	200007de 	.word	0x200007de
 8001fc8:	20000878 	.word	0x20000878
 8001fcc:	0800593c 	.word	0x0800593c
 8001fd0:	08005f38 	.word	0x08005f38
 8001fd4:	08005f45 	.word	0x08005f45

08001fd8 <MenuCalibration_CURRENT_Out_to_0>:
	lcd_set_xy(0,0);
 8001fd8:	2100      	movs	r1, #0
{
 8001fda:	b510      	push	{r4, lr}
 8001fdc:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8001fde:	4608      	mov	r0, r1
 8001fe0:	f7ff fd10 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <MenuCalibration_CURRENT_Out_to_0+0x38>)
 8001fe6:	8818      	ldrh	r0, [r3, #0]
 8001fe8:	b200      	sxth	r0, r0
 8001fea:	f7ff f909 	bl	8001200 <itoa>
 8001fee:	f7ff fd89 	bl	8001b04 <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 8001ff2:	4808      	ldr	r0, [pc, #32]	; (8002014 <MenuCalibration_CURRENT_Out_to_0+0x3c>)
 8001ff4:	f7ff fd86 	bl	8001b04 <PrintToLCD>
	if (key == KEY_NEXT)
 8001ff8:	2c02      	cmp	r4, #2
 8001ffa:	d108      	bne.n	800200e <MenuCalibration_CURRENT_Out_to_0+0x36>
}
 8001ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent = Current_x50;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <MenuCalibration_CURRENT_Out_to_0+0x40>)
 8002002:	4a06      	ldr	r2, [pc, #24]	; (800201c <MenuCalibration_CURRENT_Out_to_0+0x44>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b21b      	sxth	r3, r3
 8002008:	6093      	str	r3, [r2, #8]
		CalibrationWriteToFlash_CRC();
 800200a:	f7fe bcab 	b.w	8000964 <CalibrationWriteToFlash_CRC>
}
 800200e:	bd10      	pop	{r4, pc}
 8002010:	20000856 	.word	0x20000856
 8002014:	08005f58 	.word	0x08005f58
 8002018:	200007e8 	.word	0x200007e8
 800201c:	20000004 	.word	0x20000004

08002020 <MenuCalibration_CURRENT_Load_to_0>:
	lcd_set_xy(0,0);
 8002020:	2100      	movs	r1, #0
{
 8002022:	b510      	push	{r4, lr}
 8002024:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002026:	4608      	mov	r0, r1
 8002028:	f7ff fcec 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(	itoa(Current));
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <MenuCalibration_CURRENT_Load_to_0+0x38>)
 800202e:	8818      	ldrh	r0, [r3, #0]
 8002030:	b200      	sxth	r0, r0
 8002032:	f7ff f8e5 	bl	8001200 <itoa>
 8002036:	f7ff fd65 	bl	8001b04 <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 800203a:	4808      	ldr	r0, [pc, #32]	; (800205c <MenuCalibration_CURRENT_Load_to_0+0x3c>)
 800203c:	f7ff fd62 	bl	8001b04 <PrintToLCD>
	if (key == KEY_NEXT)
 8002040:	2c02      	cmp	r4, #2
 8002042:	d108      	bne.n	8002056 <MenuCalibration_CURRENT_Load_to_0+0x36>
}
 8002044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent1 = Current_x1;
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <MenuCalibration_CURRENT_Load_to_0+0x40>)
 800204a:	4a06      	ldr	r2, [pc, #24]	; (8002064 <MenuCalibration_CURRENT_Load_to_0+0x44>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b21b      	sxth	r3, r3
 8002050:	6113      	str	r3, [r2, #16]
		CalibrationWriteToFlash_CRC();
 8002052:	f7fe bc87 	b.w	8000964 <CalibrationWriteToFlash_CRC>
}
 8002056:	bd10      	pop	{r4, pc}
 8002058:	20000856 	.word	0x20000856
 800205c:	08005f58 	.word	0x08005f58
 8002060:	20000858 	.word	0x20000858
 8002064:	20000004 	.word	0x20000004

08002068 <MenuCalibration_BackToFactory>:
	lcd_set_xy(0,0);
 8002068:	2100      	movs	r1, #0
{
 800206a:	b510      	push	{r4, lr}
 800206c:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 800206e:	4608      	mov	r0, r1
 8002070:	f7ff fcc8 	bl	8001a04 <lcd_set_xy>
	PrintToLCD("Factory-press >>");
 8002074:	481f      	ldr	r0, [pc, #124]	; (80020f4 <MenuCalibration_BackToFactory+0x8c>)
 8002076:	f7ff fd45 	bl	8001b04 <PrintToLCD>
	if (key == KEY_NEXT)
 800207a:	2c02      	cmp	r4, #2
 800207c:	d130      	bne.n	80020e0 <MenuCalibration_BackToFactory+0x78>
		FactoryWriteToFlash_CRC();
 800207e:	f7fe fd01 	bl	8000a84 <FactoryWriteToFlash_CRC>
		EEpromReadStatus = ReadFromFlash();
 8002082:	f7fe fc2d 	bl	80008e0 <ReadFromFlash>
		lcd_set_xy(0,0);
 8002086:	2100      	movs	r1, #0
		EEpromReadStatus = ReadFromFlash();
 8002088:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 800208a:	4608      	mov	r0, r1
 800208c:	f7ff fcba 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("In Proccess ....");
 8002090:	4819      	ldr	r0, [pc, #100]	; (80020f8 <MenuCalibration_BackToFactory+0x90>)
 8002092:	f7ff fd37 	bl	8001b04 <PrintToLCD>
		delay_ms(2000);
 8002096:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800209a:	f7fe ff95 	bl	8000fc8 <delay_ms>
		lcd_set_xy(0,0);
 800209e:	2100      	movs	r1, #0
 80020a0:	4608      	mov	r0, r1
 80020a2:	f7ff fcaf 	bl	8001a04 <lcd_set_xy>
		if (EEpromReadStatus == 1)
 80020a6:	2c01      	cmp	r4, #1
 80020a8:	d11b      	bne.n	80020e2 <MenuCalibration_BackToFactory+0x7a>
			PrintToLCD("Factory are OK  ");
 80020aa:	4814      	ldr	r0, [pc, #80]	; (80020fc <MenuCalibration_BackToFactory+0x94>)
 80020ac:	f7ff fd2a 	bl	8001b04 <PrintToLCD>
			WriteInLOG("Factory are OK");
 80020b0:	4813      	ldr	r0, [pc, #76]	; (8002100 <MenuCalibration_BackToFactory+0x98>)
 80020b2:	f7fe fdf7 	bl	8000ca4 <WriteInLOG>
			delay_ms(2000);
 80020b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020ba:	f7fe ff85 	bl	8000fc8 <delay_ms>
		    ChargeDurationSec = SettingsData.ChargeTime*3600;
 80020be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
		    BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <MenuCalibration_BackToFactory+0x9c>)
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <MenuCalibration_BackToFactory+0xa0>)
 80020c8:	601a      	str	r2, [r3, #0]
		    ChargeDurationSec = SettingsData.ChargeTime*3600;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <MenuCalibration_BackToFactory+0xa4>)
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	434a      	muls	r2, r1
 80020d0:	490f      	ldr	r1, [pc, #60]	; (8002110 <MenuCalibration_BackToFactory+0xa8>)
 80020d2:	600a      	str	r2, [r1, #0]
		    SelectedOptionValue = SettingsData.Option1;
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <MenuCalibration_BackToFactory+0xac>)
 80020d8:	6011      	str	r1, [r2, #0]
		    SelectedOptionValue1 = SettingsData.Option2;
 80020da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <MenuCalibration_BackToFactory+0xb0>)
 80020de:	601a      	str	r2, [r3, #0]
}
 80020e0:	bd10      	pop	{r4, pc}
			PrintToLCD("EEprom read FAIL");
 80020e2:	480e      	ldr	r0, [pc, #56]	; (800211c <MenuCalibration_BackToFactory+0xb4>)
 80020e4:	f7ff fd0e 	bl	8001b04 <PrintToLCD>
}
 80020e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			delay_ms(4000);
 80020ec:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80020f0:	f7fe bf6a 	b.w	8000fc8 <delay_ms>
 80020f4:	08005f67 	.word	0x08005f67
 80020f8:	08005f78 	.word	0x08005f78
 80020fc:	08005f89 	.word	0x08005f89
 8002100:	08005f9a 	.word	0x08005f9a
 8002104:	200000f4 	.word	0x200000f4
 8002108:	20000780 	.word	0x20000780
 800210c:	20000154 	.word	0x20000154
 8002110:	20000a18 	.word	0x20000a18
 8002114:	20000a1c 	.word	0x20000a1c
 8002118:	20000a14 	.word	0x20000a14
 800211c:	08005fa9 	.word	0x08005fa9

08002120 <MenuSettingsChargeTime>:
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 8002120:	2802      	cmp	r0, #2
{
 8002122:	b510      	push	{r4, lr}
 8002124:	4c0e      	ldr	r4, [pc, #56]	; (8002160 <MenuSettingsChargeTime+0x40>)
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 8002126:	d115      	bne.n	8002154 <MenuSettingsChargeTime+0x34>
 8002128:	6923      	ldr	r3, [r4, #16]
 800212a:	3301      	adds	r3, #1
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 800212c:	6123      	str	r3, [r4, #16]
	lcd_set_xy(0,0);
 800212e:	2100      	movs	r1, #0
 8002130:	4608      	mov	r0, r1
 8002132:	f7ff fc67 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeTime));
 8002136:	6920      	ldr	r0, [r4, #16]
 8002138:	f7ff f862 	bl	8001200 <itoa>
 800213c:	f7ff fce2 	bl	8001b04 <PrintToLCD>
	PrintToLCD("h   ");
 8002140:	4808      	ldr	r0, [pc, #32]	; (8002164 <MenuSettingsChargeTime+0x44>)
 8002142:	f7ff fcdf 	bl	8001b04 <PrintToLCD>
    ChargeDurationSec = SettingsData.ChargeTime*3600;
 8002146:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800214a:	6923      	ldr	r3, [r4, #16]
 800214c:	4353      	muls	r3, r2
 800214e:	4a06      	ldr	r2, [pc, #24]	; (8002168 <MenuSettingsChargeTime+0x48>)
 8002150:	6013      	str	r3, [r2, #0]
}
 8002152:	bd10      	pop	{r4, pc}
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 8002154:	2801      	cmp	r0, #1
 8002156:	d1ea      	bne.n	800212e <MenuSettingsChargeTime+0xe>
 8002158:	6923      	ldr	r3, [r4, #16]
 800215a:	3b01      	subs	r3, #1
 800215c:	e7e6      	b.n	800212c <MenuSettingsChargeTime+0xc>
 800215e:	bf00      	nop
 8002160:	20000154 	.word	0x20000154
 8002164:	08005fba 	.word	0x08005fba
 8002168:	20000a18 	.word	0x20000a18

0800216c <MenuSettingsBatteryType>:
{
 800216c:	b510      	push	{r4, lr}
		CountShowBT++;
 800216e:	4c33      	ldr	r4, [pc, #204]	; (800223c <MenuSettingsBatteryType+0xd0>)
	if (key == KEY_NEXT)
 8002170:	2802      	cmp	r0, #2
		CountShowBT++;
 8002172:	f994 3000 	ldrsb.w	r3, [r4]
	if (key == KEY_NEXT)
 8002176:	d10d      	bne.n	8002194 <MenuSettingsBatteryType+0x28>
		CountShowBT++;
 8002178:	3301      	adds	r3, #1
 800217a:	b25b      	sxtb	r3, r3
		if (CountShowBT==MAXITEM_BT) CountShowBT=0;
 800217c:	2b07      	cmp	r3, #7
 800217e:	d10f      	bne.n	80021a0 <MenuSettingsBatteryType+0x34>
 8002180:	2300      	movs	r3, #0
 8002182:	7023      	strb	r3, [r4, #0]
		lcd_set_xy(0,0);
 8002184:	2100      	movs	r1, #0
 8002186:	4608      	mov	r0, r1
 8002188:	f7ff fc3c 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("12V Pb Battery  ");
 800218c:	482c      	ldr	r0, [pc, #176]	; (8002240 <MenuSettingsBatteryType+0xd4>)
 800218e:	f7ff fcb9 	bl	8001b04 <PrintToLCD>
 8002192:	e00a      	b.n	80021aa <MenuSettingsBatteryType+0x3e>
	if (key == KEY_BACK)
 8002194:	2801      	cmp	r0, #1
 8002196:	d104      	bne.n	80021a2 <MenuSettingsBatteryType+0x36>
		CountShowBT--;
 8002198:	3b01      	subs	r3, #1
 800219a:	b25b      	sxtb	r3, r3
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 800219c:	2b00      	cmp	r3, #0
 800219e:	db10      	blt.n	80021c2 <MenuSettingsBatteryType+0x56>
		CountShowBT++;
 80021a0:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 0)
 80021a2:	f994 3000 	ldrsb.w	r3, [r4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ec      	beq.n	8002184 <MenuSettingsBatteryType+0x18>
	if(CountShowBT == 1)
 80021aa:	f994 3000 	ldrsb.w	r3, [r4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d109      	bne.n	80021c6 <MenuSettingsBatteryType+0x5a>
		lcd_set_xy(0,0);
 80021b2:	2100      	movs	r1, #0
 80021b4:	4608      	mov	r0, r1
 80021b6:	f7ff fc25 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("Li ion  Battery  ");
 80021ba:	4822      	ldr	r0, [pc, #136]	; (8002244 <MenuSettingsBatteryType+0xd8>)
 80021bc:	f7ff fca2 	bl	8001b04 <PrintToLCD>
 80021c0:	e001      	b.n	80021c6 <MenuSettingsBatteryType+0x5a>
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 80021c2:	2306      	movs	r3, #6
 80021c4:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 2)
 80021c6:	f994 3000 	ldrsb.w	r3, [r4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d106      	bne.n	80021dc <MenuSettingsBatteryType+0x70>
		lcd_set_xy(0,0);
 80021ce:	2100      	movs	r1, #0
 80021d0:	4608      	mov	r0, r1
 80021d2:	f7ff fc17 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("LiFePo4 Battery ");
 80021d6:	481c      	ldr	r0, [pc, #112]	; (8002248 <MenuSettingsBatteryType+0xdc>)
 80021d8:	f7ff fc94 	bl	8001b04 <PrintToLCD>
	if(CountShowBT == 3)
 80021dc:	f994 3000 	ldrsb.w	r3, [r4]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d106      	bne.n	80021f2 <MenuSettingsBatteryType+0x86>
		lcd_set_xy(0,0);
 80021e4:	2100      	movs	r1, #0
 80021e6:	4608      	mov	r0, r1
 80021e8:	f7ff fc0c 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("LiTo Battery   ");
 80021ec:	4817      	ldr	r0, [pc, #92]	; (800224c <MenuSettingsBatteryType+0xe0>)
 80021ee:	f7ff fc89 	bl	8001b04 <PrintToLCD>
	if(CountShowBT == 4)
 80021f2:	f994 3000 	ldrsb.w	r3, [r4]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d106      	bne.n	8002208 <MenuSettingsBatteryType+0x9c>
		lcd_set_xy(0,0);
 80021fa:	2100      	movs	r1, #0
 80021fc:	4608      	mov	r0, r1
 80021fe:	f7ff fc01 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("NIMh 9.6V Bat.  ");
 8002202:	4813      	ldr	r0, [pc, #76]	; (8002250 <MenuSettingsBatteryType+0xe4>)
 8002204:	f7ff fc7e 	bl	8001b04 <PrintToLCD>
	if(CountShowBT == 5)
 8002208:	f994 3000 	ldrsb.w	r3, [r4]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d106      	bne.n	800221e <MenuSettingsBatteryType+0xb2>
		lcd_set_xy(0,0);
 8002210:	2100      	movs	r1, #0
 8002212:	4608      	mov	r0, r1
 8002214:	f7ff fbf6 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("Min 1V  MAX 20V");
 8002218:	480e      	ldr	r0, [pc, #56]	; (8002254 <MenuSettingsBatteryType+0xe8>)
 800221a:	f7ff fc73 	bl	8001b04 <PrintToLCD>
	if(CountShowBT == 6)
 800221e:	f994 3000 	ldrsb.w	r3, [r4]
 8002222:	2b06      	cmp	r3, #6
 8002224:	d108      	bne.n	8002238 <MenuSettingsBatteryType+0xcc>
		lcd_set_xy(0,0);
 8002226:	2100      	movs	r1, #0
 8002228:	4608      	mov	r0, r1
 800222a:	f7ff fbeb 	bl	8001a04 <lcd_set_xy>
}
 800222e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PrintToLCD("   OK to Exit  ");
 8002232:	4809      	ldr	r0, [pc, #36]	; (8002258 <MenuSettingsBatteryType+0xec>)
 8002234:	f7ff bc66 	b.w	8001b04 <PrintToLCD>
}
 8002238:	bd10      	pop	{r4, pc}
 800223a:	bf00      	nop
 800223c:	2000078f 	.word	0x2000078f
 8002240:	08005fbf 	.word	0x08005fbf
 8002244:	08005fd0 	.word	0x08005fd0
 8002248:	08005fe2 	.word	0x08005fe2
 800224c:	08005ff3 	.word	0x08005ff3
 8002250:	08006003 	.word	0x08006003
 8002254:	08006014 	.word	0x08006014
 8002258:	08006024 	.word	0x08006024

0800225c <MenuSettingsLowVolt>:
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 800225c:	2802      	cmp	r0, #2
{
 800225e:	b510      	push	{r4, lr}
 8002260:	4c0d      	ldr	r4, [pc, #52]	; (8002298 <MenuSettingsLowVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 8002262:	d114      	bne.n	800228e <MenuSettingsLowVolt+0x32>
 8002264:	69a3      	ldr	r3, [r4, #24]
 8002266:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 8002268:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 800226a:	2100      	movs	r1, #0
 800226c:	4608      	mov	r0, r1
 800226e:	f7ff fbc9 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002272:	230a      	movs	r3, #10
 8002274:	69a0      	ldr	r0, [r4, #24]
 8002276:	2101      	movs	r1, #1
 8002278:	fbb0 f0f3 	udiv	r0, r0, r3
 800227c:	f7ff f838 	bl	80012f0 <itoa_koma>
 8002280:	f7ff fc40 	bl	8001b04 <PrintToLCD>
}
 8002284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MenuSettingsLowVolt+0x40>)
 800228a:	f7ff bc3b 	b.w	8001b04 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 800228e:	2801      	cmp	r0, #1
 8002290:	d1eb      	bne.n	800226a <MenuSettingsLowVolt+0xe>
 8002292:	69a3      	ldr	r3, [r4, #24]
 8002294:	3b0a      	subs	r3, #10
 8002296:	e7e7      	b.n	8002268 <MenuSettingsLowVolt+0xc>
 8002298:	20000154 	.word	0x20000154
 800229c:	08005ed9 	.word	0x08005ed9

080022a0 <MenuSettingsMaxVolt>:
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 80022a0:	2802      	cmp	r0, #2
{
 80022a2:	b510      	push	{r4, lr}
 80022a4:	4c0d      	ldr	r4, [pc, #52]	; (80022dc <MenuSettingsMaxVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 80022a6:	d114      	bne.n	80022d2 <MenuSettingsMaxVolt+0x32>
 80022a8:	6a23      	ldr	r3, [r4, #32]
 80022aa:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 80022ac:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 80022ae:	2100      	movs	r1, #0
 80022b0:	4608      	mov	r0, r1
 80022b2:	f7ff fba7 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80022b6:	230a      	movs	r3, #10
 80022b8:	6a20      	ldr	r0, [r4, #32]
 80022ba:	2101      	movs	r1, #1
 80022bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80022c0:	f7ff f816 	bl	80012f0 <itoa_koma>
 80022c4:	f7ff fc1e 	bl	8001b04 <PrintToLCD>
}
 80022c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <MenuSettingsMaxVolt+0x40>)
 80022ce:	f7ff bc19 	b.w	8001b04 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 80022d2:	2801      	cmp	r0, #1
 80022d4:	d1eb      	bne.n	80022ae <MenuSettingsMaxVolt+0xe>
 80022d6:	6a23      	ldr	r3, [r4, #32]
 80022d8:	3b0a      	subs	r3, #10
 80022da:	e7e7      	b.n	80022ac <MenuSettingsMaxVolt+0xc>
 80022dc:	20000154 	.word	0x20000154
 80022e0:	08005ed9 	.word	0x08005ed9

080022e4 <MenuSettingsSwngChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 80022e4:	2802      	cmp	r0, #2
{
 80022e6:	b510      	push	{r4, lr}
 80022e8:	4c0b      	ldr	r4, [pc, #44]	; (8002318 <MenuSettingsSwngChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 80022ea:	d110      	bne.n	800230e <MenuSettingsSwngChrgTime+0x2a>
 80022ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022ee:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 80022f0:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 80022f2:	2100      	movs	r1, #0
 80022f4:	4608      	mov	r0, r1
 80022f6:	f7ff fb85 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 80022fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80022fc:	f7fe ff80 	bl	8001200 <itoa>
 8002300:	f7ff fc00 	bl	8001b04 <PrintToLCD>
}
 8002304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <MenuSettingsSwngChrgTime+0x38>)
 800230a:	f7ff bbfb 	b.w	8001b04 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 800230e:	2801      	cmp	r0, #1
 8002310:	d1ef      	bne.n	80022f2 <MenuSettingsSwngChrgTime+0xe>
 8002312:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	e7eb      	b.n	80022f0 <MenuSettingsSwngChrgTime+0xc>
 8002318:	20000154 	.word	0x20000154
 800231c:	08006034 	.word	0x08006034

08002320 <MenuSettingsSwngDChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 8002320:	2802      	cmp	r0, #2
{
 8002322:	b510      	push	{r4, lr}
 8002324:	4c0b      	ldr	r4, [pc, #44]	; (8002354 <MenuSettingsSwngDChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 8002326:	d110      	bne.n	800234a <MenuSettingsSwngDChrgTime+0x2a>
 8002328:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800232a:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 800232c:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 800232e:	2100      	movs	r1, #0
 8002330:	4608      	mov	r0, r1
 8002332:	f7ff fb67 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 8002336:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002338:	f7fe ff62 	bl	8001200 <itoa>
 800233c:	f7ff fbe2 	bl	8001b04 <PrintToLCD>
}
 8002340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 8002344:	4804      	ldr	r0, [pc, #16]	; (8002358 <MenuSettingsSwngDChrgTime+0x38>)
 8002346:	f7ff bbdd 	b.w	8001b04 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 800234a:	2801      	cmp	r0, #1
 800234c:	d1ef      	bne.n	800232e <MenuSettingsSwngDChrgTime+0xe>
 800234e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002350:	3b01      	subs	r3, #1
 8002352:	e7eb      	b.n	800232c <MenuSettingsSwngDChrgTime+0xc>
 8002354:	20000154 	.word	0x20000154
 8002358:	08006034 	.word	0x08006034

0800235c <MenuSettingsChargeAddapt>:
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 800235c:	2802      	cmp	r0, #2
{
 800235e:	b538      	push	{r3, r4, r5, lr}
 8002360:	4c1a      	ldr	r4, [pc, #104]	; (80023cc <MenuSettingsChargeAddapt+0x70>)
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 8002362:	d12d      	bne.n	80023c0 <MenuSettingsChargeAddapt+0x64>
 8002364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002366:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 8002368:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 800236a:	2100      	movs	r1, #0
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800236c:	250a      	movs	r5, #10
	lcd_set_xy(0,0);
 800236e:	4608      	mov	r0, r1
 8002370:	f7ff fb48 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeAdapt));
 8002374:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002376:	f7fe ff43 	bl	8001200 <itoa>
 800237a:	f7ff fbc3 	bl	8001b04 <PrintToLCD>
	PrintToLCD("% ");
 800237e:	4814      	ldr	r0, [pc, #80]	; (80023d0 <MenuSettingsChargeAddapt+0x74>)
 8002380:	f7ff fbc0 	bl	8001b04 <PrintToLCD>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002384:	6a20      	ldr	r0, [r4, #32]
 8002386:	2101      	movs	r1, #1
 8002388:	fbb0 f0f5 	udiv	r0, r0, r5
 800238c:	f7fe ffb0 	bl	80012f0 <itoa_koma>
 8002390:	f7ff fbb8 	bl	8001b04 <PrintToLCD>
	PrintToLCD("V ");
 8002394:	480f      	ldr	r0, [pc, #60]	; (80023d4 <MenuSettingsChargeAddapt+0x78>)
 8002396:	f7ff fbb5 	bl	8001b04 <PrintToLCD>
	PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage * SettingsData.ChargeAdapt/100))/10,1));
 800239a:	2264      	movs	r2, #100	; 0x64
 800239c:	6a23      	ldr	r3, [r4, #32]
 800239e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80023a0:	2101      	movs	r1, #1
 80023a2:	4358      	muls	r0, r3
 80023a4:	fbb0 f0f2 	udiv	r0, r0, r2
 80023a8:	1a18      	subs	r0, r3, r0
 80023aa:	fbb0 f0f5 	udiv	r0, r0, r5
 80023ae:	f7fe ff9f 	bl	80012f0 <itoa_koma>
 80023b2:	f7ff fba7 	bl	8001b04 <PrintToLCD>
}
 80023b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("V   ");
 80023ba:	4807      	ldr	r0, [pc, #28]	; (80023d8 <MenuSettingsChargeAddapt+0x7c>)
 80023bc:	f7ff bba2 	b.w	8001b04 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 80023c0:	2801      	cmp	r0, #1
 80023c2:	d1d2      	bne.n	800236a <MenuSettingsChargeAddapt+0xe>
 80023c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023c6:	3b01      	subs	r3, #1
 80023c8:	e7ce      	b.n	8002368 <MenuSettingsChargeAddapt+0xc>
 80023ca:	bf00      	nop
 80023cc:	20000154 	.word	0x20000154
 80023d0:	0800603d 	.word	0x0800603d
 80023d4:	08005f2e 	.word	0x08005f2e
 80023d8:	08005ed9 	.word	0x08005ed9

080023dc <SelectedOption>:
	if (SelectedOptionValue == SettingsData.Option1)
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <SelectedOption+0x14>)
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <SelectedOption+0x18>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d101      	bne.n	80023ec <SelectedOption+0x10>
 80023e8:	f7ff bce2 	b.w	8001db0 <SelectedOption.part.0>
}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000154 	.word	0x20000154
 80023f4:	20000a1c 	.word	0x20000a1c

080023f8 <SelectedOption1>:
	if (SelectedOptionValue1 == SettingsData.Option2)
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <SelectedOption1+0x14>)
 80023fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SelectedOption1+0x18>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d101      	bne.n	8002408 <SelectedOption1+0x10>
 8002404:	f7ff bcd4 	b.w	8001db0 <SelectedOption.part.0>
}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000154 	.word	0x20000154
 8002410:	20000a14 	.word	0x20000a14

08002414 <MenuSettingsSaveMenuPosWhenOFF>:
	lcd_set_xy(0,0);
 8002414:	2100      	movs	r1, #0
{
 8002416:	b510      	push	{r4, lr}
 8002418:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 800241a:	4608      	mov	r0, r1
 800241c:	f7ff faf2 	bl	8001a04 <lcd_set_xy>
	if (key == KEY_NEXT)
 8002420:	2c02      	cmp	r4, #2
 8002422:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <MenuSettingsSaveMenuPosWhenOFF+0x8c>)
 8002424:	d10d      	bne.n	8002442 <MenuSettingsSaveMenuPosWhenOFF+0x2e>
		SettingsData.Option1++;
 8002426:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 8002428:	2a07      	cmp	r2, #7
		SettingsData.Option1++;
 800242a:	f102 0101 	add.w	r1, r2, #1
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 800242e:	d127      	bne.n	8002480 <MenuSettingsSaveMenuPosWhenOFF+0x6c>
 8002430:	2201      	movs	r2, #1
 8002432:	609a      	str	r2, [r3, #8]
			PrintToLCD("PowerSupply     ");
 8002434:	481b      	ldr	r0, [pc, #108]	; (80024a4 <MenuSettingsSaveMenuPosWhenOFF+0x90>)
			PrintToLCD("Swing           ");
 8002436:	f7ff fb65 	bl	8001b04 <PrintToLCD>
}
 800243a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption();
 800243e:	f7ff bfcd 	b.w	80023dc <SelectedOption>
	if (key == KEY_BACK)
 8002442:	2c01      	cmp	r4, #1
 8002444:	d103      	bne.n	800244e <MenuSettingsSaveMenuPosWhenOFF+0x3a>
		SettingsData.Option1--;
 8002446:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 8002448:	3a01      	subs	r2, #1
 800244a:	d015      	beq.n	8002478 <MenuSettingsSaveMenuPosWhenOFF+0x64>
		SettingsData.Option1--;
 800244c:	609a      	str	r2, [r3, #8]
	switch (SettingsData.Option1)
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	3a01      	subs	r2, #1
 8002452:	2a06      	cmp	r2, #6
 8002454:	d820      	bhi.n	8002498 <MenuSettingsSaveMenuPosWhenOFF+0x84>
 8002456:	a101      	add	r1, pc, #4	; (adr r1, 800245c <MenuSettingsSaveMenuPosWhenOFF+0x48>)
 8002458:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800245c:	08002435 	.word	0x08002435
 8002460:	08002485 	.word	0x08002485
 8002464:	08002489 	.word	0x08002489
 8002468:	0800248d 	.word	0x0800248d
 800246c:	08002491 	.word	0x08002491
 8002470:	08002495 	.word	0x08002495
 8002474:	0800247d 	.word	0x0800247d
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 8002478:	2207      	movs	r2, #7
 800247a:	609a      	str	r2, [r3, #8]
			PrintToLCD("Swing           ");
 800247c:	480a      	ldr	r0, [pc, #40]	; (80024a8 <MenuSettingsSaveMenuPosWhenOFF+0x94>)
 800247e:	e7da      	b.n	8002436 <MenuSettingsSaveMenuPosWhenOFF+0x22>
		SettingsData.Option1++;
 8002480:	6099      	str	r1, [r3, #8]
 8002482:	e7e4      	b.n	800244e <MenuSettingsSaveMenuPosWhenOFF+0x3a>
			PrintToLCD("Load Menu       ");
 8002484:	4809      	ldr	r0, [pc, #36]	; (80024ac <MenuSettingsSaveMenuPosWhenOFF+0x98>)
 8002486:	e7d6      	b.n	8002436 <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Charge CC CV    ");
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <MenuSettingsSaveMenuPosWhenOFF+0x9c>)
 800248a:	e7d4      	b.n	8002436 <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Charge addapt   ");
 800248c:	4809      	ldr	r0, [pc, #36]	; (80024b4 <MenuSettingsSaveMenuPosWhenOFF+0xa0>)
 800248e:	e7d2      	b.n	8002436 <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("DisCharge       ");
 8002490:	4809      	ldr	r0, [pc, #36]	; (80024b8 <MenuSettingsSaveMenuPosWhenOFF+0xa4>)
 8002492:	e7d0      	b.n	8002436 <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Training        ");
 8002494:	4809      	ldr	r0, [pc, #36]	; (80024bc <MenuSettingsSaveMenuPosWhenOFF+0xa8>)
 8002496:	e7ce      	b.n	8002436 <MenuSettingsSaveMenuPosWhenOFF+0x22>
			SettingsData.Option1 =1;
 8002498:	2201      	movs	r2, #1
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	bd10      	pop	{r4, pc}
 800249e:	bf00      	nop
 80024a0:	20000154 	.word	0x20000154
 80024a4:	08006040 	.word	0x08006040
 80024a8:	080060a6 	.word	0x080060a6
 80024ac:	08006051 	.word	0x08006051
 80024b0:	08006062 	.word	0x08006062
 80024b4:	08006073 	.word	0x08006073
 80024b8:	08006084 	.word	0x08006084
 80024bc:	08006095 	.word	0x08006095

080024c0 <MenuSettingsOutAfterPowerUp>:
	lcd_set_xy(0,0);
 80024c0:	2100      	movs	r1, #0
{
 80024c2:	b510      	push	{r4, lr}
 80024c4:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80024c6:	4608      	mov	r0, r1
 80024c8:	f7ff fa9c 	bl	8001a04 <lcd_set_xy>
	if (key == KEY_NEXT)
 80024cc:	2c02      	cmp	r4, #2
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <MenuSettingsOutAfterPowerUp+0x60>)
 80024d0:	d10d      	bne.n	80024ee <MenuSettingsOutAfterPowerUp+0x2e>
		SettingsData.Option2++;
 80024d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 80024d4:	2a03      	cmp	r2, #3
		SettingsData.Option2++;
 80024d6:	f102 0101 	add.w	r1, r2, #1
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 80024da:	d11c      	bne.n	8002516 <MenuSettingsOutAfterPowerUp+0x56>
 80024dc:	2201      	movs	r2, #1
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
			PrintToLCD("OFF             ");
 80024e0:	4810      	ldr	r0, [pc, #64]	; (8002524 <MenuSettingsOutAfterPowerUp+0x64>)
			PrintToLCD("Previous        ");
 80024e2:	f7ff fb0f 	bl	8001b04 <PrintToLCD>
}
 80024e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption1();
 80024ea:	f7ff bf85 	b.w	80023f8 <SelectedOption1>
	if (key == KEY_BACK)
 80024ee:	2c01      	cmp	r4, #1
 80024f0:	d103      	bne.n	80024fa <MenuSettingsOutAfterPowerUp+0x3a>
		SettingsData.Option2--;
 80024f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 80024f4:	3a01      	subs	r2, #1
 80024f6:	d00a      	beq.n	800250e <MenuSettingsOutAfterPowerUp+0x4e>
		SettingsData.Option2--;
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
	switch (SettingsData.Option2)
 80024fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fc:	2a02      	cmp	r2, #2
 80024fe:	d00c      	beq.n	800251a <MenuSettingsOutAfterPowerUp+0x5a>
 8002500:	2a03      	cmp	r2, #3
 8002502:	d006      	beq.n	8002512 <MenuSettingsOutAfterPowerUp+0x52>
 8002504:	2a01      	cmp	r2, #1
 8002506:	d0eb      	beq.n	80024e0 <MenuSettingsOutAfterPowerUp+0x20>
			SettingsData.Option2 =1;
 8002508:	2201      	movs	r2, #1
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800250c:	bd10      	pop	{r4, pc}
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 800250e:	2203      	movs	r2, #3
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
			PrintToLCD("Previous        ");
 8002512:	4805      	ldr	r0, [pc, #20]	; (8002528 <MenuSettingsOutAfterPowerUp+0x68>)
 8002514:	e7e5      	b.n	80024e2 <MenuSettingsOutAfterPowerUp+0x22>
		SettingsData.Option2++;
 8002516:	6419      	str	r1, [r3, #64]	; 0x40
 8002518:	e7ef      	b.n	80024fa <MenuSettingsOutAfterPowerUp+0x3a>
			PrintToLCD("ON              ");
 800251a:	4804      	ldr	r0, [pc, #16]	; (800252c <MenuSettingsOutAfterPowerUp+0x6c>)
 800251c:	e7e1      	b.n	80024e2 <MenuSettingsOutAfterPowerUp+0x22>
 800251e:	bf00      	nop
 8002520:	20000154 	.word	0x20000154
 8002524:	080060b7 	.word	0x080060b7
 8002528:	080060d9 	.word	0x080060d9
 800252c:	080060c8 	.word	0x080060c8

08002530 <BUT_Debrief>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <BUT_Debrief+0x58>)
 8002532:	4916      	ldr	r1, [pc, #88]	; (800258c <BUT_Debrief+0x5c>)
 8002534:	689a      	ldr	r2, [r3, #8]
int16_t comp = 0;
void BUT_Debrief(void)
{
	Key_Pressed_t key;

	if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_4))
 8002536:	f012 0f10 	tst.w	r2, #16
 800253a:	d00c      	beq.n	8002556 <BUT_Debrief+0x26>
 800253c:	689a      	ldr	r2, [r3, #8]
		key = KEY_OK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_5))
 800253e:	0690      	lsls	r0, r2, #26
 8002540:	d516      	bpl.n	8002570 <BUT_Debrief+0x40>
 8002542:	689a      	ldr	r2, [r3, #8]
		key = KEY_NEXT;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_6))
 8002544:	0652      	lsls	r2, r2, #25
 8002546:	d515      	bpl.n	8002574 <BUT_Debrief+0x44>
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	43db      	mvns	r3, r3
		key = KEY_BACK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_7))
 800254c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002550:	d112      	bne.n	8002578 <BUT_Debrief+0x48>
			{
			pressedKey = key;
			return;
		}
	}
	else comp=0;
 8002552:	800b      	strh	r3, [r1, #0]
 8002554:	4770      	bx	lr
		key = KEY_OK;
 8002556:	2203      	movs	r2, #3
		if (comp > THRESHOLD2)
 8002558:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800255c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002560:	4283      	cmp	r3, r0
 8002562:	dd0b      	ble.n	800257c <BUT_Debrief+0x4c>
			comp = THRESHOLD2 - 40;
 8002564:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8002568:	800b      	strh	r3, [r1, #0]
			pressedKey = key;
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <BUT_Debrief+0x60>)
 800256c:	701a      	strb	r2, [r3, #0]
			return;
 800256e:	e00a      	b.n	8002586 <BUT_Debrief+0x56>
		key = KEY_NEXT;
 8002570:	2202      	movs	r2, #2
 8002572:	e7f1      	b.n	8002558 <BUT_Debrief+0x28>
		key = KEY_BACK;
 8002574:	2201      	movs	r2, #1
 8002576:	e7ef      	b.n	8002558 <BUT_Debrief+0x28>
		key = KEY_UP;
 8002578:	2204      	movs	r2, #4
 800257a:	e7ed      	b.n	8002558 <BUT_Debrief+0x28>
		else comp++;
 800257c:	3301      	adds	r3, #1
 800257e:	b21b      	sxth	r3, r3
		if (comp == THRESHOLD)
 8002580:	2b14      	cmp	r3, #20
		else comp++;
 8002582:	800b      	strh	r3, [r1, #0]
		if (comp == THRESHOLD)
 8002584:	d0f1      	beq.n	800256a <BUT_Debrief+0x3a>
}
 8002586:	4770      	bx	lr
 8002588:	40010c00 	.word	0x40010c00
 800258c:	200007dc 	.word	0x200007dc
 8002590:	200007e0 	.word	0x200007e0

08002594 <BUT_GetKey>:

Key_Pressed_t BUT_GetKey(void)
{
	if (pressedKey) PowerOffTimesec=0;
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <BUT_GetKey+0x14>)
 8002596:	7818      	ldrb	r0, [r3, #0]
 8002598:	b110      	cbz	r0, 80025a0 <BUT_GetKey+0xc>
 800259a:	2100      	movs	r1, #0
 800259c:	4a03      	ldr	r2, [pc, #12]	; (80025ac <BUT_GetKey+0x18>)
 800259e:	6011      	str	r1, [r2, #0]
	Key_Pressed_t key = pressedKey;
	pressedKey = 0;
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
	return key;
}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	200007e0 	.word	0x200007e0
 80025ac:	200007a0 	.word	0x200007a0

080025b0 <Start_Timer_sec>:

void Start_Timer_sec()
{
	Timer_Sec = 0;
 80025b0:	2200      	movs	r2, #0
 80025b2:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <Start_Timer_sec+0x10>)
 80025b4:	601a      	str	r2, [r3, #0]
	Status_Timer_Sec = 1;
 80025b6:	2201      	movs	r2, #1
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <Start_Timer_sec+0x14>)
 80025ba:	701a      	strb	r2, [r3, #0]
}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	200007cc 	.word	0x200007cc
 80025c4:	200007a5 	.word	0x200007a5

080025c8 <ClockOnLCD_noSec>:
	if (strlen1(string)<2) lcd_out("0",1);
	lcd_out(string,1);

}
void ClockOnLCD_noSec (uint32_t time)
{
 80025c8:	b538      	push	{r3, r4, r5, lr}
 80025ca:	4604      	mov	r4, r0
	char *string;
	//(" ",1);
	string = itoa(time/3600);
 80025cc:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80025d0:	fbb4 f0f0 	udiv	r0, r4, r0
 80025d4:	f7fe fe14 	bl	8001200 <itoa>
 80025d8:	4605      	mov	r5, r0
	if (strlen1(string)<2) lcd_out("0",1);
 80025da:	f7fe fefb 	bl	80013d4 <strlen1>
 80025de:	2801      	cmp	r0, #1
 80025e0:	d803      	bhi.n	80025ea <ClockOnLCD_noSec+0x22>
 80025e2:	2101      	movs	r1, #1
 80025e4:	4811      	ldr	r0, [pc, #68]	; (800262c <ClockOnLCD_noSec+0x64>)
 80025e6:	f7ff fa1f 	bl	8001a28 <lcd_out>
	lcd_out(string,1);
 80025ea:	2101      	movs	r1, #1
 80025ec:	4628      	mov	r0, r5
 80025ee:	f7ff fa1b 	bl	8001a28 <lcd_out>

	lcd_out(":",1);
 80025f2:	2101      	movs	r1, #1
 80025f4:	480e      	ldr	r0, [pc, #56]	; (8002630 <ClockOnLCD_noSec+0x68>)
 80025f6:	f7ff fa17 	bl	8001a28 <lcd_out>
	string = itoa((time/60)%60);
 80025fa:	233c      	movs	r3, #60	; 0x3c
 80025fc:	fbb4 f4f3 	udiv	r4, r4, r3
 8002600:	fbb4 f0f3 	udiv	r0, r4, r3
 8002604:	fb03 4010 	mls	r0, r3, r0, r4
 8002608:	f7fe fdfa 	bl	8001200 <itoa>
 800260c:	4604      	mov	r4, r0
	if (strlen1(string)<2) lcd_out("0",1);
 800260e:	f7fe fee1 	bl	80013d4 <strlen1>
 8002612:	2801      	cmp	r0, #1
 8002614:	d803      	bhi.n	800261e <ClockOnLCD_noSec+0x56>
 8002616:	2101      	movs	r1, #1
 8002618:	4804      	ldr	r0, [pc, #16]	; (800262c <ClockOnLCD_noSec+0x64>)
 800261a:	f7ff fa05 	bl	8001a28 <lcd_out>
	lcd_out(string,1);
 800261e:	4620      	mov	r0, r4


}
 8002620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_out(string,1);
 8002624:	2101      	movs	r1, #1
 8002626:	f7ff b9ff 	b.w	8001a28 <lcd_out>
 800262a:	bf00      	nop
 800262c:	080060ea 	.word	0x080060ea
 8002630:	080061e1 	.word	0x080061e1

08002634 <OUT_OFF>:


void OUT_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BR1;//ON-OFF OUT
 8002634:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <OUT_OFF+0x20>)
 800263a:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	GPIOA->BSRR =  GPIO_BSRR_BR8;//led out on/off
 800263c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002640:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002644:	611a      	str	r2, [r3, #16]
	On_off = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	4a03      	ldr	r2, [pc, #12]	; (8002658 <OUT_OFF+0x24>)
 800264a:	7013      	strb	r3, [r2, #0]
	Status_Out = 0;
 800264c:	4a03      	ldr	r2, [pc, #12]	; (800265c <OUT_OFF+0x28>)
 800264e:	7013      	strb	r3, [r2, #0]
}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40010c00 	.word	0x40010c00
 8002658:	2000079e 	.word	0x2000079e
 800265c:	200007a4 	.word	0x200007a4

08002660 <discharge>:
{
 8002660:	b508      	push	{r3, lr}
	OUT_OFF();
 8002662:	f7ff ffe7 	bl	8002634 <OUT_OFF>
}
 8002666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 800266a:	2032      	movs	r0, #50	; 0x32
 800266c:	f7fe bcac 	b.w	8000fc8 <delay_ms>

08002670 <MenuCalibration_CURRENT_Load>:
{
 8002670:	b538      	push	{r3, r4, r5, lr}
	EnterInMenu_Status=1;
 8002672:	2201      	movs	r2, #1
{
 8002674:	4605      	mov	r5, r0
	EnterInMenu_Status=1;
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <MenuCalibration_CURRENT_Load+0x5c>)
 8002678:	4c15      	ldr	r4, [pc, #84]	; (80026d0 <MenuCalibration_CURRENT_Load+0x60>)
 800267a:	701a      	strb	r2, [r3, #0]
	discharge();
 800267c:	f7ff fff0 	bl	8002660 <discharge>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent_x1++;
 8002680:	2d02      	cmp	r5, #2
 8002682:	d11e      	bne.n	80026c2 <MenuCalibration_CURRENT_Load+0x52>
 8002684:	6a23      	ldr	r3, [r4, #32]
 8002686:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x1--;
 8002688:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 800268a:	2100      	movs	r1, #0
 800268c:	4608      	mov	r0, r1
 800268e:	f7ff f9b9 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent_x1));
 8002692:	6a20      	ldr	r0, [r4, #32]
 8002694:	f7fe fdb4 	bl	8001200 <itoa>
 8002698:	f7ff fa34 	bl	8001b04 <PrintToLCD>
	PrintToLCD("   ");
 800269c:	480d      	ldr	r0, [pc, #52]	; (80026d4 <MenuCalibration_CURRENT_Load+0x64>)
 800269e:	f7ff fa31 	bl	8001b04 <PrintToLCD>
	lcd_set_xy(0,1);
 80026a2:	2101      	movs	r1, #1
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7ff f9ad 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <MenuCalibration_CURRENT_Load+0x68>)
 80026ac:	8818      	ldrh	r0, [r3, #0]
 80026ae:	b200      	sxth	r0, r0
 80026b0:	f7fe fda6 	bl	8001200 <itoa>
 80026b4:	f7ff fa26 	bl	8001b04 <PrintToLCD>
}
 80026b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("mA  ");
 80026bc:	4807      	ldr	r0, [pc, #28]	; (80026dc <MenuCalibration_CURRENT_Load+0x6c>)
 80026be:	f7ff ba21 	b.w	8001b04 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x1--;
 80026c2:	2d01      	cmp	r5, #1
 80026c4:	d1e1      	bne.n	800268a <MenuCalibration_CURRENT_Load+0x1a>
 80026c6:	6a23      	ldr	r3, [r4, #32]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	e7dd      	b.n	8002688 <MenuCalibration_CURRENT_Load+0x18>
 80026cc:	2000079c 	.word	0x2000079c
 80026d0:	20000004 	.word	0x20000004
 80026d4:	080060d5 	.word	0x080060d5
 80026d8:	20000856 	.word	0x20000856
 80026dc:	080060ec 	.word	0x080060ec

080026e0 <discharge1>:
{
 80026e0:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=2)
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <discharge1+0x34>)
 80026e4:	f993 2000 	ldrsb.w	r2, [r3]
 80026e8:	2a02      	cmp	r2, #2
 80026ea:	d011      	beq.n	8002710 <discharge1+0x30>
		ChargeDischargeState = 2;
 80026ec:	2202      	movs	r2, #2
 80026ee:	701a      	strb	r2, [r3, #0]
		OUT_OFF();
 80026f0:	f7ff ffa0 	bl	8002634 <OUT_OFF>
		TimerForReadyMeasurement_ms = 0;
 80026f4:	2200      	movs	r2, #0
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <discharge1+0x38>)
		delay_ms(50);
 80026f8:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 80026fa:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 80026fc:	f7fe fc64 	bl	8000fc8 <delay_ms>
		logDebug("DIsCharge");
 8002700:	4806      	ldr	r0, [pc, #24]	; (800271c <discharge1+0x3c>)
 8002702:	f002 fdbb 	bl	800527c <printToBufferWithoutEndUART1>
}
 8002706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("DIsCharge");
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <discharge1+0x40>)
 800270c:	f002 bd50 	b.w	80051b0 <printToBufferUART1>
}
 8002710:	bd08      	pop	{r3, pc}
 8002712:	bf00      	nop
 8002714:	20000786 	.word	0x20000786
 8002718:	200007c8 	.word	0x200007c8
 800271c:	0800593c 	.word	0x0800593c
 8002720:	080060f1 	.word	0x080060f1

08002724 <MenuDisCharge>:
	EnterInMenu_Status = 1;
 8002724:	2101      	movs	r1, #1
{
 8002726:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (InitiStatus==0)
 800272a:	4e8d      	ldr	r6, [pc, #564]	; (8002960 <MenuDisCharge+0x23c>)
	EnterInMenu_Status = 1;
 800272c:	4f8d      	ldr	r7, [pc, #564]	; (8002964 <MenuDisCharge+0x240>)
	if (InitiStatus==0)
 800272e:	7833      	ldrb	r3, [r6, #0]
 8002730:	4a8d      	ldr	r2, [pc, #564]	; (8002968 <MenuDisCharge+0x244>)
	EnterInMenu_Status = 1;
 8002732:	7039      	strb	r1, [r7, #0]
	if (InitiStatus==0)
 8002734:	b94b      	cbnz	r3, 800274a <MenuDisCharge+0x26>
		InitiStatus = 1;
 8002736:	7031      	strb	r1, [r6, #0]
		ChargeStatusForTimer = 0;
 8002738:	498c      	ldr	r1, [pc, #560]	; (800296c <MenuDisCharge+0x248>)
		BatteryLow=0;
 800273a:	7013      	strb	r3, [r2, #0]
		ChargeStatusForTimer = 0;
 800273c:	700b      	strb	r3, [r1, #0]
		DisChargeStatusForTimer = 0;
 800273e:	498c      	ldr	r1, [pc, #560]	; (8002970 <MenuDisCharge+0x24c>)
 8002740:	700b      	strb	r3, [r1, #0]
		BatteryCapacityDischargeCurrent = 0;
 8002742:	498c      	ldr	r1, [pc, #560]	; (8002974 <MenuDisCharge+0x250>)
 8002744:	600b      	str	r3, [r1, #0]
		DischargeTimeSec = 0;
 8002746:	498c      	ldr	r1, [pc, #560]	; (8002978 <MenuDisCharge+0x254>)
 8002748:	600b      	str	r3, [r1, #0]
	U_BatteryTmp = U_OUT;
 800274a:	f8df 8230 	ldr.w	r8, [pc, #560]	; 800297c <MenuDisCharge+0x258>
 800274e:	498c      	ldr	r1, [pc, #560]	; (8002980 <MenuDisCharge+0x25c>)
 8002750:	f8b8 3000 	ldrh.w	r3, [r8]
	if (U_BatteryTmp >=SettingsData.LowVoltage) BatteryLow=0;
 8002754:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8002984 <MenuDisCharge+0x260>
	U_BatteryTmp = U_OUT;
 8002758:	b29b      	uxth	r3, r3
 800275a:	800b      	strh	r3, [r1, #0]
	if (U_BatteryTmp >=SettingsData.LowVoltage) BatteryLow=0;
 800275c:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8002760:	428b      	cmp	r3, r1
 8002762:	f0c0 80f4 	bcc.w	800294e <MenuDisCharge+0x22a>
 8002766:	2300      	movs	r3, #0
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 8002768:	4987      	ldr	r1, [pc, #540]	; (8002988 <MenuDisCharge+0x264>)
		BatteryLow = 1;
 800276a:	7013      	strb	r3, [r2, #0]
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 800276c:	4b87      	ldr	r3, [pc, #540]	; (800298c <MenuDisCharge+0x268>)
 800276e:	6809      	ldr	r1, [r1, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4d7f      	ldr	r5, [pc, #508]	; (8002970 <MenuDisCharge+0x24c>)
 8002774:	1a5b      	subs	r3, r3, r1
 8002776:	2b03      	cmp	r3, #3
 8002778:	d905      	bls.n	8002786 <MenuDisCharge+0x62>
 800277a:	7813      	ldrb	r3, [r2, #0]
 800277c:	b11b      	cbz	r3, 8002786 <MenuDisCharge+0x62>
	OUT_OFF();
 800277e:	f7ff ff59 	bl	8002634 <OUT_OFF>
		DisChargeStatusForTimer = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	702b      	strb	r3, [r5, #0]
	if (key == KEY_NEXT)
 8002786:	2802      	cmp	r0, #2
 8002788:	4c81      	ldr	r4, [pc, #516]	; (8002990 <MenuDisCharge+0x26c>)
 800278a:	d156      	bne.n	800283a <MenuDisCharge+0x116>
    	if (On_off == 0)
 800278c:	4b81      	ldr	r3, [pc, #516]	; (8002994 <MenuDisCharge+0x270>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d14e      	bne.n	8002832 <MenuDisCharge+0x10e>
    		discharge();
 8002794:	f7ff ff64 	bl	8002660 <discharge>
    		DisChargeStatusForTimer = 1;
 8002798:	2301      	movs	r3, #1
    		DisChargeStatusForTimer = 0;
 800279a:	702b      	strb	r3, [r5, #0]
	if(CountShow == 0)
 800279c:	f994 1000 	ldrsb.w	r1, [r4]
 80027a0:	bb69      	cbnz	r1, 80027fe <MenuDisCharge+0xda>
		lcd_set_xy(0,0);
 80027a2:	4608      	mov	r0, r1
 80027a4:	f7ff f92e 	bl	8001a04 <lcd_set_xy>
		PrintToLCD(itoa_koma(U_OUT ,2));
 80027a8:	f8b8 0000 	ldrh.w	r0, [r8]
 80027ac:	2102      	movs	r1, #2
 80027ae:	b280      	uxth	r0, r0
 80027b0:	f7fe fd9e 	bl	80012f0 <itoa_koma>
 80027b4:	f7ff f9a6 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V ");
 80027b8:	4877      	ldr	r0, [pc, #476]	; (8002998 <MenuDisCharge+0x274>)
 80027ba:	f7ff f9a3 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(Current ));
 80027be:	4b77      	ldr	r3, [pc, #476]	; (800299c <MenuDisCharge+0x278>)
 80027c0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80029a0 <MenuDisCharge+0x27c>
 80027c4:	8818      	ldrh	r0, [r3, #0]
 80027c6:	b200      	sxth	r0, r0
 80027c8:	f7fe fd1a 	bl	8001200 <itoa>
 80027cc:	f7ff f99a 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mA      ");
 80027d0:	4874      	ldr	r0, [pc, #464]	; (80029a4 <MenuDisCharge+0x280>)
 80027d2:	f7ff f997 	bl	8001b04 <PrintToLCD>
		if (On_off ==0)
 80027d6:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <MenuDisCharge+0x270>)
				lcd_set_xy(7,1);
 80027d8:	2101      	movs	r1, #1
		if (On_off ==0)
 80027da:	781b      	ldrb	r3, [r3, #0]
				lcd_set_xy(7,1);
 80027dc:	2007      	movs	r0, #7
		if (On_off ==0)
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 80ab 	bne.w	800293a <MenuDisCharge+0x216>
				lcd_set_xy(7,1);
 80027e4:	f7ff f90e 	bl	8001a04 <lcd_set_xy>
				LcdOutbyNumber(2,1);
 80027e8:	2101      	movs	r1, #1
 80027ea:	2002      	movs	r0, #2
						LcdOutbyNumber(3,1);
 80027ec:	f7ff f931 	bl	8001a52 <LcdOutbyNumber>
			if (Blink_message_counter>10)
 80027f0:	f898 3000 	ldrb.w	r3, [r8]
 80027f4:	2b0a      	cmp	r3, #10
				Blink_message_counter = 0;
 80027f6:	bf84      	itt	hi
 80027f8:	2300      	movhi	r3, #0
 80027fa:	f888 3000 	strbhi.w	r3, [r8]
	if(CountShow == 1)
 80027fe:	f994 8000 	ldrsb.w	r8, [r4]
 8002802:	f1b8 0f01 	cmp.w	r8, #1
 8002806:	d123      	bne.n	8002850 <MenuDisCharge+0x12c>
		lcd_set_xy(0,0);
 8002808:	2100      	movs	r1, #0
 800280a:	4608      	mov	r0, r1
 800280c:	f7ff f8fa 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("OffWhen Vb<");
 8002810:	4865      	ldr	r0, [pc, #404]	; (80029a8 <MenuDisCharge+0x284>)
 8002812:	f7ff f977 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.LowVoltage/10 ,1));
 8002816:	230a      	movs	r3, #10
 8002818:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800281c:	4641      	mov	r1, r8
 800281e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002822:	f7fe fd65 	bl	80012f0 <itoa_koma>
 8002826:	f7ff f96d 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V   ");
 800282a:	4860      	ldr	r0, [pc, #384]	; (80029ac <MenuDisCharge+0x288>)
 800282c:	f7ff f96a 	bl	8001b04 <PrintToLCD>
 8002830:	e00e      	b.n	8002850 <MenuDisCharge+0x12c>
	OUT_OFF();
 8002832:	f7ff feff 	bl	8002634 <OUT_OFF>
    		DisChargeStatusForTimer = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	e7af      	b.n	800279a <MenuDisCharge+0x76>
	if (key == KEY_BACK)
 800283a:	2801      	cmp	r0, #1
 800283c:	d1ae      	bne.n	800279c <MenuDisCharge+0x78>
		CountShow--;
 800283e:	7823      	ldrb	r3, [r4, #0]
 8002840:	3b01      	subs	r3, #1
 8002842:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM2-1;
 8002844:	2b00      	cmp	r3, #0
 8002846:	db01      	blt.n	800284c <MenuDisCharge+0x128>
		CountShow--;
 8002848:	7023      	strb	r3, [r4, #0]
 800284a:	e7a7      	b.n	800279c <MenuDisCharge+0x78>
		if (CountShow<0) CountShow=MAXITEM2-1;
 800284c:	2303      	movs	r3, #3
 800284e:	7023      	strb	r3, [r4, #0]
	if(CountShow == 2)
 8002850:	f994 3000 	ldrsb.w	r3, [r4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d11b      	bne.n	8002890 <MenuDisCharge+0x16c>
		lcd_set_xy(0,0);
 8002858:	2100      	movs	r1, #0
 800285a:	4608      	mov	r0, r1
 800285c:	f7ff f8d2 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("P ");
 8002860:	4853      	ldr	r0, [pc, #332]	; (80029b0 <MenuDisCharge+0x28c>)
 8002862:	f7ff f94f 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600 ));
 8002866:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <MenuDisCharge+0x290>)
 8002868:	6898      	ldr	r0, [r3, #8]
 800286a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800286e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002872:	f7fe fcc5 	bl	8001200 <itoa>
 8002876:	f7ff f945 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mAh     ");
 800287a:	484f      	ldr	r0, [pc, #316]	; (80029b8 <MenuDisCharge+0x294>)
 800287c:	f7ff f942 	bl	8001b04 <PrintToLCD>
		lcd_set_xy(3,1);
 8002880:	2003      	movs	r0, #3
 8002882:	2101      	movs	r1, #1
 8002884:	f7ff f8be 	bl	8001a04 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <MenuDisCharge+0x298>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	f7ff fe9c 	bl	80025c8 <ClockOnLCD_noSec>
	if(CountShow == 3)
 8002890:	f994 8000 	ldrsb.w	r8, [r4]
 8002894:	4c38      	ldr	r4, [pc, #224]	; (8002978 <MenuDisCharge+0x254>)
 8002896:	f1b8 0f03 	cmp.w	r8, #3
 800289a:	d11a      	bne.n	80028d2 <MenuDisCharge+0x1ae>
		lcd_set_xy(0,0);
 800289c:	2100      	movs	r1, #0
 800289e:	4608      	mov	r0, r1
 80028a0:	f7ff f8b0 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("N ");
 80028a4:	4846      	ldr	r0, [pc, #280]	; (80029c0 <MenuDisCharge+0x29c>)
 80028a6:	f7ff f92d 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600 ));
 80028aa:	4b32      	ldr	r3, [pc, #200]	; (8002974 <MenuDisCharge+0x250>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80028b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80028b6:	f7fe fca3 	bl	8001200 <itoa>
 80028ba:	f7ff f923 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mAH     ");
 80028be:	4841      	ldr	r0, [pc, #260]	; (80029c4 <MenuDisCharge+0x2a0>)
 80028c0:	f7ff f920 	bl	8001b04 <PrintToLCD>
		lcd_set_xy(3,1);
 80028c4:	4640      	mov	r0, r8
 80028c6:	2101      	movs	r1, #1
 80028c8:	f7ff f89c 	bl	8001a04 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec);
 80028cc:	6820      	ldr	r0, [r4, #0]
 80028ce:	f7ff fe7b 	bl	80025c8 <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 80028d2:	483d      	ldr	r0, [pc, #244]	; (80029c8 <MenuDisCharge+0x2a4>)
 80028d4:	f002 fcd2 	bl	800527c <printToBufferWithoutEndUART1>
 80028d8:	7831      	ldrb	r1, [r6, #0]
 80028da:	2200      	movs	r2, #0
 80028dc:	483b      	ldr	r0, [pc, #236]	; (80029cc <MenuDisCharge+0x2a8>)
 80028de:	f002 fd0b 	bl	80052f8 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 80028e2:	4839      	ldr	r0, [pc, #228]	; (80029c8 <MenuDisCharge+0x2a4>)
 80028e4:	f002 fcca 	bl	800527c <printToBufferWithoutEndUART1>
 80028e8:	7839      	ldrb	r1, [r7, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	4838      	ldr	r0, [pc, #224]	; (80029d0 <MenuDisCharge+0x2ac>)
 80028ee:	f002 fd03 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 80028f2:	4835      	ldr	r0, [pc, #212]	; (80029c8 <MenuDisCharge+0x2a4>)
 80028f4:	f002 fcc2 	bl	800527c <printToBufferWithoutEndUART1>
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <MenuDisCharge+0x248>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	7819      	ldrb	r1, [r3, #0]
 80028fe:	4835      	ldr	r0, [pc, #212]	; (80029d4 <MenuDisCharge+0x2b0>)
 8002900:	f002 fcfa 	bl	80052f8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8002904:	4830      	ldr	r0, [pc, #192]	; (80029c8 <MenuDisCharge+0x2a4>)
 8002906:	f002 fcb9 	bl	800527c <printToBufferWithoutEndUART1>
 800290a:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <MenuDisCharge+0x2b4>)
 800290c:	2200      	movs	r2, #0
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	4832      	ldr	r0, [pc, #200]	; (80029dc <MenuDisCharge+0x2b8>)
 8002912:	f002 fcf1 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8002916:	482c      	ldr	r0, [pc, #176]	; (80029c8 <MenuDisCharge+0x2a4>)
 8002918:	f002 fcb0 	bl	800527c <printToBufferWithoutEndUART1>
 800291c:	7829      	ldrb	r1, [r5, #0]
 800291e:	2200      	movs	r2, #0
 8002920:	482f      	ldr	r0, [pc, #188]	; (80029e0 <MenuDisCharge+0x2bc>)
 8002922:	f002 fce9 	bl	80052f8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8002926:	4828      	ldr	r0, [pc, #160]	; (80029c8 <MenuDisCharge+0x2a4>)
 8002928:	f002 fca8 	bl	800527c <printToBufferWithoutEndUART1>
 800292c:	6821      	ldr	r1, [r4, #0]
 800292e:	2200      	movs	r2, #0
}
 8002930:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8002934:	482b      	ldr	r0, [pc, #172]	; (80029e4 <MenuDisCharge+0x2c0>)
 8002936:	f002 bcdf 	b.w	80052f8 <printToBufferUART1D>
				if (Blink_message_counter<=5)
 800293a:	f898 3000 	ldrb.w	r3, [r8]
 800293e:	2b05      	cmp	r3, #5
 8002940:	f67f af50 	bls.w	80027e4 <MenuDisCharge+0xc0>
						lcd_set_xy(7,1);
 8002944:	f7ff f85e 	bl	8001a04 <lcd_set_xy>
						LcdOutbyNumber(3,1);
 8002948:	2101      	movs	r1, #1
 800294a:	2003      	movs	r0, #3
 800294c:	e74e      	b.n	80027ec <MenuDisCharge+0xc8>
		if (BatteryLow == 0) U_Battery_Timer = time_sec;
 800294e:	7813      	ldrb	r3, [r2, #0]
 8002950:	b91b      	cbnz	r3, 800295a <MenuDisCharge+0x236>
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MenuDisCharge+0x268>)
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <MenuDisCharge+0x264>)
 8002958:	6019      	str	r1, [r3, #0]
		BatteryLow = 1;
 800295a:	2301      	movs	r3, #1
 800295c:	e704      	b.n	8002768 <MenuDisCharge+0x44>
 800295e:	bf00      	nop
 8002960:	2000079d 	.word	0x2000079d
 8002964:	2000079c 	.word	0x2000079c
 8002968:	20000784 	.word	0x20000784
 800296c:	20000787 	.word	0x20000787
 8002970:	20000790 	.word	0x20000790
 8002974:	2000077c 	.word	0x2000077c
 8002978:	20000794 	.word	0x20000794
 800297c:	2000086c 	.word	0x2000086c
 8002980:	200007d0 	.word	0x200007d0
 8002984:	20000154 	.word	0x20000154
 8002988:	200007d4 	.word	0x200007d4
 800298c:	200007e4 	.word	0x200007e4
 8002990:	2000078d 	.word	0x2000078d
 8002994:	2000079e 	.word	0x2000079e
 8002998:	08005f2e 	.word	0x08005f2e
 800299c:	20000856 	.word	0x20000856
 80029a0:	20000785 	.word	0x20000785
 80029a4:	080060fb 	.word	0x080060fb
 80029a8:	08006104 	.word	0x08006104
 80029ac:	08005ed9 	.word	0x08005ed9
 80029b0:	08006110 	.word	0x08006110
 80029b4:	200000f4 	.word	0x200000f4
 80029b8:	08006113 	.word	0x08006113
 80029bc:	20000798 	.word	0x20000798
 80029c0:	080061a2 	.word	0x080061a2
 80029c4:	0800611c 	.word	0x0800611c
 80029c8:	0800593c 	.word	0x0800593c
 80029cc:	08006125 	.word	0x08006125
 80029d0:	08006133 	.word	0x08006133
 80029d4:	08006148 	.word	0x08006148
 80029d8:	20000788 	.word	0x20000788
 80029dc:	0800615d 	.word	0x0800615d
 80029e0:	0800616d 	.word	0x0800616d
 80029e4:	08006185 	.word	0x08006185

080029e8 <OUT_ON>:
void OUT_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BS1;//ON-OFF OUT
 80029e8:	2202      	movs	r2, #2
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <OUT_ON+0x1c>)
 80029ec:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	On_off = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	4a05      	ldr	r2, [pc, #20]	; (8002a08 <OUT_ON+0x20>)
 80029f2:	7013      	strb	r3, [r2, #0]
	Status_Out = 1;
 80029f4:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <OUT_ON+0x24>)
 80029f6:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS8;//led out on/off
 80029f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <OUT_ON+0x28>)
 80029fe:	611a      	str	r2, [r3, #16]
}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40010c00 	.word	0x40010c00
 8002a08:	2000079e 	.word	0x2000079e
 8002a0c:	200007a4 	.word	0x200007a4
 8002a10:	40010800 	.word	0x40010800

08002a14 <OUTStateAfterPowerUpFunction>:
    if (OutStateAfterPowerUp ==2)
 8002a14:	4908      	ldr	r1, [pc, #32]	; (8002a38 <OUTStateAfterPowerUpFunction+0x24>)
{
 8002a16:	b508      	push	{r3, lr}
    if (OutStateAfterPowerUp ==2)
 8002a18:	680b      	ldr	r3, [r1, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d104      	bne.n	8002a28 <OUTStateAfterPowerUpFunction+0x14>
    	OUT_ON();
 8002a1e:	f7ff ffe3 	bl	80029e8 <OUT_ON>
    	OutStateAfterPowerUp = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	600b      	str	r3, [r1, #0]
}
 8002a26:	bd08      	pop	{r3, pc}
    if (OutStateAfterPowerUp ==3)
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d1fc      	bne.n	8002a26 <OUTStateAfterPowerUpFunction+0x12>
    	if (SaveDataWhenPowerOff.OutState==1)
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <OUTStateAfterPowerUpFunction+0x28>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d1f8      	bne.n	8002a26 <OUTStateAfterPowerUpFunction+0x12>
 8002a34:	e7f3      	b.n	8002a1e <OUTStateAfterPowerUpFunction+0xa>
 8002a36:	bf00      	nop
 8002a38:	20000274 	.word	0x20000274
 8002a3c:	200000f4 	.word	0x200000f4

08002a40 <MenuPowerSupply>:
	lcd_set_xy(0,0);
 8002a40:	2100      	movs	r1, #0
	EnterInMenu_Status = 1;
 8002a42:	2201      	movs	r2, #1
{
 8002a44:	b538      	push	{r3, r4, r5, lr}
	EnterInMenu_Status = 1;
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <MenuPowerSupply+0xa4>)
{
 8002a48:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002a4a:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8002a4c:	701a      	strb	r2, [r3, #0]
	lcd_set_xy(0,0);
 8002a4e:	f7fe ffd9 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8002a52:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <MenuPowerSupply+0xa8>)
 8002a54:	2102      	movs	r1, #2
 8002a56:	8818      	ldrh	r0, [r3, #0]
 8002a58:	b280      	uxth	r0, r0
 8002a5a:	f7fe fc49 	bl	80012f0 <itoa_koma>
 8002a5e:	f7ff f851 	bl	8001b04 <PrintToLCD>
	PrintToLCD("V  ");
 8002a62:	4822      	ldr	r0, [pc, #136]	; (8002aec <MenuPowerSupply+0xac>)
 8002a64:	f7ff f84e 	bl	8001b04 <PrintToLCD>
	lcd_set_xy(7,0);
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2007      	movs	r0, #7
 8002a6c:	f7fe ffca 	bl	8001a04 <lcd_set_xy>
	if (Current < 1000)
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <MenuPowerSupply+0xb0>)
 8002a72:	881a      	ldrh	r2, [r3, #0]
 8002a74:	b212      	sxth	r2, r2
 8002a76:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002a7a:	da1d      	bge.n	8002ab8 <MenuPowerSupply+0x78>
		PrintToLCD(itoa(Current));
 8002a7c:	8818      	ldrh	r0, [r3, #0]
 8002a7e:	b200      	sxth	r0, r0
 8002a80:	f7fe fbbe 	bl	8001200 <itoa>
 8002a84:	f7ff f83e 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mA    ");
 8002a88:	481a      	ldr	r0, [pc, #104]	; (8002af4 <MenuPowerSupply+0xb4>)
	if (On_off == 0)
 8002a8a:	4d1b      	ldr	r5, [pc, #108]	; (8002af8 <MenuPowerSupply+0xb8>)
		PrintToLCD("A     ");
 8002a8c:	f7ff f83a 	bl	8001b04 <PrintToLCD>
	if (On_off == 0)
 8002a90:	782b      	ldrb	r3, [r5, #0]
 8002a92:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8002a96:	b9db      	cbnz	r3, 8002ad0 <MenuPowerSupply+0x90>
		lcd_set_xy(13,0);
 8002a98:	200d      	movs	r0, #13
 8002a9a:	f7fe ffb3 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("OFF ");
 8002a9e:	4817      	ldr	r0, [pc, #92]	; (8002afc <MenuPowerSupply+0xbc>)
		PrintToLCD("ON ");
 8002aa0:	f7ff f830 	bl	8001b04 <PrintToLCD>
    if (key == KEY_NEXT)
 8002aa4:	2c02      	cmp	r4, #2
 8002aa6:	d103      	bne.n	8002ab0 <MenuPowerSupply+0x70>
    	if (On_off == 0)
 8002aa8:	782b      	ldrb	r3, [r5, #0]
 8002aaa:	b9bb      	cbnz	r3, 8002adc <MenuPowerSupply+0x9c>
    		OUT_ON();
 8002aac:	f7ff ff9c 	bl	80029e8 <OUT_ON>
}
 8002ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OUTStateAfterPowerUpFunction();
 8002ab4:	f7ff bfae 	b.w	8002a14 <OUTStateAfterPowerUpFunction>
		PrintToLCD(itoa_koma(Current/10,2));
 8002ab8:	200a      	movs	r0, #10
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	2102      	movs	r1, #2
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	fb93 f0f0 	sdiv	r0, r3, r0
 8002ac4:	f7fe fc14 	bl	80012f0 <itoa_koma>
 8002ac8:	f7ff f81c 	bl	8001b04 <PrintToLCD>
		PrintToLCD("A     ");
 8002acc:	480c      	ldr	r0, [pc, #48]	; (8002b00 <MenuPowerSupply+0xc0>)
 8002ace:	e7dc      	b.n	8002a8a <MenuPowerSupply+0x4a>
		lcd_set_xy(14,0);
 8002ad0:	200e      	movs	r0, #14
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	f7fe ff96 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("ON ");
 8002ad8:	480a      	ldr	r0, [pc, #40]	; (8002b04 <MenuPowerSupply+0xc4>)
 8002ada:	e7e1      	b.n	8002aa0 <MenuPowerSupply+0x60>
    		OUT_OFF();
 8002adc:	f7ff fdaa 	bl	8002634 <OUT_OFF>
 8002ae0:	e7e6      	b.n	8002ab0 <MenuPowerSupply+0x70>
 8002ae2:	bf00      	nop
 8002ae4:	2000079c 	.word	0x2000079c
 8002ae8:	2000086c 	.word	0x2000086c
 8002aec:	08006198 	.word	0x08006198
 8002af0:	20000856 	.word	0x20000856
 8002af4:	08005f31 	.word	0x08005f31
 8002af8:	2000079e 	.word	0x2000079e
 8002afc:	0800619c 	.word	0x0800619c
 8002b00:	080061d9 	.word	0x080061d9
 8002b04:	080061a1 	.word	0x080061a1

08002b08 <MenuCalibration_CURRENT_Out>:
	EnterInMenu_Status=1;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <MenuCalibration_CURRENT_Out+0x5c>)
{
 8002b0c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8002b0e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002b10:	f7ff ff6a 	bl	80029e8 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent_x50++;
 8002b14:	2802      	cmp	r0, #2
 8002b16:	4c14      	ldr	r4, [pc, #80]	; (8002b68 <MenuCalibration_CURRENT_Out+0x60>)
 8002b18:	d11e      	bne.n	8002b58 <MenuCalibration_CURRENT_Out+0x50>
 8002b1a:	69a3      	ldr	r3, [r4, #24]
 8002b1c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x50--;
 8002b1e:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 8002b20:	2100      	movs	r1, #0
 8002b22:	4608      	mov	r0, r1
 8002b24:	f7fe ff6e 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent_x50));
 8002b28:	69a0      	ldr	r0, [r4, #24]
 8002b2a:	f7fe fb69 	bl	8001200 <itoa>
 8002b2e:	f7fe ffe9 	bl	8001b04 <PrintToLCD>
	PrintToLCD("   ");
 8002b32:	480e      	ldr	r0, [pc, #56]	; (8002b6c <MenuCalibration_CURRENT_Out+0x64>)
 8002b34:	f7fe ffe6 	bl	8001b04 <PrintToLCD>
	lcd_set_xy(0,1);
 8002b38:	2101      	movs	r1, #1
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7fe ff62 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <MenuCalibration_CURRENT_Out+0x68>)
 8002b42:	8818      	ldrh	r0, [r3, #0]
 8002b44:	b200      	sxth	r0, r0
 8002b46:	f7fe fb5b 	bl	8001200 <itoa>
 8002b4a:	f7fe ffdb 	bl	8001b04 <PrintToLCD>
}
 8002b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("mA  ");
 8002b52:	4808      	ldr	r0, [pc, #32]	; (8002b74 <MenuCalibration_CURRENT_Out+0x6c>)
 8002b54:	f7fe bfd6 	b.w	8001b04 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x50--;
 8002b58:	2801      	cmp	r0, #1
 8002b5a:	d1e1      	bne.n	8002b20 <MenuCalibration_CURRENT_Out+0x18>
 8002b5c:	69a3      	ldr	r3, [r4, #24]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	e7dd      	b.n	8002b1e <MenuCalibration_CURRENT_Out+0x16>
 8002b62:	bf00      	nop
 8002b64:	2000079c 	.word	0x2000079c
 8002b68:	20000004 	.word	0x20000004
 8002b6c:	080060d5 	.word	0x080060d5
 8002b70:	20000856 	.word	0x20000856
 8002b74:	080060ec 	.word	0x080060ec

08002b78 <MenuCalibration_VoltagePS>:
	EnterInMenu_Status=1;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <MenuCalibration_VoltagePS+0x5c>)
{
 8002b7c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8002b7e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002b80:	f7ff ff32 	bl	80029e8 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage++;
 8002b84:	2802      	cmp	r0, #2
 8002b86:	4c14      	ldr	r4, [pc, #80]	; (8002bd8 <MenuCalibration_VoltagePS+0x60>)
 8002b88:	d11f      	bne.n	8002bca <MenuCalibration_VoltagePS+0x52>
 8002b8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b8c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 8002b8e:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 8002b90:	2100      	movs	r1, #0
 8002b92:	4608      	mov	r0, r1
 8002b94:	f7fe ff36 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage));
 8002b98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b9a:	f7fe fb31 	bl	8001200 <itoa>
 8002b9e:	f7fe ffb1 	bl	8001b04 <PrintToLCD>
	PrintToLCD("   ");
 8002ba2:	480e      	ldr	r0, [pc, #56]	; (8002bdc <MenuCalibration_VoltagePS+0x64>)
 8002ba4:	f7fe ffae 	bl	8001b04 <PrintToLCD>
	lcd_set_xy(0,1);
 8002ba8:	2101      	movs	r1, #1
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fe ff2a 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_PS,2));
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <MenuCalibration_VoltagePS+0x68>)
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	8818      	ldrh	r0, [r3, #0]
 8002bb6:	b280      	uxth	r0, r0
 8002bb8:	f7fe fb9a 	bl	80012f0 <itoa_koma>
 8002bbc:	f7fe ffa2 	bl	8001b04 <PrintToLCD>
}
 8002bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002bc4:	4807      	ldr	r0, [pc, #28]	; (8002be4 <MenuCalibration_VoltagePS+0x6c>)
 8002bc6:	f7fe bf9d 	b.w	8001b04 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 8002bca:	2801      	cmp	r0, #1
 8002bcc:	d1e0      	bne.n	8002b90 <MenuCalibration_VoltagePS+0x18>
 8002bce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	e7dc      	b.n	8002b8e <MenuCalibration_VoltagePS+0x16>
 8002bd4:	2000079c 	.word	0x2000079c
 8002bd8:	20000004 	.word	0x20000004
 8002bdc:	080060d5 	.word	0x080060d5
 8002be0:	20000874 	.word	0x20000874
 8002be4:	08006198 	.word	0x08006198

08002be8 <MenuCalibration_VoltageOut>:
	EnterInMenu_Status=1;
 8002be8:	2201      	movs	r2, #1
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <MenuCalibration_VoltageOut+0x5c>)
{
 8002bec:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8002bee:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002bf0:	f7ff fefa 	bl	80029e8 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForU_OUT++;
 8002bf4:	2802      	cmp	r0, #2
 8002bf6:	4c14      	ldr	r4, [pc, #80]	; (8002c48 <MenuCalibration_VoltageOut+0x60>)
 8002bf8:	d11f      	bne.n	8002c3a <MenuCalibration_VoltageOut+0x52>
 8002bfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bfc:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_OUT--;
 8002bfe:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 8002c00:	2100      	movs	r1, #0
 8002c02:	4608      	mov	r0, r1
 8002c04:	f7fe fefe 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForU_OUT));
 8002c08:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c0a:	f7fe faf9 	bl	8001200 <itoa>
 8002c0e:	f7fe ff79 	bl	8001b04 <PrintToLCD>
	PrintToLCD("   ");
 8002c12:	480e      	ldr	r0, [pc, #56]	; (8002c4c <MenuCalibration_VoltageOut+0x64>)
 8002c14:	f7fe ff76 	bl	8001b04 <PrintToLCD>
	lcd_set_xy(0,1);
 8002c18:	2101      	movs	r1, #1
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7fe fef2 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <MenuCalibration_VoltageOut+0x68>)
 8002c22:	2102      	movs	r1, #2
 8002c24:	8818      	ldrh	r0, [r3, #0]
 8002c26:	b280      	uxth	r0, r0
 8002c28:	f7fe fb62 	bl	80012f0 <itoa_koma>
 8002c2c:	f7fe ff6a 	bl	8001b04 <PrintToLCD>
}
 8002c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002c34:	4807      	ldr	r0, [pc, #28]	; (8002c54 <MenuCalibration_VoltageOut+0x6c>)
 8002c36:	f7fe bf65 	b.w	8001b04 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_OUT--;
 8002c3a:	2801      	cmp	r0, #1
 8002c3c:	d1e0      	bne.n	8002c00 <MenuCalibration_VoltageOut+0x18>
 8002c3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c40:	3b01      	subs	r3, #1
 8002c42:	e7dc      	b.n	8002bfe <MenuCalibration_VoltageOut+0x16>
 8002c44:	2000079c 	.word	0x2000079c
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	080060d5 	.word	0x080060d5
 8002c50:	2000086c 	.word	0x2000086c
 8002c54:	08006198 	.word	0x08006198

08002c58 <MenuCalibration_VoltageIn>:
	EnterInMenu_Status=1;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <MenuCalibration_VoltageIn+0x5c>)
{
 8002c5c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8002c5e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002c60:	f7ff fec2 	bl	80029e8 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForU_IN++;
 8002c64:	2802      	cmp	r0, #2
 8002c66:	4c14      	ldr	r4, [pc, #80]	; (8002cb8 <MenuCalibration_VoltageIn+0x60>)
 8002c68:	d11f      	bne.n	8002caa <MenuCalibration_VoltageIn+0x52>
 8002c6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c6c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_IN--;
 8002c6e:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 8002c70:	2100      	movs	r1, #0
 8002c72:	4608      	mov	r0, r1
 8002c74:	f7fe fec6 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForU_IN));
 8002c78:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c7a:	f7fe fac1 	bl	8001200 <itoa>
 8002c7e:	f7fe ff41 	bl	8001b04 <PrintToLCD>
	PrintToLCD("   ");
 8002c82:	480e      	ldr	r0, [pc, #56]	; (8002cbc <MenuCalibration_VoltageIn+0x64>)
 8002c84:	f7fe ff3e 	bl	8001b04 <PrintToLCD>
	lcd_set_xy(0,1);
 8002c88:	2101      	movs	r1, #1
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fe feba 	bl	8001a04 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_IN,2));
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <MenuCalibration_VoltageIn+0x68>)
 8002c92:	2102      	movs	r1, #2
 8002c94:	8818      	ldrh	r0, [r3, #0]
 8002c96:	b280      	uxth	r0, r0
 8002c98:	f7fe fb2a 	bl	80012f0 <itoa_koma>
 8002c9c:	f7fe ff32 	bl	8001b04 <PrintToLCD>
}
 8002ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002ca4:	4807      	ldr	r0, [pc, #28]	; (8002cc4 <MenuCalibration_VoltageIn+0x6c>)
 8002ca6:	f7fe bf2d 	b.w	8001b04 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_IN--;
 8002caa:	2801      	cmp	r0, #1
 8002cac:	d1e0      	bne.n	8002c70 <MenuCalibration_VoltageIn+0x18>
 8002cae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	e7dc      	b.n	8002c6e <MenuCalibration_VoltageIn+0x16>
 8002cb4:	2000079c 	.word	0x2000079c
 8002cb8:	20000004 	.word	0x20000004
 8002cbc:	080060d5 	.word	0x080060d5
 8002cc0:	20000854 	.word	0x20000854
 8002cc4:	08006198 	.word	0x08006198

08002cc8 <MenuCalibration_Resist_Comp_5V1A>:
		EnterInMenu_Status=1;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <MenuCalibration_Resist_Comp_5V1A+0xac>)
{
 8002ccc:	b570      	push	{r4, r5, r6, lr}
		EnterInMenu_Status=1;
 8002cce:	701a      	strb	r2, [r3, #0]
		OUT_ON();
 8002cd0:	f7ff fe8a 	bl	80029e8 <OUT_ON>
		if (key == KEY_NEXT) ResistanceComp_Voltage++;
 8002cd4:	2802      	cmp	r0, #2
 8002cd6:	4e28      	ldr	r6, [pc, #160]	; (8002d78 <MenuCalibration_Resist_Comp_5V1A+0xb0>)
 8002cd8:	d142      	bne.n	8002d60 <MenuCalibration_Resist_Comp_5V1A+0x98>
 8002cda:	8833      	ldrh	r3, [r6, #0]
 8002cdc:	3301      	adds	r3, #1
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8002cde:	8033      	strh	r3, [r6, #0]
		lcd_set_xy(0,0);
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4608      	mov	r0, r1
 8002ce4:	f7fe fe8e 	bl	8001a04 <lcd_set_xy>
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8002ce8:	2102      	movs	r1, #2
 8002cea:	8830      	ldrh	r0, [r6, #0]
 8002cec:	f7fe fb00 	bl	80012f0 <itoa_koma>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002cf0:	4d22      	ldr	r5, [pc, #136]	; (8002d7c <MenuCalibration_Resist_Comp_5V1A+0xb4>)
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002cf2:	4c23      	ldr	r4, [pc, #140]	; (8002d80 <MenuCalibration_Resist_Comp_5V1A+0xb8>)
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8002cf4:	f7fe ff06 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V ");
 8002cf8:	4822      	ldr	r0, [pc, #136]	; (8002d84 <MenuCalibration_Resist_Comp_5V1A+0xbc>)
 8002cfa:	f7fe ff03 	bl	8001b04 <PrintToLCD>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002cfe:	8828      	ldrh	r0, [r5, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002d00:	8823      	ldrh	r3, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002d02:	b280      	uxth	r0, r0
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002d04:	b21b      	sxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	dd2f      	ble.n	8002d6a <MenuCalibration_Resist_Comp_5V1A+0xa2>
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002d0a:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002d0e:	8833      	ldrh	r3, [r6, #0]
 8002d10:	1ac0      	subs	r0, r0, r3
 8002d12:	b200      	sxth	r0, r0
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002d14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8002d18:	4350      	muls	r0, r2
 8002d1a:	8823      	ldrh	r3, [r4, #0]
 8002d1c:	b21b      	sxth	r3, r3
 8002d1e:	fb90 f0f3 	sdiv	r0, r0, r3
 8002d22:	4e19      	ldr	r6, [pc, #100]	; (8002d88 <MenuCalibration_Resist_Comp_5V1A+0xc0>)
 8002d24:	6430      	str	r0, [r6, #64]	; 0x40
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 8002d26:	f7fe fa6b 	bl	8001200 <itoa>
 8002d2a:	f7fe feeb 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mOm       ");
 8002d2e:	4817      	ldr	r0, [pc, #92]	; (8002d8c <MenuCalibration_Resist_Comp_5V1A+0xc4>)
 8002d30:	f7fe fee8 	bl	8001b04 <PrintToLCD>
		Delta = U_PS - U_OUT_ForSetResistance;
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <MenuCalibration_Resist_Comp_5V1A+0xc8>)
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	882a      	ldrh	r2, [r5, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002d3a:	8821      	ldrh	r1, [r4, #0]
		Delta = U_PS - U_OUT_ForSetResistance;
 8002d3c:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002d3e:	b209      	sxth	r1, r1
 8002d40:	2900      	cmp	r1, #0
		Delta = U_PS - U_OUT_ForSetResistance;
 8002d42:	b292      	uxth	r2, r2
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002d44:	dd13      	ble.n	8002d6e <MenuCalibration_Resist_Comp_5V1A+0xa6>
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002d46:	f242 7110 	movw	r1, #10000	; 0x2710
		Delta = U_PS - U_OUT_ForSetResistance;
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002d4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002d52:	434b      	muls	r3, r1
 8002d54:	8822      	ldrh	r2, [r4, #0]
 8002d56:	b212      	sxth	r2, r2
 8002d58:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d5c:	64b3      	str	r3, [r6, #72]	; 0x48
}
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8002d60:	2801      	cmp	r0, #1
 8002d62:	d1bd      	bne.n	8002ce0 <MenuCalibration_Resist_Comp_5V1A+0x18>
 8002d64:	8833      	ldrh	r3, [r6, #0]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	e7b9      	b.n	8002cde <MenuCalibration_Resist_Comp_5V1A+0x16>
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002d6a:	2046      	movs	r0, #70	; 0x46
 8002d6c:	e7d9      	b.n	8002d22 <MenuCalibration_Resist_Comp_5V1A+0x5a>
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002d6e:	230a      	movs	r3, #10
 8002d70:	e7f4      	b.n	8002d5c <MenuCalibration_Resist_Comp_5V1A+0x94>
 8002d72:	bf00      	nop
 8002d74:	2000079c 	.word	0x2000079c
 8002d78:	20000278 	.word	0x20000278
 8002d7c:	200002b2 	.word	0x200002b2
 8002d80:	20000856 	.word	0x20000856
 8002d84:	08005f2e 	.word	0x08005f2e
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	080061a5 	.word	0x080061a5
 8002d90:	20000874 	.word	0x20000874

08002d94 <MenuBatterySimilation>:
	lcd_set_xy(0,0);
 8002d94:	2100      	movs	r1, #0
{
 8002d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 8002d9a:	2501      	movs	r5, #1
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <MenuBatterySimilation+0xb8>)
	if (On_off == 0)
 8002d9e:	4e2c      	ldr	r6, [pc, #176]	; (8002e50 <MenuBatterySimilation+0xbc>)
{
 8002da0:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002da2:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8002da4:	701d      	strb	r5, [r3, #0]
	lcd_set_xy(0,0);
 8002da6:	f7fe fe2d 	bl	8001a04 <lcd_set_xy>
	if (On_off == 0)
 8002daa:	7833      	ldrb	r3, [r6, #0]
 8002dac:	4f29      	ldr	r7, [pc, #164]	; (8002e54 <MenuBatterySimilation+0xc0>)
 8002dae:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002db2:	bb33      	cbnz	r3, 8002e02 <MenuBatterySimilation+0x6e>
		PrintToLCD(itoa_koma(U_PS,2));
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <MenuBatterySimilation+0xc4>)
 8002db6:	2102      	movs	r1, #2
 8002db8:	8818      	ldrh	r0, [r3, #0]
 8002dba:	b280      	uxth	r0, r0
 8002dbc:	f7fe fa98 	bl	80012f0 <itoa_koma>
 8002dc0:	f7fe fea0 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V  ");
 8002dc4:	4825      	ldr	r0, [pc, #148]	; (8002e5c <MenuBatterySimilation+0xc8>)
 8002dc6:	f7fe fe9d 	bl	8001b04 <PrintToLCD>
		lcd_set_xy(7,0);
 8002dca:	4641      	mov	r1, r8
 8002dcc:	2007      	movs	r0, #7
 8002dce:	f7fe fe19 	bl	8001a04 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002dd2:	8838      	ldrh	r0, [r7, #0]
 8002dd4:	b200      	sxth	r0, r0
 8002dd6:	f7fe fa13 	bl	8001200 <itoa>
 8002dda:	f7fe fe93 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mA   ");
 8002dde:	4820      	ldr	r0, [pc, #128]	; (8002e60 <MenuBatterySimilation+0xcc>)
 8002de0:	f7fe fe90 	bl	8001b04 <PrintToLCD>
		lcd_set_xy(5,1);
 8002de4:	2005      	movs	r0, #5
 8002de6:	4629      	mov	r1, r5
 8002de8:	f7fe fe0c 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("OFF ");
 8002dec:	481d      	ldr	r0, [pc, #116]	; (8002e64 <MenuBatterySimilation+0xd0>)
		PrintToLCD("ON ");
 8002dee:	f7fe fe89 	bl	8001b04 <PrintToLCD>
    if (key == KEY_NEXT)
 8002df2:	2c02      	cmp	r4, #2
 8002df4:	d127      	bne.n	8002e46 <MenuBatterySimilation+0xb2>
    	if (On_off == 0)
 8002df6:	7833      	ldrb	r3, [r6, #0]
 8002df8:	bb0b      	cbnz	r3, 8002e3e <MenuBatterySimilation+0xaa>
}
 8002dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		OUT_ON();
 8002dfe:	f7ff bdf3 	b.w	80029e8 <OUT_ON>
		PrintToLCD(itoa_koma(U_OUT,2));
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <MenuBatterySimilation+0xd4>)
 8002e04:	2102      	movs	r1, #2
 8002e06:	8818      	ldrh	r0, [r3, #0]
 8002e08:	b280      	uxth	r0, r0
 8002e0a:	f7fe fa71 	bl	80012f0 <itoa_koma>
 8002e0e:	f7fe fe79 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V  ");
 8002e12:	4812      	ldr	r0, [pc, #72]	; (8002e5c <MenuBatterySimilation+0xc8>)
 8002e14:	f7fe fe76 	bl	8001b04 <PrintToLCD>
		lcd_set_xy(7,0);
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2007      	movs	r0, #7
 8002e1c:	f7fe fdf2 	bl	8001a04 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002e20:	8838      	ldrh	r0, [r7, #0]
 8002e22:	b200      	sxth	r0, r0
 8002e24:	f7fe f9ec 	bl	8001200 <itoa>
 8002e28:	f7fe fe6c 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mA    ");
 8002e2c:	480f      	ldr	r0, [pc, #60]	; (8002e6c <MenuBatterySimilation+0xd8>)
 8002e2e:	f7fe fe69 	bl	8001b04 <PrintToLCD>
		lcd_set_xy(6,1);
 8002e32:	2006      	movs	r0, #6
 8002e34:	4629      	mov	r1, r5
 8002e36:	f7fe fde5 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("ON ");
 8002e3a:	480d      	ldr	r0, [pc, #52]	; (8002e70 <MenuBatterySimilation+0xdc>)
 8002e3c:	e7d7      	b.n	8002dee <MenuBatterySimilation+0x5a>
}
 8002e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		OUT_OFF();
 8002e42:	f7ff bbf7 	b.w	8002634 <OUT_OFF>
}
 8002e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000079c 	.word	0x2000079c
 8002e50:	2000079e 	.word	0x2000079e
 8002e54:	20000856 	.word	0x20000856
 8002e58:	20000874 	.word	0x20000874
 8002e5c:	08006198 	.word	0x08006198
 8002e60:	080061b0 	.word	0x080061b0
 8002e64:	0800619c 	.word	0x0800619c
 8002e68:	2000086c 	.word	0x2000086c
 8002e6c:	08005f31 	.word	0x08005f31
 8002e70:	080061a1 	.word	0x080061a1

08002e74 <charge>:
{
 8002e74:	b508      	push	{r3, lr}
	OUT_ON();
 8002e76:	f7ff fdb7 	bl	80029e8 <OUT_ON>
}
 8002e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 8002e7e:	2032      	movs	r0, #50	; 0x32
 8002e80:	f7fe b8a2 	b.w	8000fc8 <delay_ms>

08002e84 <MenuChargeCC_CV>:
{
 8002e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	EnterInMenu_Status = 1;
 8002e88:	2301      	movs	r3, #1
	if (InitiStatus==0)
 8002e8a:	4f9a      	ldr	r7, [pc, #616]	; (80030f4 <MenuChargeCC_CV+0x270>)
	EnterInMenu_Status = 1;
 8002e8c:	f8df 9268 	ldr.w	r9, [pc, #616]	; 80030f8 <MenuChargeCC_CV+0x274>
	if (InitiStatus==0)
 8002e90:	783c      	ldrb	r4, [r7, #0]
{
 8002e92:	4682      	mov	sl, r0
 8002e94:	4d99      	ldr	r5, [pc, #612]	; (80030fc <MenuChargeCC_CV+0x278>)
 8002e96:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8003100 <MenuChargeCC_CV+0x27c>
 8002e9a:	4e9a      	ldr	r6, [pc, #616]	; (8003104 <MenuChargeCC_CV+0x280>)
	EnterInMenu_Status = 1;
 8002e9c:	f889 3000 	strb.w	r3, [r9]
	if (InitiStatus==0)
 8002ea0:	bb34      	cbnz	r4, 8002ef0 <MenuChargeCC_CV+0x6c>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8002ea2:	4b99      	ldr	r3, [pc, #612]	; (8003108 <MenuChargeCC_CV+0x284>)
 8002ea4:	881a      	ldrh	r2, [r3, #0]
 8002ea6:	4b99      	ldr	r3, [pc, #612]	; (800310c <MenuChargeCC_CV+0x288>)
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	3305      	adds	r3, #5
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d215      	bcs.n	8002ede <MenuChargeCC_CV+0x5a>
			lcd_set_xy(0,0);
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	f7fe fda5 	bl	8001a04 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8002eba:	4895      	ldr	r0, [pc, #596]	; (8003110 <MenuChargeCC_CV+0x28c>)
 8002ebc:	f7fe fe22 	bl	8001b04 <PrintToLCD>
			delay_ms(2000);
 8002ec0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ec4:	f7fe f880 	bl	8000fc8 <delay_ms>
			lcd_set_xy(0,0);
 8002ec8:	4621      	mov	r1, r4
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7fe fd9a 	bl	8001a04 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8002ed0:	4890      	ldr	r0, [pc, #576]	; (8003114 <MenuChargeCC_CV+0x290>)
 8002ed2:	f7fe fe17 	bl	8001b04 <PrintToLCD>
			delay_ms(3000);
 8002ed6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002eda:	f7fe f875 	bl	8000fc8 <delay_ms>
		ChargeStatusForTimer = 0;
 8002ede:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 8002ee0:	4a8d      	ldr	r2, [pc, #564]	; (8003118 <MenuChargeCC_CV+0x294>)
		ChargeStatusForTimer = 0;
 8002ee2:	702b      	strb	r3, [r5, #0]
		DisChargeStatusForTimer = 0;
 8002ee4:	f888 3000 	strb.w	r3, [r8]
		BatteryCapacityCharge = 0;
 8002ee8:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 8002eea:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 8002eec:	6033      	str	r3, [r6, #0]
		InitiStatus = 1;
 8002eee:	703a      	strb	r2, [r7, #0]
	if ((ChargeTimeSec > ChargeDurationSec)|| (U_OUT> SettingsData.MaxVoltage))
 8002ef0:	4b8a      	ldr	r3, [pc, #552]	; (800311c <MenuChargeCC_CV+0x298>)
 8002ef2:	6832      	ldr	r2, [r6, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d806      	bhi.n	8002f08 <MenuChargeCC_CV+0x84>
 8002efa:	4b89      	ldr	r3, [pc, #548]	; (8003120 <MenuChargeCC_CV+0x29c>)
 8002efc:	4a83      	ldr	r2, [pc, #524]	; (800310c <MenuChargeCC_CV+0x288>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	6a12      	ldr	r2, [r2, #32]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d903      	bls.n	8002f10 <MenuChargeCC_CV+0x8c>
	OUT_OFF();
 8002f08:	f7ff fb94 	bl	8002634 <OUT_OFF>
		ChargeStatusForTimer = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	702b      	strb	r3, [r5, #0]
    OUTStateAfterPowerUpFunction();
 8002f10:	f7ff fd80 	bl	8002a14 <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 8002f14:	f1ba 0f02 	cmp.w	sl, #2
 8002f18:	4c82      	ldr	r4, [pc, #520]	; (8003124 <MenuChargeCC_CV+0x2a0>)
 8002f1a:	d16c      	bne.n	8002ff6 <MenuChargeCC_CV+0x172>
		if (On_off == 0)
 8002f1c:	4b82      	ldr	r3, [pc, #520]	; (8003128 <MenuChargeCC_CV+0x2a4>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d164      	bne.n	8002fee <MenuChargeCC_CV+0x16a>
			charge();
 8002f24:	f7ff ffa6 	bl	8002e74 <charge>
			ChargeStatusForTimer = 1;
 8002f28:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 8002f2a:	702b      	strb	r3, [r5, #0]
	if(CountShow == 0)
 8002f2c:	f994 1000 	ldrsb.w	r1, [r4]
 8002f30:	2900      	cmp	r1, #0
 8002f32:	d137      	bne.n	8002fa4 <MenuChargeCC_CV+0x120>
		if (On_off ==0)
 8002f34:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8003128 <MenuChargeCC_CV+0x2a4>
		lcd_set_xy(0,0);
 8002f38:	4608      	mov	r0, r1
 8002f3a:	f7fe fd63 	bl	8001a04 <lcd_set_xy>
		if (On_off ==0)
 8002f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f42:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8003120 <MenuChargeCC_CV+0x29c>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f040 80b5 	bne.w	80030b6 <MenuChargeCC_CV+0x232>
			PrintToLCD(itoa_koma(U_PS,2));
 8002f4c:	4b6e      	ldr	r3, [pc, #440]	; (8003108 <MenuChargeCC_CV+0x284>)
 8002f4e:	2102      	movs	r1, #2
 8002f50:	8818      	ldrh	r0, [r3, #0]
 8002f52:	b280      	uxth	r0, r0
 8002f54:	f7fe f9cc 	bl	80012f0 <itoa_koma>
 8002f58:	f7fe fdd4 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V ");
 8002f5c:	4873      	ldr	r0, [pc, #460]	; (800312c <MenuChargeCC_CV+0x2a8>)
 8002f5e:	f7fe fdd1 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 8002f62:	f8bb 0000 	ldrh.w	r0, [fp]
 8002f66:	2102      	movs	r1, #2
 8002f68:	b280      	uxth	r0, r0
 8002f6a:	f7fe f9c1 	bl	80012f0 <itoa_koma>
 8002f6e:	f7fe fdc9 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V     ");
 8002f72:	486f      	ldr	r0, [pc, #444]	; (8003130 <MenuChargeCC_CV+0x2ac>)
			PrintToLCD("mA     ");
 8002f74:	f7fe fdc6 	bl	8001b04 <PrintToLCD>
		if (On_off ==0)
 8002f78:	f89a 3000 	ldrb.w	r3, [sl]
			lcd_set_xy(7,1);
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	2007      	movs	r0, #7
 8002f80:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8003134 <MenuChargeCC_CV+0x2b0>
		if (On_off ==0)
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f040 80aa 	bne.w	80030de <MenuChargeCC_CV+0x25a>
			lcd_set_xy(7,1);
 8002f8a:	f7fe fd3b 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(0,1);
 8002f8e:	2101      	movs	r1, #1
 8002f90:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 8002f92:	f7fe fd5e 	bl	8001a52 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8002f96:	f89a 3000 	ldrb.w	r3, [sl]
 8002f9a:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8002f9c:	bf84      	itt	hi
 8002f9e:	2300      	movhi	r3, #0
 8002fa0:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 8002fa4:	f994 a000 	ldrsb.w	sl, [r4]
 8002fa8:	f1ba 0f01 	cmp.w	sl, #1
 8002fac:	d12f      	bne.n	800300e <MenuChargeCC_CV+0x18a>
		lcd_set_xy(0,0);
 8002fae:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8002fb0:	f8df b158 	ldr.w	fp, [pc, #344]	; 800310c <MenuChargeCC_CV+0x288>
		lcd_set_xy(0,0);
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	f7fe fd25 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("T:");
 8002fba:	485f      	ldr	r0, [pc, #380]	; (8003138 <MenuChargeCC_CV+0x2b4>)
 8002fbc:	f7fe fda2 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8002fc0:	f8db 0010 	ldr.w	r0, [fp, #16]
 8002fc4:	f7fe f91c 	bl	8001200 <itoa>
 8002fc8:	f7fe fd9c 	bl	8001b04 <PrintToLCD>
		PrintToLCD("h MaxV:");
 8002fcc:	485b      	ldr	r0, [pc, #364]	; (800313c <MenuChargeCC_CV+0x2b8>)
 8002fce:	f7fe fd99 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	f8db 0020 	ldr.w	r0, [fp, #32]
 8002fd8:	4651      	mov	r1, sl
 8002fda:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fde:	f7fe f987 	bl	80012f0 <itoa_koma>
 8002fe2:	f7fe fd8f 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V   ");
 8002fe6:	4856      	ldr	r0, [pc, #344]	; (8003140 <MenuChargeCC_CV+0x2bc>)
 8002fe8:	f7fe fd8c 	bl	8001b04 <PrintToLCD>
 8002fec:	e00f      	b.n	800300e <MenuChargeCC_CV+0x18a>
	OUT_OFF();
 8002fee:	f7ff fb21 	bl	8002634 <OUT_OFF>
			ChargeStatusForTimer = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e799      	b.n	8002f2a <MenuChargeCC_CV+0xa6>
	if (key == KEY_BACK)
 8002ff6:	f1ba 0f01 	cmp.w	sl, #1
 8002ffa:	d197      	bne.n	8002f2c <MenuChargeCC_CV+0xa8>
		CountShow--;
 8002ffc:	7823      	ldrb	r3, [r4, #0]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM0-1;
 8003002:	2b00      	cmp	r3, #0
 8003004:	db01      	blt.n	800300a <MenuChargeCC_CV+0x186>
		CountShow--;
 8003006:	7023      	strb	r3, [r4, #0]
 8003008:	e790      	b.n	8002f2c <MenuChargeCC_CV+0xa8>
		if (CountShow<0) CountShow=MAXITEM0-1;
 800300a:	2302      	movs	r3, #2
 800300c:	7023      	strb	r3, [r4, #0]
	if(CountShow == 2)
 800300e:	f994 3000 	ldrsb.w	r3, [r4]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d11a      	bne.n	800304c <MenuChargeCC_CV+0x1c8>
		lcd_set_xy(0,0);
 8003016:	2100      	movs	r1, #0
 8003018:	4608      	mov	r0, r1
 800301a:	f7fe fcf3 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("C ");
 800301e:	4849      	ldr	r0, [pc, #292]	; (8003144 <MenuChargeCC_CV+0x2c0>)
 8003020:	f7fe fd70 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8003024:	4b3c      	ldr	r3, [pc, #240]	; (8003118 <MenuChargeCC_CV+0x294>)
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800302c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003030:	f7fe f8e6 	bl	8001200 <itoa>
 8003034:	f7fe fd66 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mAh     ");
 8003038:	4843      	ldr	r0, [pc, #268]	; (8003148 <MenuChargeCC_CV+0x2c4>)
 800303a:	f7fe fd63 	bl	8001b04 <PrintToLCD>
		lcd_set_xy(3,1);
 800303e:	2003      	movs	r0, #3
 8003040:	2101      	movs	r1, #1
 8003042:	f7fe fcdf 	bl	8001a04 <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 8003046:	6830      	ldr	r0, [r6, #0]
 8003048:	f7ff fabe 	bl	80025c8 <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 800304c:	483f      	ldr	r0, [pc, #252]	; (800314c <MenuChargeCC_CV+0x2c8>)
 800304e:	f002 f915 	bl	800527c <printToBufferWithoutEndUART1>
 8003052:	7839      	ldrb	r1, [r7, #0]
 8003054:	2200      	movs	r2, #0
 8003056:	483e      	ldr	r0, [pc, #248]	; (8003150 <MenuChargeCC_CV+0x2cc>)
 8003058:	f002 f94e 	bl	80052f8 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 800305c:	483b      	ldr	r0, [pc, #236]	; (800314c <MenuChargeCC_CV+0x2c8>)
 800305e:	f002 f90d 	bl	800527c <printToBufferWithoutEndUART1>
 8003062:	f899 1000 	ldrb.w	r1, [r9]
 8003066:	2200      	movs	r2, #0
 8003068:	483a      	ldr	r0, [pc, #232]	; (8003154 <MenuChargeCC_CV+0x2d0>)
 800306a:	f002 f945 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 800306e:	4837      	ldr	r0, [pc, #220]	; (800314c <MenuChargeCC_CV+0x2c8>)
 8003070:	f002 f904 	bl	800527c <printToBufferWithoutEndUART1>
 8003074:	7829      	ldrb	r1, [r5, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	4837      	ldr	r0, [pc, #220]	; (8003158 <MenuChargeCC_CV+0x2d4>)
 800307a:	f002 f93d 	bl	80052f8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 800307e:	4833      	ldr	r0, [pc, #204]	; (800314c <MenuChargeCC_CV+0x2c8>)
 8003080:	f002 f8fc 	bl	800527c <printToBufferWithoutEndUART1>
 8003084:	6831      	ldr	r1, [r6, #0]
 8003086:	2200      	movs	r2, #0
 8003088:	4834      	ldr	r0, [pc, #208]	; (800315c <MenuChargeCC_CV+0x2d8>)
 800308a:	f002 f935 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 800308e:	482f      	ldr	r0, [pc, #188]	; (800314c <MenuChargeCC_CV+0x2c8>)
 8003090:	f002 f8f4 	bl	800527c <printToBufferWithoutEndUART1>
 8003094:	f898 1000 	ldrb.w	r1, [r8]
 8003098:	2200      	movs	r2, #0
 800309a:	4831      	ldr	r0, [pc, #196]	; (8003160 <MenuChargeCC_CV+0x2dc>)
 800309c:	f002 f92c 	bl	80052f8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80030a0:	482a      	ldr	r0, [pc, #168]	; (800314c <MenuChargeCC_CV+0x2c8>)
 80030a2:	f002 f8eb 	bl	800527c <printToBufferWithoutEndUART1>
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <MenuChargeCC_CV+0x2e0>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	6819      	ldr	r1, [r3, #0]
 80030ac:	482e      	ldr	r0, [pc, #184]	; (8003168 <MenuChargeCC_CV+0x2e4>)
}
 80030ae:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80030b2:	f002 b921 	b.w	80052f8 <printToBufferUART1D>
			PrintToLCD(itoa_koma(U_OUT,2));
 80030b6:	f8bb 0000 	ldrh.w	r0, [fp]
 80030ba:	2102      	movs	r1, #2
 80030bc:	b280      	uxth	r0, r0
 80030be:	f7fe f917 	bl	80012f0 <itoa_koma>
 80030c2:	f7fe fd1f 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V ");
 80030c6:	4819      	ldr	r0, [pc, #100]	; (800312c <MenuChargeCC_CV+0x2a8>)
 80030c8:	f7fe fd1c 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(Current));
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <MenuChargeCC_CV+0x2e8>)
 80030ce:	8818      	ldrh	r0, [r3, #0]
 80030d0:	b200      	sxth	r0, r0
 80030d2:	f7fe f895 	bl	8001200 <itoa>
 80030d6:	f7fe fd15 	bl	8001b04 <PrintToLCD>
			PrintToLCD("mA     ");
 80030da:	4825      	ldr	r0, [pc, #148]	; (8003170 <MenuChargeCC_CV+0x2ec>)
 80030dc:	e74a      	b.n	8002f74 <MenuChargeCC_CV+0xf0>
			if (Blink_message_counter<=5)
 80030de:	f89a 3000 	ldrb.w	r3, [sl]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	f67f af51 	bls.w	8002f8a <MenuChargeCC_CV+0x106>
					lcd_set_xy(7,1);
 80030e8:	f7fe fc8c 	bl	8001a04 <lcd_set_xy>
					LcdOutbyNumber(1,1);
 80030ec:	2101      	movs	r1, #1
 80030ee:	4608      	mov	r0, r1
 80030f0:	e74f      	b.n	8002f92 <MenuChargeCC_CV+0x10e>
 80030f2:	bf00      	nop
 80030f4:	2000079d 	.word	0x2000079d
 80030f8:	2000079c 	.word	0x2000079c
 80030fc:	20000787 	.word	0x20000787
 8003100:	20000790 	.word	0x20000790
 8003104:	20000788 	.word	0x20000788
 8003108:	20000874 	.word	0x20000874
 800310c:	20000154 	.word	0x20000154
 8003110:	080061b6 	.word	0x080061b6
 8003114:	080061c7 	.word	0x080061c7
 8003118:	20000778 	.word	0x20000778
 800311c:	20000a18 	.word	0x20000a18
 8003120:	2000086c 	.word	0x2000086c
 8003124:	2000078d 	.word	0x2000078d
 8003128:	2000079e 	.word	0x2000079e
 800312c:	08005f2e 	.word	0x08005f2e
 8003130:	08005f1b 	.word	0x08005f1b
 8003134:	20000785 	.word	0x20000785
 8003138:	080061e0 	.word	0x080061e0
 800313c:	080061e3 	.word	0x080061e3
 8003140:	08005ed9 	.word	0x08005ed9
 8003144:	080061eb 	.word	0x080061eb
 8003148:	08006113 	.word	0x08006113
 800314c:	0800593c 	.word	0x0800593c
 8003150:	08006125 	.word	0x08006125
 8003154:	08006133 	.word	0x08006133
 8003158:	08006148 	.word	0x08006148
 800315c:	0800615d 	.word	0x0800615d
 8003160:	0800616d 	.word	0x0800616d
 8003164:	20000794 	.word	0x20000794
 8003168:	08006185 	.word	0x08006185
 800316c:	20000856 	.word	0x20000856
 8003170:	080061d8 	.word	0x080061d8

08003174 <MenuChargeAdapt>:
{
 8003174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	EnterInMenu_Status = 1;
 8003178:	2301      	movs	r3, #1
	if (InitiStatus==0)
 800317a:	4fbd      	ldr	r7, [pc, #756]	; (8003470 <MenuChargeAdapt+0x2fc>)
	EnterInMenu_Status = 1;
 800317c:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8003474 <MenuChargeAdapt+0x300>
	if (InitiStatus==0)
 8003180:	783d      	ldrb	r5, [r7, #0]
{
 8003182:	4682      	mov	sl, r0
 8003184:	4cbc      	ldr	r4, [pc, #752]	; (8003478 <MenuChargeAdapt+0x304>)
 8003186:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 800347c <MenuChargeAdapt+0x308>
 800318a:	4ebd      	ldr	r6, [pc, #756]	; (8003480 <MenuChargeAdapt+0x30c>)
	EnterInMenu_Status = 1;
 800318c:	f889 3000 	strb.w	r3, [r9]
	if (InitiStatus==0)
 8003190:	bb35      	cbnz	r5, 80031e0 <MenuChargeAdapt+0x6c>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003192:	4bbc      	ldr	r3, [pc, #752]	; (8003484 <MenuChargeAdapt+0x310>)
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	4bbc      	ldr	r3, [pc, #752]	; (8003488 <MenuChargeAdapt+0x314>)
 8003198:	b292      	uxth	r2, r2
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	3305      	adds	r3, #5
 800319e:	429a      	cmp	r2, r3
 80031a0:	d215      	bcs.n	80031ce <MenuChargeAdapt+0x5a>
			lcd_set_xy(0,0);
 80031a2:	4629      	mov	r1, r5
 80031a4:	4628      	mov	r0, r5
 80031a6:	f7fe fc2d 	bl	8001a04 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 80031aa:	48b8      	ldr	r0, [pc, #736]	; (800348c <MenuChargeAdapt+0x318>)
 80031ac:	f7fe fcaa 	bl	8001b04 <PrintToLCD>
			delay_ms(2000);
 80031b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031b4:	f7fd ff08 	bl	8000fc8 <delay_ms>
			lcd_set_xy(0,0);
 80031b8:	4629      	mov	r1, r5
 80031ba:	4628      	mov	r0, r5
 80031bc:	f7fe fc22 	bl	8001a04 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 80031c0:	48b3      	ldr	r0, [pc, #716]	; (8003490 <MenuChargeAdapt+0x31c>)
 80031c2:	f7fe fc9f 	bl	8001b04 <PrintToLCD>
			delay_ms(3000);
 80031c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80031ca:	f7fd fefd 	bl	8000fc8 <delay_ms>
		ChargeStatusForTimer = 0;
 80031ce:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 80031d0:	4ab0      	ldr	r2, [pc, #704]	; (8003494 <MenuChargeAdapt+0x320>)
		ChargeStatusForTimer = 0;
 80031d2:	7023      	strb	r3, [r4, #0]
		DisChargeStatusForTimer = 0;
 80031d4:	f888 3000 	strb.w	r3, [r8]
		BatteryCapacityCharge = 0;
 80031d8:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 80031da:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 80031dc:	6033      	str	r3, [r6, #0]
		InitiStatus = 1;
 80031de:	703a      	strb	r2, [r7, #0]
	if (ChargeTimeSec > ChargeDurationSec)
 80031e0:	4bad      	ldr	r3, [pc, #692]	; (8003498 <MenuChargeAdapt+0x324>)
 80031e2:	6832      	ldr	r2, [r6, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d973      	bls.n	80032d2 <MenuChargeAdapt+0x15e>
	OUT_OFF();
 80031ea:	f7ff fa23 	bl	8002634 <OUT_OFF>
			ChargeStatusForTimer = 0;
 80031ee:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 80031f0:	7023      	strb	r3, [r4, #0]
    OUTStateAfterPowerUpFunction();
 80031f2:	f7ff fc0f 	bl	8002a14 <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 80031f6:	f1ba 0f02 	cmp.w	sl, #2
 80031fa:	4da8      	ldr	r5, [pc, #672]	; (800349c <MenuChargeAdapt+0x328>)
 80031fc:	f040 8083 	bne.w	8003306 <MenuChargeAdapt+0x192>
		if (On_off == 0)
 8003200:	4ba7      	ldr	r3, [pc, #668]	; (80034a0 <MenuChargeAdapt+0x32c>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d17a      	bne.n	80032fe <MenuChargeAdapt+0x18a>
			charge();
 8003208:	f7ff fe34 	bl	8002e74 <charge>
			ChargeStatusForTimer = 1;
 800320c:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 800320e:	7023      	strb	r3, [r4, #0]
	if(CountShow == 0)
 8003210:	f995 1000 	ldrsb.w	r1, [r5]
 8003214:	2900      	cmp	r1, #0
 8003216:	d137      	bne.n	8003288 <MenuChargeAdapt+0x114>
		if (On_off ==0)
 8003218:	f8df a284 	ldr.w	sl, [pc, #644]	; 80034a0 <MenuChargeAdapt+0x32c>
		lcd_set_xy(0,0);
 800321c:	4608      	mov	r0, r1
 800321e:	f7fe fbf1 	bl	8001a04 <lcd_set_xy>
		if (On_off ==0)
 8003222:	f89a 3000 	ldrb.w	r3, [sl]
 8003226:	f8df b27c 	ldr.w	fp, [pc, #636]	; 80034a4 <MenuChargeAdapt+0x330>
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 8102 	bne.w	8003434 <MenuChargeAdapt+0x2c0>
			PrintToLCD(itoa_koma(U_PS,2));
 8003230:	4b94      	ldr	r3, [pc, #592]	; (8003484 <MenuChargeAdapt+0x310>)
 8003232:	2102      	movs	r1, #2
 8003234:	8818      	ldrh	r0, [r3, #0]
 8003236:	b280      	uxth	r0, r0
 8003238:	f7fe f85a 	bl	80012f0 <itoa_koma>
 800323c:	f7fe fc62 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V ");
 8003240:	4899      	ldr	r0, [pc, #612]	; (80034a8 <MenuChargeAdapt+0x334>)
 8003242:	f7fe fc5f 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003246:	f8bb 0000 	ldrh.w	r0, [fp]
 800324a:	2102      	movs	r1, #2
 800324c:	b280      	uxth	r0, r0
 800324e:	f7fe f84f 	bl	80012f0 <itoa_koma>
 8003252:	f7fe fc57 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V   ");
 8003256:	4895      	ldr	r0, [pc, #596]	; (80034ac <MenuChargeAdapt+0x338>)
			PrintToLCD("mA      ");
 8003258:	f7fe fc54 	bl	8001b04 <PrintToLCD>
		if (On_off ==0)
 800325c:	f89a 3000 	ldrb.w	r3, [sl]
			lcd_set_xy(7,1);
 8003260:	2101      	movs	r1, #1
 8003262:	2007      	movs	r0, #7
 8003264:	f8df a248 	ldr.w	sl, [pc, #584]	; 80034b0 <MenuChargeAdapt+0x33c>
		if (On_off ==0)
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 80f7 	bne.w	800345c <MenuChargeAdapt+0x2e8>
			lcd_set_xy(7,1);
 800326e:	f7fe fbc9 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(0,1);
 8003272:	2101      	movs	r1, #1
 8003274:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 8003276:	f7fe fbec 	bl	8001a52 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 800327a:	f89a 3000 	ldrb.w	r3, [sl]
 800327e:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8003280:	bf84      	itt	hi
 8003282:	2300      	movhi	r3, #0
 8003284:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 8003288:	f995 a000 	ldrsb.w	sl, [r5]
 800328c:	f1ba 0f01 	cmp.w	sl, #1
 8003290:	d145      	bne.n	800331e <MenuChargeAdapt+0x1aa>
		lcd_set_xy(0,0);
 8003292:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003294:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 8003488 <MenuChargeAdapt+0x314>
		lcd_set_xy(0,0);
 8003298:	4608      	mov	r0, r1
 800329a:	f7fe fbb3 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("T:");
 800329e:	4885      	ldr	r0, [pc, #532]	; (80034b4 <MenuChargeAdapt+0x340>)
 80032a0:	f7fe fc30 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 80032a4:	f8db 0010 	ldr.w	r0, [fp, #16]
 80032a8:	f7fd ffaa 	bl	8001200 <itoa>
 80032ac:	f7fe fc2a 	bl	8001b04 <PrintToLCD>
		PrintToLCD("h MaxV:");
 80032b0:	4881      	ldr	r0, [pc, #516]	; (80034b8 <MenuChargeAdapt+0x344>)
 80032b2:	f7fe fc27 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80032b6:	230a      	movs	r3, #10
 80032b8:	f8db 0020 	ldr.w	r0, [fp, #32]
 80032bc:	4651      	mov	r1, sl
 80032be:	fbb0 f0f3 	udiv	r0, r0, r3
 80032c2:	f7fe f815 	bl	80012f0 <itoa_koma>
 80032c6:	f7fe fc1d 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V   ");
 80032ca:	4878      	ldr	r0, [pc, #480]	; (80034ac <MenuChargeAdapt+0x338>)
 80032cc:	f7fe fc1a 	bl	8001b04 <PrintToLCD>
 80032d0:	e025      	b.n	800331e <MenuChargeAdapt+0x1aa>
		if (U_OUT> SettingsData.MaxVoltage)
 80032d2:	4974      	ldr	r1, [pc, #464]	; (80034a4 <MenuChargeAdapt+0x330>)
 80032d4:	486c      	ldr	r0, [pc, #432]	; (8003488 <MenuChargeAdapt+0x314>)
 80032d6:	880a      	ldrh	r2, [r1, #0]
 80032d8:	6a03      	ldr	r3, [r0, #32]
 80032da:	b292      	uxth	r2, r2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d884      	bhi.n	80031ea <MenuChargeAdapt+0x76>
			if (U_OUT< (SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))   )
 80032e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80032e2:	2064      	movs	r0, #100	; 0x64
 80032e4:	435a      	muls	r2, r3
 80032e6:	fbb2 f2f0 	udiv	r2, r2, r0
 80032ea:	8809      	ldrh	r1, [r1, #0]
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	b289      	uxth	r1, r1
 80032f0:	4299      	cmp	r1, r3
 80032f2:	f4bf af7e 	bcs.w	80031f2 <MenuChargeAdapt+0x7e>
				charge();
 80032f6:	f7ff fdbd 	bl	8002e74 <charge>
				ChargeStatusForTimer = 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e778      	b.n	80031f0 <MenuChargeAdapt+0x7c>
	OUT_OFF();
 80032fe:	f7ff f999 	bl	8002634 <OUT_OFF>
			ChargeStatusForTimer = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	e783      	b.n	800320e <MenuChargeAdapt+0x9a>
	if (key == KEY_BACK)
 8003306:	f1ba 0f01 	cmp.w	sl, #1
 800330a:	d181      	bne.n	8003210 <MenuChargeAdapt+0x9c>
		CountShow--;
 800330c:	782b      	ldrb	r3, [r5, #0]
 800330e:	3b01      	subs	r3, #1
 8003310:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM1-1;
 8003312:	2b00      	cmp	r3, #0
 8003314:	db01      	blt.n	800331a <MenuChargeAdapt+0x1a6>
		CountShow--;
 8003316:	702b      	strb	r3, [r5, #0]
 8003318:	e77a      	b.n	8003210 <MenuChargeAdapt+0x9c>
		if (CountShow<0) CountShow=MAXITEM1-1;
 800331a:	2303      	movs	r3, #3
 800331c:	702b      	strb	r3, [r5, #0]
	if(CountShow == 2)
 800331e:	f995 3000 	ldrsb.w	r3, [r5]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d12f      	bne.n	8003386 <MenuChargeAdapt+0x212>
		lcd_set_xy(0,0);
 8003326:	2100      	movs	r1, #0
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003328:	f04f 0a0a 	mov.w	sl, #10
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 800332c:	f8df b158 	ldr.w	fp, [pc, #344]	; 8003488 <MenuChargeAdapt+0x314>
		lcd_set_xy(0,0);
 8003330:	4608      	mov	r0, r1
 8003332:	f7fe fb67 	bl	8001a04 <lcd_set_xy>
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 8003336:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 800333a:	f7fd ff61 	bl	8001200 <itoa>
 800333e:	f7fe fbe1 	bl	8001b04 <PrintToLCD>
		PrintToLCD("% ");
 8003342:	485e      	ldr	r0, [pc, #376]	; (80034bc <MenuChargeAdapt+0x348>)
 8003344:	f7fe fbde 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003348:	f8db 0020 	ldr.w	r0, [fp, #32]
 800334c:	2101      	movs	r1, #1
 800334e:	fbb0 f0fa 	udiv	r0, r0, sl
 8003352:	f7fd ffcd 	bl	80012f0 <itoa_koma>
 8003356:	f7fe fbd5 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V ");
 800335a:	4853      	ldr	r0, [pc, #332]	; (80034a8 <MenuChargeAdapt+0x334>)
 800335c:	f7fe fbd2 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))/10,1));
 8003360:	2264      	movs	r2, #100	; 0x64
 8003362:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003366:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 800336a:	2101      	movs	r1, #1
 800336c:	4358      	muls	r0, r3
 800336e:	fbb0 f0f2 	udiv	r0, r0, r2
 8003372:	1a18      	subs	r0, r3, r0
 8003374:	fbb0 f0fa 	udiv	r0, r0, sl
 8003378:	f7fd ffba 	bl	80012f0 <itoa_koma>
 800337c:	f7fe fbc2 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V   ");
 8003380:	484a      	ldr	r0, [pc, #296]	; (80034ac <MenuChargeAdapt+0x338>)
 8003382:	f7fe fbbf 	bl	8001b04 <PrintToLCD>
	if(CountShow == 3)
 8003386:	f995 5000 	ldrsb.w	r5, [r5]
 800338a:	2d03      	cmp	r5, #3
 800338c:	d11a      	bne.n	80033c4 <MenuChargeAdapt+0x250>
		lcd_set_xy(0,0);
 800338e:	2100      	movs	r1, #0
 8003390:	4608      	mov	r0, r1
 8003392:	f7fe fb37 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("C ");
 8003396:	484a      	ldr	r0, [pc, #296]	; (80034c0 <MenuChargeAdapt+0x34c>)
 8003398:	f7fe fbb4 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 800339c:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <MenuChargeAdapt+0x320>)
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80033a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80033a8:	f7fd ff2a 	bl	8001200 <itoa>
 80033ac:	f7fe fbaa 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mAH     ");
 80033b0:	4844      	ldr	r0, [pc, #272]	; (80034c4 <MenuChargeAdapt+0x350>)
 80033b2:	f7fe fba7 	bl	8001b04 <PrintToLCD>
		lcd_set_xy(3,1);
 80033b6:	4628      	mov	r0, r5
 80033b8:	2101      	movs	r1, #1
 80033ba:	f7fe fb23 	bl	8001a04 <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 80033be:	6830      	ldr	r0, [r6, #0]
 80033c0:	f7ff f902 	bl	80025c8 <ClockOnLCD_noSec>
	delay_ms(MENUDELAY);
 80033c4:	2064      	movs	r0, #100	; 0x64
 80033c6:	f7fd fdff 	bl	8000fc8 <delay_ms>
	logDebugD("Init status: ",InitiStatus,0);
 80033ca:	483f      	ldr	r0, [pc, #252]	; (80034c8 <MenuChargeAdapt+0x354>)
 80033cc:	f001 ff56 	bl	800527c <printToBufferWithoutEndUART1>
 80033d0:	7839      	ldrb	r1, [r7, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	483d      	ldr	r0, [pc, #244]	; (80034cc <MenuChargeAdapt+0x358>)
 80033d6:	f001 ff8f 	bl	80052f8 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 80033da:	483b      	ldr	r0, [pc, #236]	; (80034c8 <MenuChargeAdapt+0x354>)
 80033dc:	f001 ff4e 	bl	800527c <printToBufferWithoutEndUART1>
 80033e0:	f899 1000 	ldrb.w	r1, [r9]
 80033e4:	2200      	movs	r2, #0
 80033e6:	483a      	ldr	r0, [pc, #232]	; (80034d0 <MenuChargeAdapt+0x35c>)
 80033e8:	f001 ff86 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 80033ec:	4836      	ldr	r0, [pc, #216]	; (80034c8 <MenuChargeAdapt+0x354>)
 80033ee:	f001 ff45 	bl	800527c <printToBufferWithoutEndUART1>
 80033f2:	7821      	ldrb	r1, [r4, #0]
 80033f4:	2200      	movs	r2, #0
 80033f6:	4837      	ldr	r0, [pc, #220]	; (80034d4 <MenuChargeAdapt+0x360>)
 80033f8:	f001 ff7e 	bl	80052f8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 80033fc:	4832      	ldr	r0, [pc, #200]	; (80034c8 <MenuChargeAdapt+0x354>)
 80033fe:	f001 ff3d 	bl	800527c <printToBufferWithoutEndUART1>
 8003402:	6831      	ldr	r1, [r6, #0]
 8003404:	2200      	movs	r2, #0
 8003406:	4834      	ldr	r0, [pc, #208]	; (80034d8 <MenuChargeAdapt+0x364>)
 8003408:	f001 ff76 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 800340c:	482e      	ldr	r0, [pc, #184]	; (80034c8 <MenuChargeAdapt+0x354>)
 800340e:	f001 ff35 	bl	800527c <printToBufferWithoutEndUART1>
 8003412:	f898 1000 	ldrb.w	r1, [r8]
 8003416:	2200      	movs	r2, #0
 8003418:	4830      	ldr	r0, [pc, #192]	; (80034dc <MenuChargeAdapt+0x368>)
 800341a:	f001 ff6d 	bl	80052f8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800341e:	482a      	ldr	r0, [pc, #168]	; (80034c8 <MenuChargeAdapt+0x354>)
 8003420:	f001 ff2c 	bl	800527c <printToBufferWithoutEndUART1>
 8003424:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <MenuChargeAdapt+0x36c>)
 8003426:	2200      	movs	r2, #0
 8003428:	6819      	ldr	r1, [r3, #0]
 800342a:	482e      	ldr	r0, [pc, #184]	; (80034e4 <MenuChargeAdapt+0x370>)
}
 800342c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003430:	f001 bf62 	b.w	80052f8 <printToBufferUART1D>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003434:	f8bb 0000 	ldrh.w	r0, [fp]
 8003438:	2102      	movs	r1, #2
 800343a:	b280      	uxth	r0, r0
 800343c:	f7fd ff58 	bl	80012f0 <itoa_koma>
 8003440:	f7fe fb60 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V ");
 8003444:	4818      	ldr	r0, [pc, #96]	; (80034a8 <MenuChargeAdapt+0x334>)
 8003446:	f7fe fb5d 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(Current));
 800344a:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <MenuChargeAdapt+0x374>)
 800344c:	8818      	ldrh	r0, [r3, #0]
 800344e:	b200      	sxth	r0, r0
 8003450:	f7fd fed6 	bl	8001200 <itoa>
 8003454:	f7fe fb56 	bl	8001b04 <PrintToLCD>
			PrintToLCD("mA      ");
 8003458:	4824      	ldr	r0, [pc, #144]	; (80034ec <MenuChargeAdapt+0x378>)
 800345a:	e6fd      	b.n	8003258 <MenuChargeAdapt+0xe4>
			if (Blink_message_counter<=5)
 800345c:	f89a 3000 	ldrb.w	r3, [sl]
 8003460:	2b05      	cmp	r3, #5
 8003462:	f67f af04 	bls.w	800326e <MenuChargeAdapt+0xfa>
					lcd_set_xy(7,1);
 8003466:	f7fe facd 	bl	8001a04 <lcd_set_xy>
					LcdOutbyNumber(1,1);
 800346a:	2101      	movs	r1, #1
 800346c:	4608      	mov	r0, r1
 800346e:	e702      	b.n	8003276 <MenuChargeAdapt+0x102>
 8003470:	2000079d 	.word	0x2000079d
 8003474:	2000079c 	.word	0x2000079c
 8003478:	20000787 	.word	0x20000787
 800347c:	20000790 	.word	0x20000790
 8003480:	20000788 	.word	0x20000788
 8003484:	20000874 	.word	0x20000874
 8003488:	20000154 	.word	0x20000154
 800348c:	080061b6 	.word	0x080061b6
 8003490:	080061c7 	.word	0x080061c7
 8003494:	20000778 	.word	0x20000778
 8003498:	20000a18 	.word	0x20000a18
 800349c:	2000078d 	.word	0x2000078d
 80034a0:	2000079e 	.word	0x2000079e
 80034a4:	2000086c 	.word	0x2000086c
 80034a8:	08005f2e 	.word	0x08005f2e
 80034ac:	08005ed9 	.word	0x08005ed9
 80034b0:	20000785 	.word	0x20000785
 80034b4:	080061e0 	.word	0x080061e0
 80034b8:	080061e3 	.word	0x080061e3
 80034bc:	0800603d 	.word	0x0800603d
 80034c0:	080061eb 	.word	0x080061eb
 80034c4:	0800611c 	.word	0x0800611c
 80034c8:	0800593c 	.word	0x0800593c
 80034cc:	08006125 	.word	0x08006125
 80034d0:	08006133 	.word	0x08006133
 80034d4:	08006148 	.word	0x08006148
 80034d8:	0800615d 	.word	0x0800615d
 80034dc:	0800616d 	.word	0x0800616d
 80034e0:	20000794 	.word	0x20000794
 80034e4:	08006185 	.word	0x08006185
 80034e8:	20000856 	.word	0x20000856
 80034ec:	080060fb 	.word	0x080060fb

080034f0 <charge1>:
{
 80034f0:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=1)
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <charge1+0x34>)
 80034f4:	f993 2000 	ldrsb.w	r2, [r3]
 80034f8:	2a01      	cmp	r2, #1
 80034fa:	d011      	beq.n	8003520 <charge1+0x30>
		ChargeDischargeState = 1;
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
		OUT_ON();
 8003500:	f7ff fa72 	bl	80029e8 <OUT_ON>
		TimerForReadyMeasurement_ms = 0;
 8003504:	2200      	movs	r2, #0
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <charge1+0x38>)
		delay_ms(50);
 8003508:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 800350a:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 800350c:	f7fd fd5c 	bl	8000fc8 <delay_ms>
		logDebug("Charge");
 8003510:	4806      	ldr	r0, [pc, #24]	; (800352c <charge1+0x3c>)
 8003512:	f001 feb3 	bl	800527c <printToBufferWithoutEndUART1>
}
 8003516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("Charge");
 800351a:	4805      	ldr	r0, [pc, #20]	; (8003530 <charge1+0x40>)
 800351c:	f001 be48 	b.w	80051b0 <printToBufferUART1>
}
 8003520:	bd08      	pop	{r3, pc}
 8003522:	bf00      	nop
 8003524:	20000786 	.word	0x20000786
 8003528:	200007c8 	.word	0x200007c8
 800352c:	0800593c 	.word	0x0800593c
 8003530:	080060f4 	.word	0x080060f4

08003534 <MenuTraining_new>:
{
 8003534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8003538:	4b97      	ldr	r3, [pc, #604]	; (8003798 <MenuTraining_new+0x264>)
 800353a:	f8df 9260 	ldr.w	r9, [pc, #608]	; 800379c <MenuTraining_new+0x268>
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	f8df b25c 	ldr.w	fp, [pc, #604]	; 80037a0 <MenuTraining_new+0x26c>
 8003544:	f8df 825c 	ldr.w	r8, [pc, #604]	; 80037a4 <MenuTraining_new+0x270>
 8003548:	4e97      	ldr	r6, [pc, #604]	; (80037a8 <MenuTraining_new+0x274>)
 800354a:	4f98      	ldr	r7, [pc, #608]	; (80037ac <MenuTraining_new+0x278>)
 800354c:	4d98      	ldr	r5, [pc, #608]	; (80037b0 <MenuTraining_new+0x27c>)
{
 800354e:	9001      	str	r0, [sp, #4]
	if (EnterInMenu_Status == 0)
 8003550:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8003554:	2b00      	cmp	r3, #0
 8003556:	d140      	bne.n	80035da <MenuTraining_new+0xa6>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003558:	4b96      	ldr	r3, [pc, #600]	; (80037b4 <MenuTraining_new+0x280>)
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	4b96      	ldr	r3, [pc, #600]	; (80037b8 <MenuTraining_new+0x284>)
 800355e:	b292      	uxth	r2, r2
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	3305      	adds	r3, #5
 8003564:	429a      	cmp	r2, r3
 8003566:	d215      	bcs.n	8003594 <MenuTraining_new+0x60>
			lcd_set_xy(0,0);
 8003568:	4621      	mov	r1, r4
 800356a:	4620      	mov	r0, r4
 800356c:	f7fe fa4a 	bl	8001a04 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003570:	4892      	ldr	r0, [pc, #584]	; (80037bc <MenuTraining_new+0x288>)
 8003572:	f7fe fac7 	bl	8001b04 <PrintToLCD>
			delay_ms(2000);
 8003576:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800357a:	f7fd fd25 	bl	8000fc8 <delay_ms>
			lcd_set_xy(0,0);
 800357e:	4621      	mov	r1, r4
 8003580:	4620      	mov	r0, r4
 8003582:	f7fe fa3f 	bl	8001a04 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003586:	488e      	ldr	r0, [pc, #568]	; (80037c0 <MenuTraining_new+0x28c>)
 8003588:	f7fe fabc 	bl	8001b04 <PrintToLCD>
			delay_ms(3000);
 800358c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003590:	f7fd fd1a 	bl	8000fc8 <delay_ms>
		EnterInMenu_Status = 1;
 8003594:	f04f 0a01 	mov.w	sl, #1
		ChargeStatusForTimer = 0;
 8003598:	2400      	movs	r4, #0
		EnterInMenu_Status = 1;
 800359a:	4b7f      	ldr	r3, [pc, #508]	; (8003798 <MenuTraining_new+0x264>)
 800359c:	f883 a000 	strb.w	sl, [r3]
		DischargeTimeSec_Previous = 0;
 80035a0:	4b88      	ldr	r3, [pc, #544]	; (80037c4 <MenuTraining_new+0x290>)
		ChargeStatusForTimer = 0;
 80035a2:	f889 4000 	strb.w	r4, [r9]
		DisChargeStatusForTimer = 0;
 80035a6:	f88b 4000 	strb.w	r4, [fp]
		ChargeTimeSec = 0;
 80035aa:	f8c8 4000 	str.w	r4, [r8]
		DischargeTimeSec = 0;
 80035ae:	6034      	str	r4, [r6, #0]
		DischargeTimeSec_Previous = 0;
 80035b0:	601c      	str	r4, [r3, #0]
		BatteryCapacityCharge = 0;
 80035b2:	603c      	str	r4, [r7, #0]
		BatteryCapacityDischargeCurrent = 0;
 80035b4:	602c      	str	r4, [r5, #0]
		ChargeStatusForTimer = 1;
 80035b6:	f889 a000 	strb.w	sl, [r9]
		charge1();
 80035ba:	f7ff ff99 	bl	80034f0 <charge1>
		ChargeDischargeStatus = CHARGEs;
 80035be:	4b82      	ldr	r3, [pc, #520]	; (80037c8 <MenuTraining_new+0x294>)
		lcd_set_xy(0,0);
 80035c0:	4621      	mov	r1, r4
 80035c2:	4620      	mov	r0, r4
		ChargeDischargeStatus = CHARGEs;
 80035c4:	f883 a000 	strb.w	sl, [r3]
		lcd_set_xy(0,0);
 80035c8:	f7fe fa1c 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 80035cc:	487f      	ldr	r0, [pc, #508]	; (80037cc <MenuTraining_new+0x298>)
 80035ce:	f7fe fa99 	bl	8001b04 <PrintToLCD>
		delay_ms(1000);
 80035d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035d6:	f7fd fcf7 	bl	8000fc8 <delay_ms>
	if (Module16(Current)>5)
 80035da:	4b7d      	ldr	r3, [pc, #500]	; (80037d0 <MenuTraining_new+0x29c>)
 80035dc:	8818      	ldrh	r0, [r3, #0]
 80035de:	b200      	sxth	r0, r0
 80035e0:	f7fd fef2 	bl	80013c8 <Module16>
 80035e4:	2805      	cmp	r0, #5
 80035e6:	f340 81ca 	ble.w	800397e <MenuTraining_new+0x44a>
		if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 80035ea:	4b7a      	ldr	r3, [pc, #488]	; (80037d4 <MenuTraining_new+0x2a0>)
 80035ec:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 80037b8 <MenuTraining_new+0x284>
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	f8da 2018 	ldr.w	r2, [sl, #24]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d21e      	bcs.n	800363a <MenuTraining_new+0x106>
 80035fc:	4b72      	ldr	r3, [pc, #456]	; (80037c8 <MenuTraining_new+0x294>)
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	2a02      	cmp	r2, #2
 8003602:	d11a      	bne.n	800363a <MenuTraining_new+0x106>
 8003604:	4b74      	ldr	r3, [pc, #464]	; (80037d8 <MenuTraining_new+0x2a4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800360c:	d915      	bls.n	800363a <MenuTraining_new+0x106>
			DisChargeStatusForTimer = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	f88b 3000 	strb.w	r3, [fp]
			if (BatteryCapacityDischargeCurrent/3600 > 100)
 8003614:	6829      	ldr	r1, [r5, #0]
 8003616:	4b71      	ldr	r3, [pc, #452]	; (80037dc <MenuTraining_new+0x2a8>)
 8003618:	4299      	cmp	r1, r3
 800361a:	d903      	bls.n	8003624 <MenuTraining_new+0xf0>
				MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 800361c:	6828      	ldr	r0, [r5, #0]
 800361e:	6831      	ldr	r1, [r6, #0]
 8003620:	f7fe fc6a 	bl	8001ef8 <MenuTraining_WriteInLOG>
			ChargeTimeSec = 0;
 8003624:	2300      	movs	r3, #0
			ChargeStatusForTimer = 1;
 8003626:	2401      	movs	r4, #1
			ChargeTimeSec = 0;
 8003628:	f8c8 3000 	str.w	r3, [r8]
			BatteryCapacityCharge = 0;
 800362c:	603b      	str	r3, [r7, #0]
			ChargeStatusForTimer = 1;
 800362e:	f889 4000 	strb.w	r4, [r9]
			charge1();
 8003632:	f7ff ff5d 	bl	80034f0 <charge1>
			ChargeDischargeStatus = CHARGEs;
 8003636:	4b64      	ldr	r3, [pc, #400]	; (80037c8 <MenuTraining_new+0x294>)
 8003638:	701c      	strb	r4, [r3, #0]
		if ((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))
 800363a:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <MenuTraining_new+0x2a0>)
 800363c:	f8da 2020 	ldr.w	r2, [sl, #32]
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	4293      	cmp	r3, r2
 8003646:	d908      	bls.n	800365a <MenuTraining_new+0x126>
 8003648:	4b5f      	ldr	r3, [pc, #380]	; (80037c8 <MenuTraining_new+0x294>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d104      	bne.n	800365a <MenuTraining_new+0x126>
 8003650:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <MenuTraining_new+0x2a4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003658:	d809      	bhi.n	800366e <MenuTraining_new+0x13a>
 800365a:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <MenuTraining_new+0x2ac>)
 800365c:	f8d8 2000 	ldr.w	r2, [r8]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d921      	bls.n	80036aa <MenuTraining_new+0x176>
 8003666:	4b58      	ldr	r3, [pc, #352]	; (80037c8 <MenuTraining_new+0x294>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d11d      	bne.n	80036aa <MenuTraining_new+0x176>
			ChargeStatusForTimer = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	f889 3000 	strb.w	r3, [r9]
			if (BatteryCapacityCharge/3600 > 100)
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	4b59      	ldr	r3, [pc, #356]	; (80037dc <MenuTraining_new+0x2a8>)
 8003678:	429a      	cmp	r2, r3
 800367a:	d905      	bls.n	8003688 <MenuTraining_new+0x154>
				MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	2201      	movs	r2, #1
 8003680:	f8d8 1000 	ldr.w	r1, [r8]
 8003684:	f7fe fc38 	bl	8001ef8 <MenuTraining_WriteInLOG>
			DischargeTimeSec_Previous = DischargeTimeSec;
 8003688:	6832      	ldr	r2, [r6, #0]
 800368a:	4b4e      	ldr	r3, [pc, #312]	; (80037c4 <MenuTraining_new+0x290>)
 800368c:	601a      	str	r2, [r3, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 800368e:	682a      	ldr	r2, [r5, #0]
 8003690:	4b54      	ldr	r3, [pc, #336]	; (80037e4 <MenuTraining_new+0x2b0>)
 8003692:	609a      	str	r2, [r3, #8]
			DischargeTimeSec = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	6033      	str	r3, [r6, #0]
			BatteryCapacityDischargeCurrent = 0;
 8003698:	602b      	str	r3, [r5, #0]
			DisChargeStatusForTimer = 1;
 800369a:	2301      	movs	r3, #1
 800369c:	f88b 3000 	strb.w	r3, [fp]
			discharge1();
 80036a0:	f7ff f81e 	bl	80026e0 <discharge1>
			ChargeDischargeStatus = DISCHARGEs;
 80036a4:	2202      	movs	r2, #2
 80036a6:	4b48      	ldr	r3, [pc, #288]	; (80037c8 <MenuTraining_new+0x294>)
 80036a8:	701a      	strb	r2, [r3, #0]
		if (key == KEY_NEXT)
 80036aa:	9a01      	ldr	r2, [sp, #4]
			CountShow++;
 80036ac:	4c4e      	ldr	r4, [pc, #312]	; (80037e8 <MenuTraining_new+0x2b4>)
		if (key == KEY_NEXT)
 80036ae:	2a02      	cmp	r2, #2
			CountShow++;
 80036b0:	f994 3000 	ldrsb.w	r3, [r4]
		if (key == KEY_NEXT)
 80036b4:	d134      	bne.n	8003720 <MenuTraining_new+0x1ec>
			CountShow++;
 80036b6:	3301      	adds	r3, #1
 80036b8:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_TRAINING) CountShow=0;
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d137      	bne.n	800372e <MenuTraining_new+0x1fa>
 80036be:	2300      	movs	r3, #0
 80036c0:	7023      	strb	r3, [r4, #0]
			lcd_set_xy(0,0);
 80036c2:	2100      	movs	r1, #0
 80036c4:	4608      	mov	r0, r1
 80036c6:	f7fe f99d 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 80036ca:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <MenuTraining_new+0x2a0>)
 80036cc:	2102      	movs	r1, #2
 80036ce:	8818      	ldrh	r0, [r3, #0]
 80036d0:	b280      	uxth	r0, r0
 80036d2:	f7fd fe0d 	bl	80012f0 <itoa_koma>
 80036d6:	f7fe fa15 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V ");
 80036da:	4844      	ldr	r0, [pc, #272]	; (80037ec <MenuTraining_new+0x2b8>)
 80036dc:	f7fe fa12 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(Current));
 80036e0:	4b3b      	ldr	r3, [pc, #236]	; (80037d0 <MenuTraining_new+0x29c>)
 80036e2:	8818      	ldrh	r0, [r3, #0]
 80036e4:	b200      	sxth	r0, r0
 80036e6:	f7fd fd8b 	bl	8001200 <itoa>
 80036ea:	f7fe fa0b 	bl	8001b04 <PrintToLCD>
			PrintToLCD("mA     ");
 80036ee:	4840      	ldr	r0, [pc, #256]	; (80037f0 <MenuTraining_new+0x2bc>)
 80036f0:	f7fe fa08 	bl	8001b04 <PrintToLCD>
			lcd_set_xy(6,1);
 80036f4:	2101      	movs	r1, #1
 80036f6:	2006      	movs	r0, #6
 80036f8:	f7fe f984 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 80036fc:	2101      	movs	r1, #1
 80036fe:	2004      	movs	r0, #4
 8003700:	f7fe f9a7 	bl	8001a52 <LcdOutbyNumber>
			if (Status_Out ==1)
 8003704:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <MenuTraining_new+0x2c0>)
 8003706:	7819      	ldrb	r1, [r3, #0]
 8003708:	2901      	cmp	r1, #1
 800370a:	f040 8131 	bne.w	8003970 <MenuTraining_new+0x43c>
				lcd_set_xy(7,1);
 800370e:	2007      	movs	r0, #7
 8003710:	9101      	str	r1, [sp, #4]
 8003712:	f7fe f977 	bl	8001a04 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8003716:	2000      	movs	r0, #0
 8003718:	9901      	ldr	r1, [sp, #4]
				LcdOutbyNumber(2,1);//discharge
 800371a:	f7fe f99a 	bl	8001a52 <LcdOutbyNumber>
 800371e:	e00b      	b.n	8003738 <MenuTraining_new+0x204>
		if (key == KEY_BACK)
 8003720:	9a01      	ldr	r2, [sp, #4]
 8003722:	2a01      	cmp	r2, #1
 8003724:	d104      	bne.n	8003730 <MenuTraining_new+0x1fc>
			CountShow--;
 8003726:	3b01      	subs	r3, #1
 8003728:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 800372a:	2b00      	cmp	r3, #0
 800372c:	db68      	blt.n	8003800 <MenuTraining_new+0x2cc>
			CountShow++;
 800372e:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8003730:	f994 3000 	ldrsb.w	r3, [r4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0c4      	beq.n	80036c2 <MenuTraining_new+0x18e>
		if(CountShow == 1)
 8003738:	f994 3000 	ldrsb.w	r3, [r4]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d161      	bne.n	8003804 <MenuTraining_new+0x2d0>
			lcd_set_xy(0,0);
 8003740:	2100      	movs	r1, #0
 8003742:	4608      	mov	r0, r1
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	f7fe f95d 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 800374a:	f8da 0010 	ldr.w	r0, [sl, #16]
 800374e:	f7fd fd57 	bl	8001200 <itoa>
 8003752:	f7fe f9d7 	bl	8001b04 <PrintToLCD>
			PrintToLCD("h ");
 8003756:	4828      	ldr	r0, [pc, #160]	; (80037f8 <MenuTraining_new+0x2c4>)
 8003758:	f7fe f9d4 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 800375c:	220a      	movs	r2, #10
 800375e:	9b01      	ldr	r3, [sp, #4]
 8003760:	f8da 0018 	ldr.w	r0, [sl, #24]
 8003764:	4619      	mov	r1, r3
 8003766:	fbb0 f0f2 	udiv	r0, r0, r2
 800376a:	f7fd fdc1 	bl	80012f0 <itoa_koma>
 800376e:	f7fe f9c9 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V ");
 8003772:	481e      	ldr	r0, [pc, #120]	; (80037ec <MenuTraining_new+0x2b8>)
 8003774:	f7fe f9c6 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003778:	220a      	movs	r2, #10
 800377a:	9b01      	ldr	r3, [sp, #4]
 800377c:	f8da 0020 	ldr.w	r0, [sl, #32]
 8003780:	4619      	mov	r1, r3
 8003782:	fbb0 f0f2 	udiv	r0, r0, r2
 8003786:	f7fd fdb3 	bl	80012f0 <itoa_koma>
 800378a:	f7fe f9bb 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V     ");
 800378e:	481b      	ldr	r0, [pc, #108]	; (80037fc <MenuTraining_new+0x2c8>)
 8003790:	f7fe f9b8 	bl	8001b04 <PrintToLCD>
 8003794:	e036      	b.n	8003804 <MenuTraining_new+0x2d0>
 8003796:	bf00      	nop
 8003798:	2000079c 	.word	0x2000079c
 800379c:	20000787 	.word	0x20000787
 80037a0:	20000790 	.word	0x20000790
 80037a4:	20000788 	.word	0x20000788
 80037a8:	20000794 	.word	0x20000794
 80037ac:	20000778 	.word	0x20000778
 80037b0:	2000077c 	.word	0x2000077c
 80037b4:	20000874 	.word	0x20000874
 80037b8:	20000154 	.word	0x20000154
 80037bc:	080061b6 	.word	0x080061b6
 80037c0:	080061c7 	.word	0x080061c7
 80037c4:	20000798 	.word	0x20000798
 80037c8:	20000270 	.word	0x20000270
 80037cc:	080061ee 	.word	0x080061ee
 80037d0:	20000856 	.word	0x20000856
 80037d4:	2000086c 	.word	0x2000086c
 80037d8:	200007c8 	.word	0x200007c8
 80037dc:	00058c4f 	.word	0x00058c4f
 80037e0:	20000a18 	.word	0x20000a18
 80037e4:	200000f4 	.word	0x200000f4
 80037e8:	2000078d 	.word	0x2000078d
 80037ec:	08005f2e 	.word	0x08005f2e
 80037f0:	080061d8 	.word	0x080061d8
 80037f4:	200007a4 	.word	0x200007a4
 80037f8:	08005ab4 	.word	0x08005ab4
 80037fc:	08005f1b 	.word	0x08005f1b
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 8003800:	2304      	movs	r3, #4
 8003802:	7023      	strb	r3, [r4, #0]
		if(CountShow == 2)
 8003804:	f994 a000 	ldrsb.w	sl, [r4]
 8003808:	f1ba 0f02 	cmp.w	sl, #2
 800380c:	d121      	bne.n	8003852 <MenuTraining_new+0x31e>
			lcd_set_xy(0,0);
 800380e:	2100      	movs	r1, #0
 8003810:	4608      	mov	r0, r1
 8003812:	f7fe f8f7 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8003816:	2101      	movs	r1, #1
 8003818:	4650      	mov	r0, sl
 800381a:	f7fe f91a 	bl	8001a52 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 800381e:	2100      	movs	r1, #0
 8003820:	2001      	movs	r0, #1
 8003822:	f7fe f8ef 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(" ");
 8003826:	485c      	ldr	r0, [pc, #368]	; (8003998 <MenuTraining_new+0x464>)
 8003828:	f7fe f96c 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 800382c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003830:	6828      	ldr	r0, [r5, #0]
 8003832:	fbb0 f0f3 	udiv	r0, r0, r3
 8003836:	f7fd fce3 	bl	8001200 <itoa>
 800383a:	f7fe f963 	bl	8001b04 <PrintToLCD>
			PrintToLCD("mAH      ");
 800383e:	4857      	ldr	r0, [pc, #348]	; (800399c <MenuTraining_new+0x468>)
 8003840:	f7fe f960 	bl	8001b04 <PrintToLCD>
			lcd_set_xy(3,1);
 8003844:	2003      	movs	r0, #3
 8003846:	2101      	movs	r1, #1
 8003848:	f7fe f8dc 	bl	8001a04 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 800384c:	6830      	ldr	r0, [r6, #0]
 800384e:	f7fe febb 	bl	80025c8 <ClockOnLCD_noSec>
		if(CountShow == 3)
 8003852:	f994 a000 	ldrsb.w	sl, [r4]
 8003856:	f1ba 0f03 	cmp.w	sl, #3
 800385a:	d122      	bne.n	80038a2 <MenuTraining_new+0x36e>
			lcd_set_xy(0,0);
 800385c:	2100      	movs	r1, #0
 800385e:	4608      	mov	r0, r1
 8003860:	f7fe f8d0 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 8003864:	2101      	movs	r1, #1
 8003866:	2000      	movs	r0, #0
 8003868:	f7fe f8f3 	bl	8001a52 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 800386c:	2100      	movs	r1, #0
 800386e:	2001      	movs	r0, #1
 8003870:	f7fe f8c8 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(" ");
 8003874:	4848      	ldr	r0, [pc, #288]	; (8003998 <MenuTraining_new+0x464>)
 8003876:	f7fe f945 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 800387a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800387e:	6838      	ldr	r0, [r7, #0]
 8003880:	fbb0 f0f3 	udiv	r0, r0, r3
 8003884:	f7fd fcbc 	bl	8001200 <itoa>
 8003888:	f7fe f93c 	bl	8001b04 <PrintToLCD>
			PrintToLCD("mAH      ");
 800388c:	4843      	ldr	r0, [pc, #268]	; (800399c <MenuTraining_new+0x468>)
 800388e:	f7fe f939 	bl	8001b04 <PrintToLCD>
			lcd_set_xy(3,1);
 8003892:	4650      	mov	r0, sl
 8003894:	2101      	movs	r1, #1
 8003896:	f7fe f8b5 	bl	8001a04 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 800389a:	f8d8 0000 	ldr.w	r0, [r8]
 800389e:	f7fe fe93 	bl	80025c8 <ClockOnLCD_noSec>
		if(CountShow == 4)
 80038a2:	f994 3000 	ldrsb.w	r3, [r4]
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d123      	bne.n	80038f2 <MenuTraining_new+0x3be>
			lcd_set_xy(0,0);
 80038aa:	2100      	movs	r1, #0
 80038ac:	4608      	mov	r0, r1
 80038ae:	f7fe f8a9 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 80038b2:	2101      	movs	r1, #1
 80038b4:	2002      	movs	r0, #2
 80038b6:	f7fe f8cc 	bl	8001a52 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80038ba:	2100      	movs	r1, #0
 80038bc:	2001      	movs	r0, #1
 80038be:	f7fe f8a1 	bl	8001a04 <lcd_set_xy>
			PrintToLCD("P ");
 80038c2:	4837      	ldr	r0, [pc, #220]	; (80039a0 <MenuTraining_new+0x46c>)
 80038c4:	f7fe f91e 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600));
 80038c8:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <MenuTraining_new+0x470>)
 80038ca:	6898      	ldr	r0, [r3, #8]
 80038cc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80038d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80038d4:	f7fd fc94 	bl	8001200 <itoa>
 80038d8:	f7fe f914 	bl	8001b04 <PrintToLCD>
			PrintToLCD("mAH     ");
 80038dc:	4832      	ldr	r0, [pc, #200]	; (80039a8 <MenuTraining_new+0x474>)
 80038de:	f7fe f911 	bl	8001b04 <PrintToLCD>
			lcd_set_xy(3,1);
 80038e2:	2003      	movs	r0, #3
 80038e4:	2101      	movs	r1, #1
 80038e6:	f7fe f88d 	bl	8001a04 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec_Previous);
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <MenuTraining_new+0x478>)
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	f7fe fe6b 	bl	80025c8 <ClockOnLCD_noSec>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 80038f2:	482f      	ldr	r0, [pc, #188]	; (80039b0 <MenuTraining_new+0x47c>)
 80038f4:	f001 fcc2 	bl	800527c <printToBufferWithoutEndUART1>
 80038f8:	4b2e      	ldr	r3, [pc, #184]	; (80039b4 <MenuTraining_new+0x480>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	7819      	ldrb	r1, [r3, #0]
 80038fe:	482e      	ldr	r0, [pc, #184]	; (80039b8 <MenuTraining_new+0x484>)
 8003900:	f001 fcfa 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003904:	482a      	ldr	r0, [pc, #168]	; (80039b0 <MenuTraining_new+0x47c>)
 8003906:	f001 fcb9 	bl	800527c <printToBufferWithoutEndUART1>
 800390a:	f899 1000 	ldrb.w	r1, [r9]
 800390e:	2200      	movs	r2, #0
 8003910:	482a      	ldr	r0, [pc, #168]	; (80039bc <MenuTraining_new+0x488>)
 8003912:	f001 fcf1 	bl	80052f8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003916:	4826      	ldr	r0, [pc, #152]	; (80039b0 <MenuTraining_new+0x47c>)
 8003918:	f001 fcb0 	bl	800527c <printToBufferWithoutEndUART1>
 800391c:	f8d8 1000 	ldr.w	r1, [r8]
 8003920:	2200      	movs	r2, #0
 8003922:	4827      	ldr	r0, [pc, #156]	; (80039c0 <MenuTraining_new+0x48c>)
 8003924:	f001 fce8 	bl	80052f8 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 8003928:	4821      	ldr	r0, [pc, #132]	; (80039b0 <MenuTraining_new+0x47c>)
 800392a:	f001 fca7 	bl	800527c <printToBufferWithoutEndUART1>
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	2200      	movs	r2, #0
 8003932:	4824      	ldr	r0, [pc, #144]	; (80039c4 <MenuTraining_new+0x490>)
 8003934:	f001 fce0 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003938:	481d      	ldr	r0, [pc, #116]	; (80039b0 <MenuTraining_new+0x47c>)
 800393a:	f001 fc9f 	bl	800527c <printToBufferWithoutEndUART1>
 800393e:	f89b 1000 	ldrb.w	r1, [fp]
 8003942:	2200      	movs	r2, #0
 8003944:	4820      	ldr	r0, [pc, #128]	; (80039c8 <MenuTraining_new+0x494>)
 8003946:	f001 fcd7 	bl	80052f8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800394a:	4819      	ldr	r0, [pc, #100]	; (80039b0 <MenuTraining_new+0x47c>)
 800394c:	f001 fc96 	bl	800527c <printToBufferWithoutEndUART1>
 8003950:	6831      	ldr	r1, [r6, #0]
 8003952:	2200      	movs	r2, #0
 8003954:	481d      	ldr	r0, [pc, #116]	; (80039cc <MenuTraining_new+0x498>)
 8003956:	f001 fccf 	bl	80052f8 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 800395a:	4815      	ldr	r0, [pc, #84]	; (80039b0 <MenuTraining_new+0x47c>)
 800395c:	f001 fc8e 	bl	800527c <printToBufferWithoutEndUART1>
 8003960:	2200      	movs	r2, #0
 8003962:	6829      	ldr	r1, [r5, #0]
 8003964:	481a      	ldr	r0, [pc, #104]	; (80039d0 <MenuTraining_new+0x49c>)
}
 8003966:	b003      	add	sp, #12
 8003968:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 800396c:	f001 bcc4 	b.w	80052f8 <printToBufferUART1D>
				lcd_set_xy(7,1);
 8003970:	2101      	movs	r1, #1
 8003972:	2007      	movs	r0, #7
 8003974:	f7fe f846 	bl	8001a04 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 8003978:	2101      	movs	r1, #1
 800397a:	2002      	movs	r0, #2
 800397c:	e6cd      	b.n	800371a <MenuTraining_new+0x1e6>
		if (TimerForReadyMeasurement_ms>1000)
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <MenuTraining_new+0x4a0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003986:	d9b4      	bls.n	80038f2 <MenuTraining_new+0x3be>
			lcd_set_xy(0,0);
 8003988:	2100      	movs	r1, #0
 800398a:	4608      	mov	r0, r1
 800398c:	f7fe f83a 	bl	8001a04 <lcd_set_xy>
			PrintToLCD("NO/BAD Battery  ");
 8003990:	4811      	ldr	r0, [pc, #68]	; (80039d8 <MenuTraining_new+0x4a4>)
 8003992:	f7fe f8b7 	bl	8001b04 <PrintToLCD>
 8003996:	e7ac      	b.n	80038f2 <MenuTraining_new+0x3be>
 8003998:	080060d7 	.word	0x080060d7
 800399c:	080061ff 	.word	0x080061ff
 80039a0:	08006110 	.word	0x08006110
 80039a4:	200000f4 	.word	0x200000f4
 80039a8:	0800611c 	.word	0x0800611c
 80039ac:	20000798 	.word	0x20000798
 80039b0:	0800593c 	.word	0x0800593c
 80039b4:	2000079c 	.word	0x2000079c
 80039b8:	08006133 	.word	0x08006133
 80039bc:	08006148 	.word	0x08006148
 80039c0:	0800615d 	.word	0x0800615d
 80039c4:	0800621a 	.word	0x0800621a
 80039c8:	0800616d 	.word	0x0800616d
 80039cc:	08006185 	.word	0x08006185
 80039d0:	08006232 	.word	0x08006232
 80039d4:	200007c8 	.word	0x200007c8
 80039d8:	08006209 	.word	0x08006209

080039dc <MenuSwing>:
   	lcd_set_xy(0,0);
 80039dc:	2100      	movs	r1, #0
{
 80039de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e0:	4606      	mov	r6, r0
   	lcd_set_xy(0,0);
 80039e2:	4608      	mov	r0, r1
 80039e4:	f7fe f80e 	bl	8001a04 <lcd_set_xy>
       	EnterInMenu_Status = 1;
 80039e8:	2201      	movs	r2, #1
 80039ea:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <MenuSwing+0x1b8>)
 80039ec:	701a      	strb	r2, [r3, #0]
       	if (InitiStatus==0)
 80039ee:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <MenuSwing+0x1bc>)
 80039f0:	7819      	ldrb	r1, [r3, #0]
 80039f2:	b911      	cbnz	r1, 80039fa <MenuSwing+0x1e>
       		InitiStatus=1;
 80039f4:	701a      	strb	r2, [r3, #0]
       		Start_Timer_sec();
 80039f6:	f7fe fddb 	bl	80025b0 <Start_Timer_sec>
       if (Timer_Sec<=SettingsData.Swing_Chrg_time)
 80039fa:	4d68      	ldr	r5, [pc, #416]	; (8003b9c <MenuSwing+0x1c0>)
 80039fc:	4c68      	ldr	r4, [pc, #416]	; (8003ba0 <MenuSwing+0x1c4>)
 80039fe:	682b      	ldr	r3, [r5, #0]
 8003a00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d312      	bcc.n	8003a2c <MenuSwing+0x50>
    	   charge1();
 8003a06:	f7ff fd73 	bl	80034f0 <charge1>
           if (U_OUT>SettingsData.MaxVoltage && TimerForReadyMeasurement_ms>400)
 8003a0a:	4b66      	ldr	r3, [pc, #408]	; (8003ba4 <MenuSwing+0x1c8>)
 8003a0c:	6a22      	ldr	r2, [r4, #32]
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d90a      	bls.n	8003a2c <MenuSwing+0x50>
 8003a16:	4b64      	ldr	r3, [pc, #400]	; (8003ba8 <MenuSwing+0x1cc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003a1e:	d905      	bls.n	8003a2c <MenuSwing+0x50>
        	   ReStart_Timer_sec();
 8003a20:	f7fe fdc6 	bl	80025b0 <Start_Timer_sec>
               Timer_Sec  = Timer_Sec+ SettingsData.Swing_Chrg_time;
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a28:	4413      	add	r3, r2
 8003a2a:	602b      	str	r3, [r5, #0]
       if (Timer_Sec > SettingsData.Swing_Chrg_time)
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d20e      	bcs.n	8003a52 <MenuSwing+0x76>
           discharge1();
 8003a34:	f7fe fe54 	bl	80026e0 <discharge1>
           if (U_OUT<SettingsData.LowVoltage && TimerForReadyMeasurement_ms>400)
 8003a38:	4b5a      	ldr	r3, [pc, #360]	; (8003ba4 <MenuSwing+0x1c8>)
 8003a3a:	69a2      	ldr	r2, [r4, #24]
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d206      	bcs.n	8003a52 <MenuSwing+0x76>
 8003a44:	4b58      	ldr	r3, [pc, #352]	; (8003ba8 <MenuSwing+0x1cc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003a4c:	d901      	bls.n	8003a52 <MenuSwing+0x76>
        	   ReStart_Timer_sec();
 8003a4e:	f7fe fdaf 	bl	80025b0 <Start_Timer_sec>
       if (Timer_Sec > (SettingsData.Swing_Chrg_time+SettingsData.Swing_DChrg_time))
 8003a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a54:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003a56:	682a      	ldr	r2, [r5, #0]
 8003a58:	440b      	add	r3, r1
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d201      	bcs.n	8003a62 <MenuSwing+0x86>
    	   ReStart_Timer_sec();
 8003a5e:	f7fe fda7 	bl	80025b0 <Start_Timer_sec>
			CountShow++;
 8003a62:	4d52      	ldr	r5, [pc, #328]	; (8003bac <MenuSwing+0x1d0>)
		if (key == KEY_NEXT)
 8003a64:	2e02      	cmp	r6, #2
			CountShow++;
 8003a66:	f995 3000 	ldrsb.w	r3, [r5]
		if (key == KEY_NEXT)
 8003a6a:	d133      	bne.n	8003ad4 <MenuSwing+0xf8>
			CountShow++;
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	b25b      	sxtb	r3, r3
			if (CountShow==MAXITEM6) CountShow=0;
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d135      	bne.n	8003ae0 <MenuSwing+0x104>
 8003a74:	2300      	movs	r3, #0
 8003a76:	702b      	strb	r3, [r5, #0]
			lcd_set_xy(0,0);
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4608      	mov	r0, r1
 8003a7c:	f7fd ffc2 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003a80:	4b48      	ldr	r3, [pc, #288]	; (8003ba4 <MenuSwing+0x1c8>)
 8003a82:	2102      	movs	r1, #2
 8003a84:	8818      	ldrh	r0, [r3, #0]
 8003a86:	b280      	uxth	r0, r0
 8003a88:	f7fd fc32 	bl	80012f0 <itoa_koma>
 8003a8c:	f7fe f83a 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V ");
 8003a90:	4847      	ldr	r0, [pc, #284]	; (8003bb0 <MenuSwing+0x1d4>)
 8003a92:	f7fe f837 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003a96:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <MenuSwing+0x1d8>)
 8003a98:	8818      	ldrh	r0, [r3, #0]
 8003a9a:	b200      	sxth	r0, r0
 8003a9c:	f7fd fbb0 	bl	8001200 <itoa>
 8003aa0:	f7fe f830 	bl	8001b04 <PrintToLCD>
			PrintToLCD("mA     ");
 8003aa4:	4844      	ldr	r0, [pc, #272]	; (8003bb8 <MenuSwing+0x1dc>)
 8003aa6:	f7fe f82d 	bl	8001b04 <PrintToLCD>
			lcd_set_xy(6,1);
 8003aaa:	2101      	movs	r1, #1
 8003aac:	2006      	movs	r0, #6
 8003aae:	f7fd ffa9 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(5,1);
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	2005      	movs	r0, #5
 8003ab6:	f7fd ffcc 	bl	8001a52 <LcdOutbyNumber>
			if (Status_Out ==1)
 8003aba:	4b40      	ldr	r3, [pc, #256]	; (8003bbc <MenuSwing+0x1e0>)
 8003abc:	781e      	ldrb	r6, [r3, #0]
 8003abe:	2e01      	cmp	r6, #1
 8003ac0:	d15f      	bne.n	8003b82 <MenuSwing+0x1a6>
				lcd_set_xy(7,1);
 8003ac2:	4631      	mov	r1, r6
 8003ac4:	2007      	movs	r0, #7
 8003ac6:	f7fd ff9d 	bl	8001a04 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8003aca:	4631      	mov	r1, r6
 8003acc:	2000      	movs	r0, #0
				LcdOutbyNumber(2,1);//discharge
 8003ace:	f7fd ffc0 	bl	8001a52 <LcdOutbyNumber>
 8003ad2:	e00a      	b.n	8003aea <MenuSwing+0x10e>
		if (key == KEY_BACK)
 8003ad4:	2e01      	cmp	r6, #1
 8003ad6:	d104      	bne.n	8003ae2 <MenuSwing+0x106>
			CountShow--;
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAXITEM6-1;
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	db2c      	blt.n	8003b3a <MenuSwing+0x15e>
			CountShow++;
 8003ae0:	702b      	strb	r3, [r5, #0]
		if(CountShow == 0)
 8003ae2:	f995 3000 	ldrsb.w	r3, [r5]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0c6      	beq.n	8003a78 <MenuSwing+0x9c>
		if(CountShow == 1)
 8003aea:	f995 6000 	ldrsb.w	r6, [r5]
 8003aee:	2e01      	cmp	r6, #1
 8003af0:	d125      	bne.n	8003b3e <MenuSwing+0x162>
			lcd_set_xy(0,0);
 8003af2:	2100      	movs	r1, #0
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003af4:	270a      	movs	r7, #10
			lcd_set_xy(0,0);
 8003af6:	4608      	mov	r0, r1
 8003af8:	f7fd ff84 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8003afc:	6920      	ldr	r0, [r4, #16]
 8003afe:	f7fd fb7f 	bl	8001200 <itoa>
 8003b02:	f7fd ffff 	bl	8001b04 <PrintToLCD>
			PrintToLCD("h ");
 8003b06:	482e      	ldr	r0, [pc, #184]	; (8003bc0 <MenuSwing+0x1e4>)
 8003b08:	f7fd fffc 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003b0c:	69a0      	ldr	r0, [r4, #24]
 8003b0e:	4631      	mov	r1, r6
 8003b10:	fbb0 f0f7 	udiv	r0, r0, r7
 8003b14:	f7fd fbec 	bl	80012f0 <itoa_koma>
 8003b18:	f7fd fff4 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V ");
 8003b1c:	4824      	ldr	r0, [pc, #144]	; (8003bb0 <MenuSwing+0x1d4>)
 8003b1e:	f7fd fff1 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003b22:	6a20      	ldr	r0, [r4, #32]
 8003b24:	4631      	mov	r1, r6
 8003b26:	fbb0 f0f7 	udiv	r0, r0, r7
 8003b2a:	f7fd fbe1 	bl	80012f0 <itoa_koma>
 8003b2e:	f7fd ffe9 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V     ");
 8003b32:	4824      	ldr	r0, [pc, #144]	; (8003bc4 <MenuSwing+0x1e8>)
 8003b34:	f7fd ffe6 	bl	8001b04 <PrintToLCD>
 8003b38:	e001      	b.n	8003b3e <MenuSwing+0x162>
			if (CountShow<0) CountShow=MAXITEM6-1;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	702b      	strb	r3, [r5, #0]
		if(CountShow == 2)
 8003b3e:	f995 3000 	ldrsb.w	r3, [r5]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d124      	bne.n	8003b90 <MenuSwing+0x1b4>
			lcd_set_xy(0,0);
 8003b46:	2100      	movs	r1, #0
 8003b48:	4608      	mov	r0, r1
 8003b4a:	f7fd ff5b 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 8003b4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003b50:	f7fd fb56 	bl	8001200 <itoa>
 8003b54:	f7fd ffd6 	bl	8001b04 <PrintToLCD>
			PrintToLCD("s ");
 8003b58:	481b      	ldr	r0, [pc, #108]	; (8003bc8 <MenuSwing+0x1ec>)
 8003b5a:	f7fd ffd3 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 8003b5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003b60:	f7fd fb4e 	bl	8001200 <itoa>
 8003b64:	f7fd ffce 	bl	8001b04 <PrintToLCD>
			PrintToLCD("s      ");
 8003b68:	4818      	ldr	r0, [pc, #96]	; (8003bcc <MenuSwing+0x1f0>)
 8003b6a:	f7fd ffcb 	bl	8001b04 <PrintToLCD>
			lcd_set_xy(3,1);
 8003b6e:	2003      	movs	r0, #3
 8003b70:	2101      	movs	r1, #1
 8003b72:	f7fd ff47 	bl	8001a04 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 8003b76:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <MenuSwing+0x1f4>)
 8003b78:	6818      	ldr	r0, [r3, #0]
}
 8003b7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			ClockOnLCD_noSec(DischargeTimeSec);
 8003b7e:	f7fe bd23 	b.w	80025c8 <ClockOnLCD_noSec>
				lcd_set_xy(7,1);
 8003b82:	2101      	movs	r1, #1
 8003b84:	2007      	movs	r0, #7
 8003b86:	f7fd ff3d 	bl	8001a04 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	2002      	movs	r0, #2
 8003b8e:	e79e      	b.n	8003ace <MenuSwing+0xf2>
}
 8003b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b92:	bf00      	nop
 8003b94:	2000079c 	.word	0x2000079c
 8003b98:	2000079d 	.word	0x2000079d
 8003b9c:	200007cc 	.word	0x200007cc
 8003ba0:	20000154 	.word	0x20000154
 8003ba4:	2000086c 	.word	0x2000086c
 8003ba8:	200007c8 	.word	0x200007c8
 8003bac:	2000078d 	.word	0x2000078d
 8003bb0:	08005f2e 	.word	0x08005f2e
 8003bb4:	20000856 	.word	0x20000856
 8003bb8:	080061d8 	.word	0x080061d8
 8003bbc:	200007a4 	.word	0x200007a4
 8003bc0:	08005ab4 	.word	0x08005ab4
 8003bc4:	08005f1b 	.word	0x08005f1b
 8003bc8:	08005c0d 	.word	0x08005c0d
 8003bcc:	08006254 	.word	0x08006254
 8003bd0:	20000794 	.word	0x20000794

08003bd4 <MenuCheckingCapacity>:
{
 8003bd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8003bd8:	4b9d      	ldr	r3, [pc, #628]	; (8003e50 <MenuCheckingCapacity+0x27c>)
{
 8003bda:	4682      	mov	sl, r0
	if (EnterInMenu_Status == 0)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8003e54 <MenuCheckingCapacity+0x280>
 8003be2:	4e9d      	ldr	r6, [pc, #628]	; (8003e58 <MenuCheckingCapacity+0x284>)
 8003be4:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8003e5c <MenuCheckingCapacity+0x288>
 8003be8:	4d9d      	ldr	r5, [pc, #628]	; (8003e60 <MenuCheckingCapacity+0x28c>)
 8003bea:	4f9e      	ldr	r7, [pc, #632]	; (8003e64 <MenuCheckingCapacity+0x290>)
 8003bec:	4c9e      	ldr	r4, [pc, #632]	; (8003e68 <MenuCheckingCapacity+0x294>)
 8003bee:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f040 815e 	bne.w	8003eb4 <MenuCheckingCapacity+0x2e0>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003bf8:	4b9c      	ldr	r3, [pc, #624]	; (8003e6c <MenuCheckingCapacity+0x298>)
 8003bfa:	881a      	ldrh	r2, [r3, #0]
 8003bfc:	4b9c      	ldr	r3, [pc, #624]	; (8003e70 <MenuCheckingCapacity+0x29c>)
 8003bfe:	b292      	uxth	r2, r2
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	3305      	adds	r3, #5
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d215      	bcs.n	8003c34 <MenuCheckingCapacity+0x60>
			lcd_set_xy(0,0);
 8003c08:	4659      	mov	r1, fp
 8003c0a:	4658      	mov	r0, fp
 8003c0c:	f7fd fefa 	bl	8001a04 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003c10:	4898      	ldr	r0, [pc, #608]	; (8003e74 <MenuCheckingCapacity+0x2a0>)
 8003c12:	f7fd ff77 	bl	8001b04 <PrintToLCD>
			delay_ms(2000);
 8003c16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c1a:	f7fd f9d5 	bl	8000fc8 <delay_ms>
			lcd_set_xy(0,0);
 8003c1e:	4659      	mov	r1, fp
 8003c20:	4658      	mov	r0, fp
 8003c22:	f7fd feef 	bl	8001a04 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003c26:	4894      	ldr	r0, [pc, #592]	; (8003e78 <MenuCheckingCapacity+0x2a4>)
 8003c28:	f7fd ff6c 	bl	8001b04 <PrintToLCD>
			delay_ms(3000);
 8003c2c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003c30:	f7fd f9ca 	bl	8000fc8 <delay_ms>
		EnterInMenu_Status = 1;
 8003c34:	2301      	movs	r3, #1
		ChargeStatusForTimer = 0;
 8003c36:	f04f 0b00 	mov.w	fp, #0
		EnterInMenu_Status = 1;
 8003c3a:	4a85      	ldr	r2, [pc, #532]	; (8003e50 <MenuCheckingCapacity+0x27c>)
 8003c3c:	7013      	strb	r3, [r2, #0]
		DisChargeStatusForTimer = 0;
 8003c3e:	4a8f      	ldr	r2, [pc, #572]	; (8003e7c <MenuCheckingCapacity+0x2a8>)
		ChargeStatusForTimer = 0;
 8003c40:	f889 b000 	strb.w	fp, [r9]
		DisChargeStatusForTimer = 0;
 8003c44:	f882 b000 	strb.w	fp, [r2]
		DischargeTimeSec_Previous = 0;
 8003c48:	4a8d      	ldr	r2, [pc, #564]	; (8003e80 <MenuCheckingCapacity+0x2ac>)
		ChargeTimeSec = 0;
 8003c4a:	f8c6 b000 	str.w	fp, [r6]
		DischargeTimeSec = 0;
 8003c4e:	f8c8 b000 	str.w	fp, [r8]
		DischargeTimeSec_Previous = 0;
 8003c52:	f8c2 b000 	str.w	fp, [r2]
		BatteryCapacityCharge = 0;
 8003c56:	f8c5 b000 	str.w	fp, [r5]
		BatteryCapacityDischargeCurrent = 0;
 8003c5a:	f8c7 b000 	str.w	fp, [r7]
		ChargeStatusForTimer = 1;
 8003c5e:	f889 3000 	strb.w	r3, [r9]
		charge1();
 8003c62:	f7ff fc45 	bl	80034f0 <charge1>
		ChargeDischargeStatus = CHARGEs;
 8003c66:	2301      	movs	r3, #1
 8003c68:	4a86      	ldr	r2, [pc, #536]	; (8003e84 <MenuCheckingCapacity+0x2b0>)
		lcd_set_xy(0,0);
 8003c6a:	4659      	mov	r1, fp
 8003c6c:	4658      	mov	r0, fp
		ChargeDischargeStatus = CHARGEs;
 8003c6e:	7013      	strb	r3, [r2, #0]
		lcd_set_xy(0,0);
 8003c70:	f7fd fec8 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8003c74:	4884      	ldr	r0, [pc, #528]	; (8003e88 <MenuCheckingCapacity+0x2b4>)
 8003c76:	f7fd ff45 	bl	8001b04 <PrintToLCD>
		delay_ms(1000);
 8003c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c7e:	f7fd f9a3 	bl	8000fc8 <delay_ms>
		CheckingCapacityCounter = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	7023      	strb	r3, [r4, #0]
		if (Module16(Current)>5)
 8003c86:	4b81      	ldr	r3, [pc, #516]	; (8003e8c <MenuCheckingCapacity+0x2b8>)
 8003c88:	8818      	ldrh	r0, [r3, #0]
 8003c8a:	b200      	sxth	r0, r0
 8003c8c:	f7fd fb9c 	bl	80013c8 <Module16>
 8003c90:	2805      	cmp	r0, #5
 8003c92:	f340 8195 	ble.w	8003fc0 <MenuCheckingCapacity+0x3ec>
			if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8003c96:	4b7e      	ldr	r3, [pc, #504]	; (8003e90 <MenuCheckingCapacity+0x2bc>)
 8003c98:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8003e70 <MenuCheckingCapacity+0x29c>
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	f8db 2018 	ldr.w	r2, [fp, #24]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d229      	bcs.n	8003cfc <MenuCheckingCapacity+0x128>
 8003ca8:	4b76      	ldr	r3, [pc, #472]	; (8003e84 <MenuCheckingCapacity+0x2b0>)
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	2a02      	cmp	r2, #2
 8003cae:	d125      	bne.n	8003cfc <MenuCheckingCapacity+0x128>
 8003cb0:	4b78      	ldr	r3, [pc, #480]	; (8003e94 <MenuCheckingCapacity+0x2c0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cb8:	d920      	bls.n	8003cfc <MenuCheckingCapacity+0x128>
				DisChargeStatusForTimer = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	496f      	ldr	r1, [pc, #444]	; (8003e7c <MenuCheckingCapacity+0x2a8>)
 8003cbe:	700b      	strb	r3, [r1, #0]
				if (BatteryCapacityDischargeCurrent/3600 > 100)
 8003cc0:	6839      	ldr	r1, [r7, #0]
 8003cc2:	4b75      	ldr	r3, [pc, #468]	; (8003e98 <MenuCheckingCapacity+0x2c4>)
 8003cc4:	4299      	cmp	r1, r3
 8003cc6:	d904      	bls.n	8003cd2 <MenuCheckingCapacity+0xfe>
					MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8003cc8:	6838      	ldr	r0, [r7, #0]
 8003cca:	f8d8 1000 	ldr.w	r1, [r8]
 8003cce:	f7fe f913 	bl	8001ef8 <MenuTraining_WriteInLOG>
				DischargeTimeSec_Previous = DischargeTimeSec;
 8003cd2:	f8d8 2000 	ldr.w	r2, [r8]
 8003cd6:	4b6a      	ldr	r3, [pc, #424]	; (8003e80 <MenuCheckingCapacity+0x2ac>)
 8003cd8:	601a      	str	r2, [r3, #0]
				SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4b6f      	ldr	r3, [pc, #444]	; (8003e9c <MenuCheckingCapacity+0x2c8>)
 8003cde:	609a      	str	r2, [r3, #8]
				BatteryCapacityCharge = 0;
 8003ce0:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f889 2000 	strb.w	r2, [r9]
				BatteryCapacityCharge = 0;
 8003ce8:	602b      	str	r3, [r5, #0]
				ChargeTimeSec = 0;
 8003cea:	6033      	str	r3, [r6, #0]
				charge1();
 8003cec:	f7ff fc00 	bl	80034f0 <charge1>
				ChargeDischargeStatus = CHARGEs;
 8003cf0:	2201      	movs	r2, #1
				CheckingCapacityCounter ++;
 8003cf2:	7823      	ldrb	r3, [r4, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 8003cf8:	4b62      	ldr	r3, [pc, #392]	; (8003e84 <MenuCheckingCapacity+0x2b0>)
 8003cfa:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter<3)
 8003cfc:	4b64      	ldr	r3, [pc, #400]	; (8003e90 <MenuCheckingCapacity+0x2bc>)
 8003cfe:	f8db 2020 	ldr.w	r2, [fp, #32]
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d908      	bls.n	8003d1c <MenuCheckingCapacity+0x148>
 8003d0a:	4b5e      	ldr	r3, [pc, #376]	; (8003e84 <MenuCheckingCapacity+0x2b0>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d104      	bne.n	8003d1c <MenuCheckingCapacity+0x148>
 8003d12:	4b60      	ldr	r3, [pc, #384]	; (8003e94 <MenuCheckingCapacity+0x2c0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d1a:	d808      	bhi.n	8003d2e <MenuCheckingCapacity+0x15a>
 8003d1c:	4b60      	ldr	r3, [pc, #384]	; (8003ea0 <MenuCheckingCapacity+0x2cc>)
 8003d1e:	6832      	ldr	r2, [r6, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d922      	bls.n	8003d6c <MenuCheckingCapacity+0x198>
 8003d26:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <MenuCheckingCapacity+0x2b0>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d11e      	bne.n	8003d6c <MenuCheckingCapacity+0x198>
 8003d2e:	f994 3000 	ldrsb.w	r3, [r4]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	dc1a      	bgt.n	8003d6c <MenuCheckingCapacity+0x198>
				ChargeStatusForTimer = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	f889 3000 	strb.w	r3, [r9]
				if (BatteryCapacityCharge/3600 > 100)
 8003d3c:	682a      	ldr	r2, [r5, #0]
 8003d3e:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <MenuCheckingCapacity+0x2c4>)
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d904      	bls.n	8003d4e <MenuCheckingCapacity+0x17a>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003d44:	6828      	ldr	r0, [r5, #0]
 8003d46:	2201      	movs	r2, #1
 8003d48:	6831      	ldr	r1, [r6, #0]
 8003d4a:	f7fe f8d5 	bl	8001ef8 <MenuTraining_WriteInLOG>
				DisChargeStatusForTimer = 1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	4a4a      	ldr	r2, [pc, #296]	; (8003e7c <MenuCheckingCapacity+0x2a8>)
 8003d52:	7013      	strb	r3, [r2, #0]
				BatteryCapacityDischargeCurrent = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	603b      	str	r3, [r7, #0]
				DischargeTimeSec = 0;
 8003d58:	f8c8 3000 	str.w	r3, [r8]
				discharge1();
 8003d5c:	f7fe fcc0 	bl	80026e0 <discharge1>
				ChargeDischargeStatus = DISCHARGEs;
 8003d60:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003d62:	7823      	ldrb	r3, [r4, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = DISCHARGEs;
 8003d68:	4b46      	ldr	r3, [pc, #280]	; (8003e84 <MenuCheckingCapacity+0x2b0>)
 8003d6a:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter>=3)
 8003d6c:	4b48      	ldr	r3, [pc, #288]	; (8003e90 <MenuCheckingCapacity+0x2bc>)
 8003d6e:	f8db 2020 	ldr.w	r2, [fp, #32]
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d908      	bls.n	8003d8c <MenuCheckingCapacity+0x1b8>
 8003d7a:	4b42      	ldr	r3, [pc, #264]	; (8003e84 <MenuCheckingCapacity+0x2b0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d104      	bne.n	8003d8c <MenuCheckingCapacity+0x1b8>
 8003d82:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <MenuCheckingCapacity+0x2c0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d8a:	d808      	bhi.n	8003d9e <MenuCheckingCapacity+0x1ca>
 8003d8c:	4b44      	ldr	r3, [pc, #272]	; (8003ea0 <MenuCheckingCapacity+0x2cc>)
 8003d8e:	6832      	ldr	r2, [r6, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d91d      	bls.n	8003dd2 <MenuCheckingCapacity+0x1fe>
 8003d96:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <MenuCheckingCapacity+0x2b0>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d119      	bne.n	8003dd2 <MenuCheckingCapacity+0x1fe>
 8003d9e:	f994 3000 	ldrsb.w	r3, [r4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	dd15      	ble.n	8003dd2 <MenuCheckingCapacity+0x1fe>
	OUT_OFF();
 8003da6:	f7fe fc45 	bl	8002634 <OUT_OFF>
				ChargeStatusForTimer = 0;
 8003daa:	2300      	movs	r3, #0
				DisChargeStatusForTimer = 0;
 8003dac:	4a33      	ldr	r2, [pc, #204]	; (8003e7c <MenuCheckingCapacity+0x2a8>)
				ChargeStatusForTimer = 0;
 8003dae:	f889 3000 	strb.w	r3, [r9]
				DisChargeStatusForTimer = 0;
 8003db2:	7013      	strb	r3, [r2, #0]
				if (BatteryCapacityCharge/3600 > 100)
 8003db4:	682a      	ldr	r2, [r5, #0]
 8003db6:	4b38      	ldr	r3, [pc, #224]	; (8003e98 <MenuCheckingCapacity+0x2c4>)
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d904      	bls.n	8003dc6 <MenuCheckingCapacity+0x1f2>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003dbc:	6828      	ldr	r0, [r5, #0]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	6831      	ldr	r1, [r6, #0]
 8003dc2:	f7fe f899 	bl	8001ef8 <MenuTraining_WriteInLOG>
				CountShow = 2;
 8003dc6:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003dc8:	7823      	ldrb	r3, [r4, #0]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	7023      	strb	r3, [r4, #0]
				CountShow = 2;
 8003dce:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <MenuCheckingCapacity+0x2d0>)
 8003dd0:	701a      	strb	r2, [r3, #0]
				CountShow++;
 8003dd2:	4c34      	ldr	r4, [pc, #208]	; (8003ea4 <MenuCheckingCapacity+0x2d0>)
			if (key == KEY_NEXT)
 8003dd4:	f1ba 0f02 	cmp.w	sl, #2
				CountShow++;
 8003dd8:	f994 3000 	ldrsb.w	r3, [r4]
			if (key == KEY_NEXT)
 8003ddc:	f040 80ad 	bne.w	8003f3a <MenuCheckingCapacity+0x366>
				CountShow++;
 8003de0:	3301      	adds	r3, #1
 8003de2:	b25b      	sxtb	r3, r3
				if (CountShow==MAX_SCREENS__MENU_CAPACITY) CountShow=0;
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	f040 80b0 	bne.w	8003f4a <MenuCheckingCapacity+0x376>
 8003dea:	2300      	movs	r3, #0
 8003dec:	7023      	strb	r3, [r4, #0]
				lcd_set_xy(0,0);
 8003dee:	2100      	movs	r1, #0
 8003df0:	4608      	mov	r0, r1
 8003df2:	f7fd fe07 	bl	8001a04 <lcd_set_xy>
				PrintToLCD(itoa_koma(U_OUT,2));
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <MenuCheckingCapacity+0x2bc>)
 8003df8:	2102      	movs	r1, #2
 8003dfa:	8818      	ldrh	r0, [r3, #0]
 8003dfc:	b280      	uxth	r0, r0
 8003dfe:	f7fd fa77 	bl	80012f0 <itoa_koma>
 8003e02:	f7fd fe7f 	bl	8001b04 <PrintToLCD>
				PrintToLCD("V ");
 8003e06:	4828      	ldr	r0, [pc, #160]	; (8003ea8 <MenuCheckingCapacity+0x2d4>)
 8003e08:	f7fd fe7c 	bl	8001b04 <PrintToLCD>
				PrintToLCD(itoa(Current));
 8003e0c:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <MenuCheckingCapacity+0x2b8>)
 8003e0e:	8818      	ldrh	r0, [r3, #0]
 8003e10:	b200      	sxth	r0, r0
 8003e12:	f7fd f9f5 	bl	8001200 <itoa>
 8003e16:	f7fd fe75 	bl	8001b04 <PrintToLCD>
				PrintToLCD("mA     ");
 8003e1a:	4824      	ldr	r0, [pc, #144]	; (8003eac <MenuCheckingCapacity+0x2d8>)
 8003e1c:	f7fd fe72 	bl	8001b04 <PrintToLCD>
				lcd_set_xy(6,1);
 8003e20:	2101      	movs	r1, #1
 8003e22:	2006      	movs	r0, #6
 8003e24:	f7fd fdee 	bl	8001a04 <lcd_set_xy>
				LcdOutbyNumber(4,1);
 8003e28:	2101      	movs	r1, #1
 8003e2a:	2004      	movs	r0, #4
 8003e2c:	f7fd fe11 	bl	8001a52 <LcdOutbyNumber>
				if (Status_Out ==1)
 8003e30:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <MenuCheckingCapacity+0x2dc>)
 8003e32:	f893 a000 	ldrb.w	sl, [r3]
 8003e36:	f1ba 0f01 	cmp.w	sl, #1
 8003e3a:	f040 80ba 	bne.w	8003fb2 <MenuCheckingCapacity+0x3de>
					lcd_set_xy(7,1);
 8003e3e:	4651      	mov	r1, sl
 8003e40:	2007      	movs	r0, #7
 8003e42:	f7fd fddf 	bl	8001a04 <lcd_set_xy>
					LcdOutbyNumber(0,1);//charge
 8003e46:	4651      	mov	r1, sl
 8003e48:	2000      	movs	r0, #0
					LcdOutbyNumber(2,1);//discharge
 8003e4a:	f7fd fe02 	bl	8001a52 <LcdOutbyNumber>
 8003e4e:	e082      	b.n	8003f56 <MenuCheckingCapacity+0x382>
 8003e50:	2000079c 	.word	0x2000079c
 8003e54:	20000787 	.word	0x20000787
 8003e58:	20000788 	.word	0x20000788
 8003e5c:	20000794 	.word	0x20000794
 8003e60:	20000778 	.word	0x20000778
 8003e64:	2000077c 	.word	0x2000077c
 8003e68:	2000078c 	.word	0x2000078c
 8003e6c:	20000874 	.word	0x20000874
 8003e70:	20000154 	.word	0x20000154
 8003e74:	080061b6 	.word	0x080061b6
 8003e78:	080061c7 	.word	0x080061c7
 8003e7c:	20000790 	.word	0x20000790
 8003e80:	20000798 	.word	0x20000798
 8003e84:	20000270 	.word	0x20000270
 8003e88:	080061ee 	.word	0x080061ee
 8003e8c:	20000856 	.word	0x20000856
 8003e90:	2000086c 	.word	0x2000086c
 8003e94:	200007c8 	.word	0x200007c8
 8003e98:	00058c4f 	.word	0x00058c4f
 8003e9c:	200000f4 	.word	0x200000f4
 8003ea0:	20000a18 	.word	0x20000a18
 8003ea4:	2000078d 	.word	0x2000078d
 8003ea8:	08005f2e 	.word	0x08005f2e
 8003eac:	080061d8 	.word	0x080061d8
 8003eb0:	200007a4 	.word	0x200007a4
	if (CheckingCapacityCounter<=3)
 8003eb4:	f994 3000 	ldrsb.w	r3, [r4]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	f77f aee4 	ble.w	8003c86 <MenuCheckingCapacity+0xb2>
			CountShow++;
 8003ebe:	4c9e      	ldr	r4, [pc, #632]	; (8004138 <MenuCheckingCapacity+0x564>)
		if (key == KEY_NEXT)
 8003ec0:	2802      	cmp	r0, #2
			CountShow++;
 8003ec2:	f994 3000 	ldrsb.w	r3, [r4]
		if (key == KEY_NEXT)
 8003ec6:	f040 80c5 	bne.w	8004054 <MenuCheckingCapacity+0x480>
			CountShow++;
 8003eca:	3301      	adds	r3, #1
 8003ecc:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_CAPACITY1) CountShow=0;
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	f040 80c6 	bne.w	8004060 <MenuCheckingCapacity+0x48c>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	7023      	strb	r3, [r4, #0]
			lcd_set_xy(0,0);
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4608      	mov	r0, r1
 8003edc:	f7fd fd92 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003ee0:	4b96      	ldr	r3, [pc, #600]	; (800413c <MenuCheckingCapacity+0x568>)
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	8818      	ldrh	r0, [r3, #0]
 8003ee6:	b280      	uxth	r0, r0
 8003ee8:	f7fd fa02 	bl	80012f0 <itoa_koma>
 8003eec:	f7fd fe0a 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V ");
 8003ef0:	4893      	ldr	r0, [pc, #588]	; (8004140 <MenuCheckingCapacity+0x56c>)
 8003ef2:	f7fd fe07 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003ef6:	4b93      	ldr	r3, [pc, #588]	; (8004144 <MenuCheckingCapacity+0x570>)
 8003ef8:	8818      	ldrh	r0, [r3, #0]
 8003efa:	b200      	sxth	r0, r0
 8003efc:	f7fd f980 	bl	8001200 <itoa>
 8003f00:	f7fd fe00 	bl	8001b04 <PrintToLCD>
			PrintToLCD("mA     ");
 8003f04:	4890      	ldr	r0, [pc, #576]	; (8004148 <MenuCheckingCapacity+0x574>)
 8003f06:	f7fd fdfd 	bl	8001b04 <PrintToLCD>
			lcd_set_xy(6,1);
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	2006      	movs	r0, #6
 8003f0e:	f7fd fd79 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8003f12:	2101      	movs	r1, #1
 8003f14:	2004      	movs	r0, #4
 8003f16:	f7fd fd9c 	bl	8001a52 <LcdOutbyNumber>
			if (Status_Out ==1)
 8003f1a:	4b8c      	ldr	r3, [pc, #560]	; (800414c <MenuCheckingCapacity+0x578>)
 8003f1c:	f893 a000 	ldrb.w	sl, [r3]
 8003f20:	f1ba 0f01 	cmp.w	sl, #1
 8003f24:	f040 8100 	bne.w	8004128 <MenuCheckingCapacity+0x554>
				lcd_set_xy(7,1);
 8003f28:	4651      	mov	r1, sl
 8003f2a:	2007      	movs	r0, #7
 8003f2c:	f7fd fd6a 	bl	8001a04 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8003f30:	4651      	mov	r1, sl
 8003f32:	2000      	movs	r0, #0
				LcdOutbyNumber(2,1);//discharge
 8003f34:	f7fd fd8d 	bl	8001a52 <LcdOutbyNumber>
 8003f38:	e098      	b.n	800406c <MenuCheckingCapacity+0x498>
			if (key == KEY_BACK)
 8003f3a:	f1ba 0f01 	cmp.w	sl, #1
 8003f3e:	d105      	bne.n	8003f4c <MenuCheckingCapacity+0x378>
				CountShow--;
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b25b      	sxtb	r3, r3
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f2c0 809d 	blt.w	8004084 <MenuCheckingCapacity+0x4b0>
				CountShow++;
 8003f4a:	7023      	strb	r3, [r4, #0]
			if(CountShow == 0)
 8003f4c:	f994 3000 	ldrsb.w	r3, [r4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f43f af4c 	beq.w	8003dee <MenuCheckingCapacity+0x21a>
			if(CountShow == 1)
 8003f56:	f994 a000 	ldrsb.w	sl, [r4]
 8003f5a:	f1ba 0f01 	cmp.w	sl, #1
 8003f5e:	f040 8093 	bne.w	8004088 <MenuCheckingCapacity+0x4b4>
				lcd_set_xy(0,0);
 8003f62:	2100      	movs	r1, #0
 8003f64:	4608      	mov	r0, r1
 8003f66:	f7fd fd4d 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8003f6a:	f8db 0010 	ldr.w	r0, [fp, #16]
 8003f6e:	f7fd f947 	bl	8001200 <itoa>
 8003f72:	f7fd fdc7 	bl	8001b04 <PrintToLCD>
			PrintToLCD("h ");
 8003f76:	4876      	ldr	r0, [pc, #472]	; (8004150 <MenuCheckingCapacity+0x57c>)
 8003f78:	f7fd fdc4 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003f7c:	230a      	movs	r3, #10
 8003f7e:	f8db 0018 	ldr.w	r0, [fp, #24]
 8003f82:	4651      	mov	r1, sl
 8003f84:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f88:	f7fd f9b2 	bl	80012f0 <itoa_koma>
 8003f8c:	f7fd fdba 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V ");
 8003f90:	486b      	ldr	r0, [pc, #428]	; (8004140 <MenuCheckingCapacity+0x56c>)
 8003f92:	f7fd fdb7 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003f96:	230a      	movs	r3, #10
 8003f98:	f8db 0020 	ldr.w	r0, [fp, #32]
 8003f9c:	4651      	mov	r1, sl
 8003f9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003fa2:	f7fd f9a5 	bl	80012f0 <itoa_koma>
 8003fa6:	f7fd fdad 	bl	8001b04 <PrintToLCD>
			PrintToLCD("V     ");
 8003faa:	486a      	ldr	r0, [pc, #424]	; (8004154 <MenuCheckingCapacity+0x580>)
 8003fac:	f7fd fdaa 	bl	8001b04 <PrintToLCD>
 8003fb0:	e06a      	b.n	8004088 <MenuCheckingCapacity+0x4b4>
					lcd_set_xy(7,1);
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	2007      	movs	r0, #7
 8003fb6:	f7fd fd25 	bl	8001a04 <lcd_set_xy>
					LcdOutbyNumber(2,1);//discharge
 8003fba:	2101      	movs	r1, #1
 8003fbc:	2002      	movs	r0, #2
 8003fbe:	e744      	b.n	8003e4a <MenuCheckingCapacity+0x276>
			if (TimerForReadyMeasurement_ms>1000)
 8003fc0:	4b65      	ldr	r3, [pc, #404]	; (8004158 <MenuCheckingCapacity+0x584>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fc8:	d906      	bls.n	8003fd8 <MenuCheckingCapacity+0x404>
				lcd_set_xy(0,0);
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	f7fd fd19 	bl	8001a04 <lcd_set_xy>
				PrintToLCD("NO/BAD Battery  ");
 8003fd2:	4862      	ldr	r0, [pc, #392]	; (800415c <MenuCheckingCapacity+0x588>)
 8003fd4:	f7fd fd96 	bl	8001b04 <PrintToLCD>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003fd8:	4861      	ldr	r0, [pc, #388]	; (8004160 <MenuCheckingCapacity+0x58c>)
 8003fda:	f001 f94f 	bl	800527c <printToBufferWithoutEndUART1>
 8003fde:	4b61      	ldr	r3, [pc, #388]	; (8004164 <MenuCheckingCapacity+0x590>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	7819      	ldrb	r1, [r3, #0]
 8003fe4:	4860      	ldr	r0, [pc, #384]	; (8004168 <MenuCheckingCapacity+0x594>)
 8003fe6:	f001 f987 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003fea:	485d      	ldr	r0, [pc, #372]	; (8004160 <MenuCheckingCapacity+0x58c>)
 8003fec:	f001 f946 	bl	800527c <printToBufferWithoutEndUART1>
 8003ff0:	f899 1000 	ldrb.w	r1, [r9]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	485d      	ldr	r0, [pc, #372]	; (800416c <MenuCheckingCapacity+0x598>)
 8003ff8:	f001 f97e 	bl	80052f8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003ffc:	4858      	ldr	r0, [pc, #352]	; (8004160 <MenuCheckingCapacity+0x58c>)
 8003ffe:	f001 f93d 	bl	800527c <printToBufferWithoutEndUART1>
 8004002:	6831      	ldr	r1, [r6, #0]
 8004004:	2200      	movs	r2, #0
 8004006:	485a      	ldr	r0, [pc, #360]	; (8004170 <MenuCheckingCapacity+0x59c>)
 8004008:	f001 f976 	bl	80052f8 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 800400c:	4854      	ldr	r0, [pc, #336]	; (8004160 <MenuCheckingCapacity+0x58c>)
 800400e:	f001 f935 	bl	800527c <printToBufferWithoutEndUART1>
 8004012:	6829      	ldr	r1, [r5, #0]
 8004014:	2200      	movs	r2, #0
 8004016:	4857      	ldr	r0, [pc, #348]	; (8004174 <MenuCheckingCapacity+0x5a0>)
 8004018:	f001 f96e 	bl	80052f8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 800401c:	4850      	ldr	r0, [pc, #320]	; (8004160 <MenuCheckingCapacity+0x58c>)
 800401e:	f001 f92d 	bl	800527c <printToBufferWithoutEndUART1>
 8004022:	4b55      	ldr	r3, [pc, #340]	; (8004178 <MenuCheckingCapacity+0x5a4>)
 8004024:	2200      	movs	r2, #0
 8004026:	7819      	ldrb	r1, [r3, #0]
 8004028:	4854      	ldr	r0, [pc, #336]	; (800417c <MenuCheckingCapacity+0x5a8>)
 800402a:	f001 f965 	bl	80052f8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800402e:	484c      	ldr	r0, [pc, #304]	; (8004160 <MenuCheckingCapacity+0x58c>)
 8004030:	f001 f924 	bl	800527c <printToBufferWithoutEndUART1>
 8004034:	f8d8 1000 	ldr.w	r1, [r8]
 8004038:	2200      	movs	r2, #0
 800403a:	4851      	ldr	r0, [pc, #324]	; (8004180 <MenuCheckingCapacity+0x5ac>)
 800403c:	f001 f95c 	bl	80052f8 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8004040:	4847      	ldr	r0, [pc, #284]	; (8004160 <MenuCheckingCapacity+0x58c>)
 8004042:	f001 f91b 	bl	800527c <printToBufferWithoutEndUART1>
 8004046:	6839      	ldr	r1, [r7, #0]
 8004048:	2200      	movs	r2, #0
}
 800404a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 800404e:	484d      	ldr	r0, [pc, #308]	; (8004184 <MenuCheckingCapacity+0x5b0>)
 8004050:	f001 b952 	b.w	80052f8 <printToBufferUART1D>
		if (key == KEY_BACK)
 8004054:	2801      	cmp	r0, #1
 8004056:	d104      	bne.n	8004062 <MenuCheckingCapacity+0x48e>
			CountShow--;
 8004058:	3b01      	subs	r3, #1
 800405a:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 800405c:	2b00      	cmp	r3, #0
 800405e:	db11      	blt.n	8004084 <MenuCheckingCapacity+0x4b0>
			CountShow++;
 8004060:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8004062:	f994 3000 	ldrsb.w	r3, [r4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f43f af36 	beq.w	8003ed8 <MenuCheckingCapacity+0x304>
		if(CountShow == 1)
 800406c:	f994 a000 	ldrsb.w	sl, [r4]
 8004070:	f1ba 0f01 	cmp.w	sl, #1
 8004074:	d108      	bne.n	8004088 <MenuCheckingCapacity+0x4b4>
			lcd_set_xy(0,0);
 8004076:	2100      	movs	r1, #0
 8004078:	4608      	mov	r0, r1
 800407a:	f7fd fcc3 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 800407e:	f8df b108 	ldr.w	fp, [pc, #264]	; 8004188 <MenuCheckingCapacity+0x5b4>
 8004082:	e772      	b.n	8003f6a <MenuCheckingCapacity+0x396>
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 8004084:	2303      	movs	r3, #3
 8004086:	7023      	strb	r3, [r4, #0]
		if(CountShow == 2)
 8004088:	f994 a000 	ldrsb.w	sl, [r4]
 800408c:	f1ba 0f02 	cmp.w	sl, #2
 8004090:	d122      	bne.n	80040d8 <MenuCheckingCapacity+0x504>
			lcd_set_xy(0,0);
 8004092:	2100      	movs	r1, #0
 8004094:	4608      	mov	r0, r1
 8004096:	f7fd fcb5 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 800409a:	2101      	movs	r1, #1
 800409c:	4650      	mov	r0, sl
 800409e:	f7fd fcd8 	bl	8001a52 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80040a2:	2100      	movs	r1, #0
 80040a4:	2001      	movs	r0, #1
 80040a6:	f7fd fcad 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(" ");
 80040aa:	4838      	ldr	r0, [pc, #224]	; (800418c <MenuCheckingCapacity+0x5b8>)
 80040ac:	f7fd fd2a 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 80040b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80040b4:	6838      	ldr	r0, [r7, #0]
 80040b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80040ba:	f7fd f8a1 	bl	8001200 <itoa>
 80040be:	f7fd fd21 	bl	8001b04 <PrintToLCD>
			PrintToLCD("mAH      ");
 80040c2:	4833      	ldr	r0, [pc, #204]	; (8004190 <MenuCheckingCapacity+0x5bc>)
 80040c4:	f7fd fd1e 	bl	8001b04 <PrintToLCD>
			lcd_set_xy(3,1);
 80040c8:	2003      	movs	r0, #3
 80040ca:	2101      	movs	r1, #1
 80040cc:	f7fd fc9a 	bl	8001a04 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 80040d0:	f8d8 0000 	ldr.w	r0, [r8]
 80040d4:	f7fe fa78 	bl	80025c8 <ClockOnLCD_noSec>
		if(CountShow == 3)
 80040d8:	f994 4000 	ldrsb.w	r4, [r4]
 80040dc:	2c03      	cmp	r4, #3
 80040de:	f47f af7b 	bne.w	8003fd8 <MenuCheckingCapacity+0x404>
			lcd_set_xy(0,0);
 80040e2:	2100      	movs	r1, #0
 80040e4:	4608      	mov	r0, r1
 80040e6:	f7fd fc8d 	bl	8001a04 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 80040ea:	2101      	movs	r1, #1
 80040ec:	2000      	movs	r0, #0
 80040ee:	f7fd fcb0 	bl	8001a52 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80040f2:	2100      	movs	r1, #0
 80040f4:	2001      	movs	r0, #1
 80040f6:	f7fd fc85 	bl	8001a04 <lcd_set_xy>
			PrintToLCD(" ");
 80040fa:	4824      	ldr	r0, [pc, #144]	; (800418c <MenuCheckingCapacity+0x5b8>)
 80040fc:	f7fd fd02 	bl	8001b04 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8004100:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004104:	6828      	ldr	r0, [r5, #0]
 8004106:	fbb0 f0f3 	udiv	r0, r0, r3
 800410a:	f7fd f879 	bl	8001200 <itoa>
 800410e:	f7fd fcf9 	bl	8001b04 <PrintToLCD>
			PrintToLCD("mAH      ");
 8004112:	481f      	ldr	r0, [pc, #124]	; (8004190 <MenuCheckingCapacity+0x5bc>)
 8004114:	f7fd fcf6 	bl	8001b04 <PrintToLCD>
			lcd_set_xy(3,1);
 8004118:	4620      	mov	r0, r4
 800411a:	2101      	movs	r1, #1
 800411c:	f7fd fc72 	bl	8001a04 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 8004120:	6830      	ldr	r0, [r6, #0]
 8004122:	f7fe fa51 	bl	80025c8 <ClockOnLCD_noSec>
 8004126:	e757      	b.n	8003fd8 <MenuCheckingCapacity+0x404>
				lcd_set_xy(7,1);
 8004128:	2101      	movs	r1, #1
 800412a:	2007      	movs	r0, #7
 800412c:	f7fd fc6a 	bl	8001a04 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 8004130:	2101      	movs	r1, #1
 8004132:	2002      	movs	r0, #2
 8004134:	e6fe      	b.n	8003f34 <MenuCheckingCapacity+0x360>
 8004136:	bf00      	nop
 8004138:	2000078d 	.word	0x2000078d
 800413c:	2000086c 	.word	0x2000086c
 8004140:	08005f2e 	.word	0x08005f2e
 8004144:	20000856 	.word	0x20000856
 8004148:	080061d8 	.word	0x080061d8
 800414c:	200007a4 	.word	0x200007a4
 8004150:	08005ab4 	.word	0x08005ab4
 8004154:	08005f1b 	.word	0x08005f1b
 8004158:	200007c8 	.word	0x200007c8
 800415c:	08006209 	.word	0x08006209
 8004160:	0800593c 	.word	0x0800593c
 8004164:	2000079c 	.word	0x2000079c
 8004168:	08006133 	.word	0x08006133
 800416c:	08006148 	.word	0x08006148
 8004170:	0800615d 	.word	0x0800615d
 8004174:	0800621a 	.word	0x0800621a
 8004178:	20000790 	.word	0x20000790
 800417c:	0800616d 	.word	0x0800616d
 8004180:	08006185 	.word	0x08006185
 8004184:	08006232 	.word	0x08006232
 8004188:	20000154 	.word	0x20000154
 800418c:	080060d7 	.word	0x080060d7
 8004190:	080061ff 	.word	0x080061ff

08004194 <MenuDIAGNOSTIC>:
	EnterInMenu_Status=1;
 8004194:	2201      	movs	r2, #1
{
 8004196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status=1;
 800419a:	4baa      	ldr	r3, [pc, #680]	; (8004444 <MenuDIAGNOSTIC+0x2b0>)
		CountShow1++;
 800419c:	4caa      	ldr	r4, [pc, #680]	; (8004448 <MenuDIAGNOSTIC+0x2b4>)
	if (key == KEY_NEXT)
 800419e:	2802      	cmp	r0, #2
	EnterInMenu_Status=1;
 80041a0:	701a      	strb	r2, [r3, #0]
{
 80041a2:	b086      	sub	sp, #24
		CountShow1++;
 80041a4:	f994 3000 	ldrsb.w	r3, [r4]
	if (key == KEY_NEXT)
 80041a8:	d128      	bne.n	80041fc <MenuDIAGNOSTIC+0x68>
		CountShow1++;
 80041aa:	4413      	add	r3, r2
 80041ac:	b25b      	sxtb	r3, r3
		if (CountShow1==MAXITEM) CountShow1=0;
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d12a      	bne.n	8004208 <MenuDIAGNOSTIC+0x74>
 80041b2:	2300      	movs	r3, #0
 80041b4:	7023      	strb	r3, [r4, #0]
		lcd_set_xy(0,0);
 80041b6:	2100      	movs	r1, #0
 80041b8:	4608      	mov	r0, r1
	OUT_OFF();
 80041ba:	f7fe fa3b 	bl	8002634 <OUT_OFF>
		lcd_set_xy(0,0);
 80041be:	f7fd fc21 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("Uin=");
 80041c2:	48a2      	ldr	r0, [pc, #648]	; (800444c <MenuDIAGNOSTIC+0x2b8>)
 80041c4:	f7fd fc9e 	bl	8001b04 <PrintToLCD>
		PrintToLCD(		itoa_koma(U_IN/10,1));
 80041c8:	200a      	movs	r0, #10
 80041ca:	4ba1      	ldr	r3, [pc, #644]	; (8004450 <MenuDIAGNOSTIC+0x2bc>)
 80041cc:	2101      	movs	r1, #1
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	fbb3 f0f0 	udiv	r0, r3, r0
 80041d6:	f7fd f88b 	bl	80012f0 <itoa_koma>
 80041da:	f7fd fc93 	bl	8001b04 <PrintToLCD>
		PrintToLCD(" Uc=");
 80041de:	489d      	ldr	r0, [pc, #628]	; (8004454 <MenuDIAGNOSTIC+0x2c0>)
 80041e0:	f7fd fc90 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa_koma(U_Controller,2));
 80041e4:	4b9c      	ldr	r3, [pc, #624]	; (8004458 <MenuDIAGNOSTIC+0x2c4>)
 80041e6:	2102      	movs	r1, #2
 80041e8:	8818      	ldrh	r0, [r3, #0]
 80041ea:	b280      	uxth	r0, r0
 80041ec:	f7fd f880 	bl	80012f0 <itoa_koma>
 80041f0:	f7fd fc88 	bl	8001b04 <PrintToLCD>
		PrintToLCD("    ");
 80041f4:	4899      	ldr	r0, [pc, #612]	; (800445c <MenuDIAGNOSTIC+0x2c8>)
 80041f6:	f7fd fc85 	bl	8001b04 <PrintToLCD>
 80041fa:	e00a      	b.n	8004212 <MenuDIAGNOSTIC+0x7e>
	if (key == KEY_BACK)
 80041fc:	2801      	cmp	r0, #1
 80041fe:	d104      	bne.n	800420a <MenuDIAGNOSTIC+0x76>
		CountShow1--;
 8004200:	3b01      	subs	r3, #1
 8004202:	b25b      	sxtb	r3, r3
		if (CountShow1<0) CountShow1=MAXITEM-1;
 8004204:	2b00      	cmp	r3, #0
 8004206:	db2e      	blt.n	8004266 <MenuDIAGNOSTIC+0xd2>
		CountShow1++;
 8004208:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 0)
 800420a:	f994 3000 	ldrsb.w	r3, [r4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0d1      	beq.n	80041b6 <MenuDIAGNOSTIC+0x22>
	if(CountShow1 == 1)
 8004212:	f994 5000 	ldrsb.w	r5, [r4]
 8004216:	2d01      	cmp	r5, #1
 8004218:	d127      	bne.n	800426a <MenuDIAGNOSTIC+0xd6>
		lcd_set_xy(0,0);
 800421a:	2100      	movs	r1, #0
 800421c:	4608      	mov	r0, r1
	OUT_OFF();
 800421e:	f7fe fa09 	bl	8002634 <OUT_OFF>
		lcd_set_xy(0,0);
 8004222:	f7fd fbef 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("PA3  -- ADC1_IN3 ");
 8004226:	488e      	ldr	r0, [pc, #568]	; (8004460 <MenuDIAGNOSTIC+0x2cc>)
 8004228:	f7fd fc6c 	bl	8001b04 <PrintToLCD>
		lcd_set_xy(0,1);
 800422c:	4629      	mov	r1, r5
 800422e:	2000      	movs	r0, #0
 8004230:	f7fd fbe8 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("Uout ");
 8004234:	488b      	ldr	r0, [pc, #556]	; (8004464 <MenuDIAGNOSTIC+0x2d0>)
 8004236:	f7fd fc65 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa_koma(U_OUT,2));
 800423a:	4b8b      	ldr	r3, [pc, #556]	; (8004468 <MenuDIAGNOSTIC+0x2d4>)
 800423c:	2102      	movs	r1, #2
 800423e:	8818      	ldrh	r0, [r3, #0]
 8004240:	b280      	uxth	r0, r0
 8004242:	f7fd f855 	bl	80012f0 <itoa_koma>
 8004246:	f7fd fc5d 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V ");
 800424a:	4888      	ldr	r0, [pc, #544]	; (800446c <MenuDIAGNOSTIC+0x2d8>)
 800424c:	f7fd fc5a 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[2])));
 8004250:	4b87      	ldr	r3, [pc, #540]	; (8004470 <MenuDIAGNOSTIC+0x2dc>)
 8004252:	8898      	ldrh	r0, [r3, #4]
 8004254:	b280      	uxth	r0, r0
 8004256:	f7fc ffd3 	bl	8001200 <itoa>
 800425a:	f7fd fc53 	bl	8001b04 <PrintToLCD>
		PrintToLCD("      ");
 800425e:	4885      	ldr	r0, [pc, #532]	; (8004474 <MenuDIAGNOSTIC+0x2e0>)
 8004260:	f7fd fc50 	bl	8001b04 <PrintToLCD>
 8004264:	e001      	b.n	800426a <MenuDIAGNOSTIC+0xd6>
		if (CountShow1<0) CountShow1=MAXITEM-1;
 8004266:	2307      	movs	r3, #7
 8004268:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 2)
 800426a:	f994 5000 	ldrsb.w	r5, [r4]
 800426e:	2d02      	cmp	r5, #2
 8004270:	d11d      	bne.n	80042ae <MenuDIAGNOSTIC+0x11a>
		lcd_set_xy(0,0);
 8004272:	2100      	movs	r1, #0
 8004274:	4608      	mov	r0, r1
		OUT_ON();
 8004276:	f7fe fbb7 	bl	80029e8 <OUT_ON>
		lcd_set_xy(0,0);
 800427a:	f7fd fbc3 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("Uout ");
 800427e:	4879      	ldr	r0, [pc, #484]	; (8004464 <MenuDIAGNOSTIC+0x2d0>)
 8004280:	f7fd fc40 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa_koma(U_OUT,2));
 8004284:	4b78      	ldr	r3, [pc, #480]	; (8004468 <MenuDIAGNOSTIC+0x2d4>)
 8004286:	4629      	mov	r1, r5
 8004288:	8818      	ldrh	r0, [r3, #0]
 800428a:	b280      	uxth	r0, r0
 800428c:	f7fd f830 	bl	80012f0 <itoa_koma>
 8004290:	f7fd fc38 	bl	8001b04 <PrintToLCD>
		PrintToLCD("V ");
 8004294:	4875      	ldr	r0, [pc, #468]	; (800446c <MenuDIAGNOSTIC+0x2d8>)
 8004296:	f7fd fc35 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[2])));
 800429a:	4b75      	ldr	r3, [pc, #468]	; (8004470 <MenuDIAGNOSTIC+0x2dc>)
 800429c:	8898      	ldrh	r0, [r3, #4]
 800429e:	b280      	uxth	r0, r0
 80042a0:	f7fc ffae 	bl	8001200 <itoa>
 80042a4:	f7fd fc2e 	bl	8001b04 <PrintToLCD>
		PrintToLCD("      ");
 80042a8:	4872      	ldr	r0, [pc, #456]	; (8004474 <MenuDIAGNOSTIC+0x2e0>)
 80042aa:	f7fd fc2b 	bl	8001b04 <PrintToLCD>
	if(CountShow1 == 3)
 80042ae:	f994 3000 	ldrsb.w	r3, [r4]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d11c      	bne.n	80042f0 <MenuDIAGNOSTIC+0x15c>
		lcd_set_xy(0,0);
 80042b6:	2100      	movs	r1, #0
 80042b8:	4608      	mov	r0, r1
		OUT_ON();
 80042ba:	f7fe fb95 	bl	80029e8 <OUT_ON>
		lcd_set_xy(0,0);
 80042be:	f7fd fba1 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("Ix50 ");
 80042c2:	486d      	ldr	r0, [pc, #436]	; (8004478 <MenuDIAGNOSTIC+0x2e4>)
 80042c4:	f7fd fc1e 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(Current_x50));
 80042c8:	4b6c      	ldr	r3, [pc, #432]	; (800447c <MenuDIAGNOSTIC+0x2e8>)
 80042ca:	8818      	ldrh	r0, [r3, #0]
 80042cc:	b200      	sxth	r0, r0
 80042ce:	f7fc ff97 	bl	8001200 <itoa>
 80042d2:	f7fd fc17 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mA ");
 80042d6:	486a      	ldr	r0, [pc, #424]	; (8004480 <MenuDIAGNOSTIC+0x2ec>)
 80042d8:	f7fd fc14 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[0])));
 80042dc:	4b64      	ldr	r3, [pc, #400]	; (8004470 <MenuDIAGNOSTIC+0x2dc>)
 80042de:	8818      	ldrh	r0, [r3, #0]
 80042e0:	b280      	uxth	r0, r0
 80042e2:	f7fc ff8d 	bl	8001200 <itoa>
 80042e6:	f7fd fc0d 	bl	8001b04 <PrintToLCD>
		PrintToLCD("      ");
 80042ea:	4862      	ldr	r0, [pc, #392]	; (8004474 <MenuDIAGNOSTIC+0x2e0>)
 80042ec:	f7fd fc0a 	bl	8001b04 <PrintToLCD>
	if(CountShow1 == 4)
 80042f0:	f994 3000 	ldrsb.w	r3, [r4]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d11c      	bne.n	8004332 <MenuDIAGNOSTIC+0x19e>
		lcd_set_xy(0,0);
 80042f8:	2100      	movs	r1, #0
 80042fa:	4608      	mov	r0, r1
		OUT_OFF();
 80042fc:	f7fe f99a 	bl	8002634 <OUT_OFF>
		lcd_set_xy(0,0);
 8004300:	f7fd fb80 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("Ix1 ");
 8004304:	485f      	ldr	r0, [pc, #380]	; (8004484 <MenuDIAGNOSTIC+0x2f0>)
 8004306:	f7fd fbfd 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(Current_x1));
 800430a:	4b5f      	ldr	r3, [pc, #380]	; (8004488 <MenuDIAGNOSTIC+0x2f4>)
 800430c:	8818      	ldrh	r0, [r3, #0]
 800430e:	b200      	sxth	r0, r0
 8004310:	f7fc ff76 	bl	8001200 <itoa>
 8004314:	f7fd fbf6 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mA ");
 8004318:	4859      	ldr	r0, [pc, #356]	; (8004480 <MenuDIAGNOSTIC+0x2ec>)
 800431a:	f7fd fbf3 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[3]));
 800431e:	4b54      	ldr	r3, [pc, #336]	; (8004470 <MenuDIAGNOSTIC+0x2dc>)
 8004320:	88d8      	ldrh	r0, [r3, #6]
 8004322:	b280      	uxth	r0, r0
 8004324:	f7fc ff6c 	bl	8001200 <itoa>
 8004328:	f7fd fbec 	bl	8001b04 <PrintToLCD>
		PrintToLCD("       ");
 800432c:	4857      	ldr	r0, [pc, #348]	; (800448c <MenuDIAGNOSTIC+0x2f8>)
 800432e:	f7fd fbe9 	bl	8001b04 <PrintToLCD>
	if(CountShow1 == 5)
 8004332:	f994 3000 	ldrsb.w	r3, [r4]
 8004336:	2b05      	cmp	r3, #5
 8004338:	d147      	bne.n	80043ca <MenuDIAGNOSTIC+0x236>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 800433a:	4e55      	ldr	r6, [pc, #340]	; (8004490 <MenuDIAGNOSTIC+0x2fc>)
 800433c:	4f55      	ldr	r7, [pc, #340]	; (8004494 <MenuDIAGNOSTIC+0x300>)
		OUT_ON();
 800433e:	f7fe fb53 	bl	80029e8 <OUT_ON>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8004342:	8833      	ldrh	r3, [r6, #0]
 8004344:	8839      	ldrh	r1, [r7, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	b289      	uxth	r1, r1
 800434a:	1a5b      	subs	r3, r3, r1
 800434c:	f242 7110 	movw	r1, #10000	; 0x2710
 8004350:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8004498 <MenuDIAGNOSTIC+0x304>
 8004354:	434b      	muls	r3, r1
 8004356:	f8b8 2000 	ldrh.w	r2, [r8]
		lcd_set_xy(0,0);
 800435a:	2100      	movs	r1, #0
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 800435c:	b212      	sxth	r2, r2
 800435e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004362:	4d4e      	ldr	r5, [pc, #312]	; (800449c <MenuDIAGNOSTIC+0x308>)
		lcd_set_xy(0,0);
 8004364:	4608      	mov	r0, r1
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8004366:	64ab      	str	r3, [r5, #72]	; 0x48
		lcd_set_xy(0,0);
 8004368:	f7fd fb4c 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("R=");
 800436c:	484c      	ldr	r0, [pc, #304]	; (80044a0 <MenuDIAGNOSTIC+0x30c>)
 800436e:	f7fd fbc9 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 8004372:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8004374:	f7fc ff44 	bl	8001200 <itoa>
 8004378:	f7fd fbc4 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mOm ");
 800437c:	4849      	ldr	r0, [pc, #292]	; (80044a4 <MenuDIAGNOSTIC+0x310>)
 800437e:	f7fd fbc1 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_MOSFET));
 8004382:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8004384:	f7fc ff3c 	bl	8001200 <itoa>
 8004388:	f7fd fbbc 	bl	8001b04 <PrintToLCD>
		PrintToLCD("mOm    ");
 800438c:	4846      	ldr	r0, [pc, #280]	; (80044a8 <MenuDIAGNOSTIC+0x314>)
 800438e:	f7fd fbb9 	bl	8001b04 <PrintToLCD>
		logDebugD("I: ",Current,0);
 8004392:	4846      	ldr	r0, [pc, #280]	; (80044ac <MenuDIAGNOSTIC+0x318>)
 8004394:	f000 ff72 	bl	800527c <printToBufferWithoutEndUART1>
 8004398:	f8b8 1000 	ldrh.w	r1, [r8]
 800439c:	2200      	movs	r2, #0
 800439e:	b209      	sxth	r1, r1
 80043a0:	4843      	ldr	r0, [pc, #268]	; (80044b0 <MenuDIAGNOSTIC+0x31c>)
 80043a2:	f000 ffa9 	bl	80052f8 <printToBufferUART1D>
		logDebugD("U_PS: ",U_PS,2);
 80043a6:	4841      	ldr	r0, [pc, #260]	; (80044ac <MenuDIAGNOSTIC+0x318>)
 80043a8:	f000 ff68 	bl	800527c <printToBufferWithoutEndUART1>
 80043ac:	8831      	ldrh	r1, [r6, #0]
 80043ae:	2202      	movs	r2, #2
 80043b0:	b289      	uxth	r1, r1
 80043b2:	4840      	ldr	r0, [pc, #256]	; (80044b4 <MenuDIAGNOSTIC+0x320>)
 80043b4:	f000 ffa0 	bl	80052f8 <printToBufferUART1D>
		logDebugD("U out: ",U_OUT_ForSetResistance,2);
 80043b8:	483c      	ldr	r0, [pc, #240]	; (80044ac <MenuDIAGNOSTIC+0x318>)
 80043ba:	f000 ff5f 	bl	800527c <printToBufferWithoutEndUART1>
 80043be:	8839      	ldrh	r1, [r7, #0]
 80043c0:	2202      	movs	r2, #2
 80043c2:	483d      	ldr	r0, [pc, #244]	; (80044b8 <MenuDIAGNOSTIC+0x324>)
 80043c4:	b289      	uxth	r1, r1
 80043c6:	f000 ff97 	bl	80052f8 <printToBufferUART1D>
	if(CountShow1 == 6)
 80043ca:	f994 3000 	ldrsb.w	r3, [r4]
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d10f      	bne.n	80043f2 <MenuDIAGNOSTIC+0x25e>
		lcd_set_xy(0,0);
 80043d2:	2100      	movs	r1, #0
 80043d4:	4608      	mov	r0, r1
	OUT_OFF();
 80043d6:	f7fe f92d 	bl	8002634 <OUT_OFF>
		lcd_set_xy(0,0);
 80043da:	f7fd fb13 	bl	8001a04 <lcd_set_xy>
		PrintToLCD(ClockStringWithSec(time_sec,s));
 80043de:	4b37      	ldr	r3, [pc, #220]	; (80044bc <MenuDIAGNOSTIC+0x328>)
 80043e0:	a901      	add	r1, sp, #4
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	f7fd f837 	bl	8001456 <ClockStringWithSec>
 80043e8:	f7fd fb8c 	bl	8001b04 <PrintToLCD>
		PrintToLCD("        ");
 80043ec:	4834      	ldr	r0, [pc, #208]	; (80044c0 <MenuDIAGNOSTIC+0x32c>)
 80043ee:	f7fd fb89 	bl	8001b04 <PrintToLCD>
	if(CountShow1 == 7)
 80043f2:	f994 3000 	ldrsb.w	r3, [r4]
 80043f6:	2b07      	cmp	r3, #7
 80043f8:	d120      	bne.n	800443c <MenuDIAGNOSTIC+0x2a8>
		lcd_set_xy(0,0);
 80043fa:	2100      	movs	r1, #0
 80043fc:	4608      	mov	r0, r1
		OUT_ON();
 80043fe:	f7fe faf3 	bl	80029e8 <OUT_ON>
		lcd_set_xy(0,0);
 8004402:	f7fd faff 	bl	8001a04 <lcd_set_xy>
		PrintToLCD("T=");
 8004406:	482f      	ldr	r0, [pc, #188]	; (80044c4 <MenuDIAGNOSTIC+0x330>)
 8004408:	f7fd fb7c 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(GetTemperature(Rt)));
 800440c:	4b2e      	ldr	r3, [pc, #184]	; (80044c8 <MenuDIAGNOSTIC+0x334>)
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	f7fc fc22 	bl	8000c58 <GetTemperature>
 8004414:	f7fc fef4 	bl	8001200 <itoa>
 8004418:	f7fd fb74 	bl	8001b04 <PrintToLCD>
		PrintToLCD("C   ");
 800441c:	482b      	ldr	r0, [pc, #172]	; (80044cc <MenuDIAGNOSTIC+0x338>)
 800441e:	f7fd fb71 	bl	8001b04 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[5]));
 8004422:	4b13      	ldr	r3, [pc, #76]	; (8004470 <MenuDIAGNOSTIC+0x2dc>)
 8004424:	8958      	ldrh	r0, [r3, #10]
 8004426:	b280      	uxth	r0, r0
 8004428:	f7fc feea 	bl	8001200 <itoa>
 800442c:	f7fd fb6a 	bl	8001b04 <PrintToLCD>
		PrintToLCD("    ");
 8004430:	480a      	ldr	r0, [pc, #40]	; (800445c <MenuDIAGNOSTIC+0x2c8>)
}
 8004432:	b006      	add	sp, #24
 8004434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		PrintToLCD("    ");
 8004438:	f7fd bb64 	b.w	8001b04 <PrintToLCD>
}
 800443c:	b006      	add	sp, #24
 800443e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004442:	bf00      	nop
 8004444:	2000079c 	.word	0x2000079c
 8004448:	2000078e 	.word	0x2000078e
 800444c:	0800625c 	.word	0x0800625c
 8004450:	20000854 	.word	0x20000854
 8004454:	08006261 	.word	0x08006261
 8004458:	2000086a 	.word	0x2000086a
 800445c:	080060d4 	.word	0x080060d4
 8004460:	08006266 	.word	0x08006266
 8004464:	08006278 	.word	0x08006278
 8004468:	2000086c 	.word	0x2000086c
 800446c:	08005f2e 	.word	0x08005f2e
 8004470:	2000085a 	.word	0x2000085a
 8004474:	080060d2 	.word	0x080060d2
 8004478:	0800627e 	.word	0x0800627e
 800447c:	200007e8 	.word	0x200007e8
 8004480:	08006284 	.word	0x08006284
 8004484:	08006288 	.word	0x08006288
 8004488:	20000858 	.word	0x20000858
 800448c:	080060d1 	.word	0x080060d1
 8004490:	20000874 	.word	0x20000874
 8004494:	200002b2 	.word	0x200002b2
 8004498:	20000856 	.word	0x20000856
 800449c:	20000004 	.word	0x20000004
 80044a0:	0800628d 	.word	0x0800628d
 80044a4:	08006290 	.word	0x08006290
 80044a8:	08006295 	.word	0x08006295
 80044ac:	0800593c 	.word	0x0800593c
 80044b0:	0800629d 	.word	0x0800629d
 80044b4:	080062a1 	.word	0x080062a1
 80044b8:	080062a8 	.word	0x080062a8
 80044bc:	200007e4 	.word	0x200007e4
 80044c0:	080060d0 	.word	0x080060d0
 80044c4:	080062b0 	.word	0x080062b0
 80044c8:	20000870 	.word	0x20000870
 80044cc:	080062b3 	.word	0x080062b3

080044d0 <adc_func>:
	Count1000mSecond++;
}


void adc_func()
{
 80044d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//PA4   ------> ADC1_IN4
	//PA5   ------> ADC1_IN5
	//PA6   ------> ADC1_IN6


	volatile int32_t Ut = 0;
 80044d2:	2300      	movs	r3, #0
	volatile int32_t It_m = 0;
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 80044d4:	4c71      	ldr	r4, [pc, #452]	; (800469c <adc_func+0x1cc>)
	volatile int32_t Ut = 0;
 80044d6:	9300      	str	r3, [sp, #0]
	volatile int32_t It = 0;
 80044d8:	9301      	str	r3, [sp, #4]
	volatile int32_t Ut_m = 0;
 80044da:	9302      	str	r3, [sp, #8]
	volatile int32_t It_m = 0;
 80044dc:	9303      	str	r3, [sp, #12]
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 80044de:	89e3      	ldrh	r3, [r4, #14]
	Ut= (RegularConvData[2] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 80044e0:	4d6f      	ldr	r5, [pc, #444]	; (80046a0 <adc_func+0x1d0>)
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 80044e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ec:	4a6d      	ldr	r2, [pc, #436]	; (80046a4 <adc_func+0x1d4>)
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8013      	strh	r3, [r2, #0]
	Ut= (RegularConvData[2] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 80044f2:	88a3      	ldrh	r3, [r4, #4]
 80044f4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	434b      	muls	r3, r1
 80044fa:	89e2      	ldrh	r2, [r4, #14]
 80044fc:	b292      	uxth	r2, r2
 80044fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004502:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax1(Ut);
 8004504:	9800      	ldr	r0, [sp, #0]
 8004506:	f7fd f89d 	bl	8001644 <middle_of_3Umax1>
 800450a:	9002      	str	r0, [sp, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 800450c:	9802      	ldr	r0, [sp, #8]
 800450e:	f7fd f8ef 	bl	80016f0 <RunningAverageU1>
 8004512:	4a65      	ldr	r2, [pc, #404]	; (80046a8 <adc_func+0x1d8>)
	SumU1Counter ++;
 8004514:	4965      	ldr	r1, [pc, #404]	; (80046ac <adc_func+0x1dc>)
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	4418      	add	r0, r3
 800451a:	6010      	str	r0, [r2, #0]
	SumU1Counter ++;
 800451c:	880b      	ldrh	r3, [r1, #0]
 800451e:	3301      	adds	r3, #1
 8004520:	b21b      	sxth	r3, r3
 8004522:	800b      	strh	r3, [r1, #0]
	if (SumU1Counter >= NUM_READ)
 8004524:	880b      	ldrh	r3, [r1, #0]
 8004526:	b21b      	sxth	r3, r3
 8004528:	2b1f      	cmp	r3, #31
 800452a:	dd0f      	ble.n	800454c <adc_func+0x7c>
	{
		U_PS = SumU1/NUM_READ;
 800452c:	6813      	ldr	r3, [r2, #0]
 800452e:	4860      	ldr	r0, [pc, #384]	; (80046b0 <adc_func+0x1e0>)
 8004530:	2b00      	cmp	r3, #0
 8004532:	bfb8      	it	lt
 8004534:	331f      	addlt	r3, #31
 8004536:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800453a:	8003      	strh	r3, [r0, #0]
		SumU1Counter = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	800b      	strh	r3, [r1, #0]
		SumU1 = 0;
 8004540:	6013      	str	r3, [r2, #0]
		if (U_PS < 3) U_PS = 0;
 8004542:	8802      	ldrh	r2, [r0, #0]
 8004544:	b292      	uxth	r2, r2
 8004546:	2a02      	cmp	r2, #2
 8004548:	bf98      	it	ls
 800454a:	8003      	strhls	r3, [r0, #0]
	}

	Ut = (RegularConvData[1] * CalibrationData.CalibrationValueForU_IN) / RegularConvData[7];
 800454c:	8863      	ldrh	r3, [r4, #2]
 800454e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004550:	b29b      	uxth	r3, r3
 8004552:	434b      	muls	r3, r1
 8004554:	89e2      	ldrh	r2, [r4, #14]
 8004556:	4e57      	ldr	r6, [pc, #348]	; (80046b4 <adc_func+0x1e4>)
 8004558:	b292      	uxth	r2, r2
 800455a:	fbb3 f3f2 	udiv	r3, r3, r2
 800455e:	9300      	str	r3, [sp, #0]
	U_IN = middle_of_3Umax3(Ut);
 8004560:	9800      	ldr	r0, [sp, #0]
 8004562:	f7fd f8a7 	bl	80016b4 <middle_of_3Umax3>
 8004566:	4b54      	ldr	r3, [pc, #336]	; (80046b8 <adc_func+0x1e8>)
 8004568:	b280      	uxth	r0, r0
 800456a:	8018      	strh	r0, [r3, #0]


	It = (RegularConvData[0] * CalibrationData.CalibrationValueForCurrent_x50*10) / RegularConvData[7] ;//  Current A/10
 800456c:	8823      	ldrh	r3, [r4, #0]
 800456e:	69a9      	ldr	r1, [r5, #24]
 8004570:	b29b      	uxth	r3, r3
 8004572:	434b      	muls	r3, r1
 8004574:	210a      	movs	r1, #10
 8004576:	434b      	muls	r3, r1
 8004578:	89e2      	ldrh	r2, [r4, #14]
 800457a:	b292      	uxth	r2, r2
 800457c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004580:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax1(It);
 8004582:	9801      	ldr	r0, [sp, #4]
 8004584:	f7fd f826 	bl	80015d4 <middle_of_3Imax1>
 8004588:	9003      	str	r0, [sp, #12]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 800458a:	9803      	ldr	r0, [sp, #12]
 800458c:	f7fd f8ae 	bl	80016ec <RunningAverageI1>
 8004590:	4a4a      	ldr	r2, [pc, #296]	; (80046bc <adc_func+0x1ec>)
	SumI1Counter ++;
 8004592:	494b      	ldr	r1, [pc, #300]	; (80046c0 <adc_func+0x1f0>)
	SumI1 =SumI1 + RunningAverageI1(It_m);
 8004594:	6813      	ldr	r3, [r2, #0]
 8004596:	4418      	add	r0, r3
 8004598:	6010      	str	r0, [r2, #0]
	SumI1Counter ++;
 800459a:	880b      	ldrh	r3, [r1, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	b21b      	sxth	r3, r3
 80045a0:	800b      	strh	r3, [r1, #0]
	if (SumI1Counter >= NUM_READ)
 80045a2:	880b      	ldrh	r3, [r1, #0]
 80045a4:	b21b      	sxth	r3, r3
 80045a6:	2b1f      	cmp	r3, #31
 80045a8:	dd09      	ble.n	80045be <adc_func+0xee>
	{
		Current_x50 = SumI1/NUM_READ;
 80045aa:	6813      	ldr	r3, [r2, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bfb8      	it	lt
 80045b0:	331f      	addlt	r3, #31
 80045b2:	f343 134f 	sbfx	r3, r3, #5, #16
 80045b6:	8033      	strh	r3, [r6, #0]
		SumI1Counter = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	800b      	strh	r3, [r1, #0]
		SumI1 = 0;
 80045bc:	6013      	str	r3, [r2, #0]
	}

	It= (RegularConvData[3] * CalibrationData.CalibrationValueForCurrent_x1*100) / RegularConvData[7] ;//  Current A/10
 80045be:	88e3      	ldrh	r3, [r4, #6]
 80045c0:	6a29      	ldr	r1, [r5, #32]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	434b      	muls	r3, r1
 80045c6:	2164      	movs	r1, #100	; 0x64
 80045c8:	434b      	muls	r3, r1
 80045ca:	89e2      	ldrh	r2, [r4, #14]
 80045cc:	b292      	uxth	r2, r2
 80045ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d2:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax2(It);
 80045d4:	9801      	ldr	r0, [sp, #4]
 80045d6:	f7fd f819 	bl	800160c <middle_of_3Imax2>
 80045da:	9003      	str	r0, [sp, #12]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 80045dc:	9803      	ldr	r0, [sp, #12]
 80045de:	f7fd f886 	bl	80016ee <RunningAverageI2>
 80045e2:	4a38      	ldr	r2, [pc, #224]	; (80046c4 <adc_func+0x1f4>)
	SumI2Counter ++;
 80045e4:	4938      	ldr	r1, [pc, #224]	; (80046c8 <adc_func+0x1f8>)
	SumI2 =SumI2 + RunningAverageI2(It_m);
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	4418      	add	r0, r3
 80045ea:	6010      	str	r0, [r2, #0]
	SumI2Counter ++;
 80045ec:	880b      	ldrh	r3, [r1, #0]
 80045ee:	3301      	adds	r3, #1
 80045f0:	b21b      	sxth	r3, r3
 80045f2:	800b      	strh	r3, [r1, #0]
	if (SumI2Counter >= NUM_READ)
 80045f4:	880b      	ldrh	r3, [r1, #0]
 80045f6:	b21b      	sxth	r3, r3
 80045f8:	2b1f      	cmp	r3, #31
 80045fa:	dd0a      	ble.n	8004612 <adc_func+0x142>
	{
		Current_x1 = SumI2/NUM_READ;
 80045fc:	6813      	ldr	r3, [r2, #0]
 80045fe:	4833      	ldr	r0, [pc, #204]	; (80046cc <adc_func+0x1fc>)
 8004600:	2b00      	cmp	r3, #0
 8004602:	bfb8      	it	lt
 8004604:	331f      	addlt	r3, #31
 8004606:	f343 134f 	sbfx	r3, r3, #5, #16
 800460a:	8003      	strh	r3, [r0, #0]
		SumI2Counter = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	800b      	strh	r3, [r1, #0]
		SumI2 = 0;
 8004610:	6013      	str	r3, [r2, #0]
	}
	if (Current_x50 < 1800) Current = Current_x50;
 8004612:	8833      	ldrh	r3, [r6, #0]
	else Current = Current_x1;


	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForU_OUT) / RegularConvData[7];
 8004614:	6b29      	ldr	r1, [r5, #48]	; 0x30
	if (Current_x50 < 1800) Current = Current_x50;
 8004616:	b21b      	sxth	r3, r3
 8004618:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
	else Current = Current_x1;
 800461c:	bfaa      	itet	ge
 800461e:	4a2b      	ldrge	r2, [pc, #172]	; (80046cc <adc_func+0x1fc>)
	if (Current_x50 < 1800) Current = Current_x50;
 8004620:	8832      	ldrhlt	r2, [r6, #0]
	else Current = Current_x1;
 8004622:	8812      	ldrhge	r2, [r2, #0]
 8004624:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <adc_func+0x200>)
 8004626:	801a      	strh	r2, [r3, #0]
	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForU_OUT) / RegularConvData[7];
 8004628:	88a3      	ldrh	r3, [r4, #4]
 800462a:	89e2      	ldrh	r2, [r4, #14]
 800462c:	b29b      	uxth	r3, r3
 800462e:	434b      	muls	r3, r1
 8004630:	b292      	uxth	r2, r2
 8004632:	fbb3 f3f2 	udiv	r3, r3, r2
 8004636:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax2(Ut);
 8004638:	9800      	ldr	r0, [sp, #0]
 800463a:	f7fd f81f 	bl	800167c <middle_of_3Umax2>
 800463e:	9002      	str	r0, [sp, #8]
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 8004640:	9802      	ldr	r0, [sp, #8]
 8004642:	f7fd f856 	bl	80016f2 <RunningAverageU2>
 8004646:	4c23      	ldr	r4, [pc, #140]	; (80046d4 <adc_func+0x204>)
	SumU2Counter ++;
 8004648:	4923      	ldr	r1, [pc, #140]	; (80046d8 <adc_func+0x208>)
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	4418      	add	r0, r3
 800464e:	6020      	str	r0, [r4, #0]
	SumU2Counter ++;
 8004650:	880b      	ldrh	r3, [r1, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	b21b      	sxth	r3, r3
 8004656:	800b      	strh	r3, [r1, #0]
	if (SumU2Counter >= NUM_READ)
 8004658:	880b      	ldrh	r3, [r1, #0]
 800465a:	b21b      	sxth	r3, r3
 800465c:	2b1f      	cmp	r3, #31
 800465e:	dd1a      	ble.n	8004696 <adc_func+0x1c6>
	{

		U_OUTtmp = SumU2/NUM_READ;
 8004660:	6822      	ldr	r2, [r4, #0]
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <adc_func+0x20c>)
 8004664:	2a00      	cmp	r2, #0
 8004666:	bfb8      	it	lt
 8004668:	321f      	addlt	r2, #31
 800466a:	1152      	asrs	r2, r2, #5
 800466c:	601a      	str	r2, [r3, #0]
		SumU2 = 0;
 800466e:	2200      	movs	r2, #0
 8004670:	6022      	str	r2, [r4, #0]
		SumU2Counter = 0;
 8004672:	800a      	strh	r2, [r1, #0]

		U_OUT_ForSetResistance = U_OUTtmp;
 8004674:	6819      	ldr	r1, [r3, #0]
 8004676:	481a      	ldr	r0, [pc, #104]	; (80046e0 <adc_func+0x210>)
 8004678:	b289      	uxth	r1, r1
 800467a:	8001      	strh	r1, [r0, #0]
		if (U_OUTtmp<3) U_OUTtmp = 0;
 800467c:	6819      	ldr	r1, [r3, #0]
 800467e:	2902      	cmp	r1, #2
 8004680:	bfd8      	it	le
 8004682:	601a      	strle	r2, [r3, #0]

		//U_OUTtmp = U_OUTtmp - (int32_t)CalibrationData.ResistanceComp_Ishunt_Wires*Current/10000;


		if (U_OUTtmp<3)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	2a02      	cmp	r2, #2
			U_OUTtmp=0;
 8004688:	bfdc      	itt	le
 800468a:	2200      	movle	r2, #0
 800468c:	601a      	strle	r2, [r3, #0]
		U_OUT = U_OUTtmp;
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <adc_func+0x214>)
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]
	}
	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 8004696:	b004      	add	sp, #16
 8004698:	bd70      	pop	{r4, r5, r6, pc}
 800469a:	bf00      	nop
 800469c:	2000085a 	.word	0x2000085a
 80046a0:	20000004 	.word	0x20000004
 80046a4:	2000086a 	.word	0x2000086a
 80046a8:	200007b8 	.word	0x200007b8
 80046ac:	200007bc 	.word	0x200007bc
 80046b0:	20000874 	.word	0x20000874
 80046b4:	200007e8 	.word	0x200007e8
 80046b8:	20000854 	.word	0x20000854
 80046bc:	200007a8 	.word	0x200007a8
 80046c0:	200007ac 	.word	0x200007ac
 80046c4:	200007b0 	.word	0x200007b0
 80046c8:	200007b4 	.word	0x200007b4
 80046cc:	20000858 	.word	0x20000858
 80046d0:	20000856 	.word	0x20000856
 80046d4:	200007c0 	.word	0x200007c0
 80046d8:	200007c4 	.word	0x200007c4
 80046dc:	200007d8 	.word	0x200007d8
 80046e0:	200002b2 	.word	0x200002b2
 80046e4:	2000086c 	.word	0x2000086c

080046e8 <SysTick_Callback>:
{
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BUT_Debrief();
 80046ea:	f7fd ff21 	bl	8002530 <BUT_Debrief>
	TimerForReadyMeasurement_ms++;
 80046ee:	4a3d      	ldr	r2, [pc, #244]	; (80047e4 <SysTick_Callback+0xfc>)
	if (Count10mSecond >= 5)
 80046f0:	4f3d      	ldr	r7, [pc, #244]	; (80047e8 <SysTick_Callback+0x100>)
	TimerForReadyMeasurement_ms++;
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	6013      	str	r3, [r2, #0]
	if (Count10mSecond >= 5)
 80046f8:	883b      	ldrh	r3, [r7, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d903      	bls.n	8004708 <SysTick_Callback+0x20>
		Count10mSecond = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	803b      	strh	r3, [r7, #0]
		adc_func();
 8004704:	f7ff fee4 	bl	80044d0 <adc_func>
	if (Count100mSecond >= 100)
 8004708:	4e38      	ldr	r6, [pc, #224]	; (80047ec <SysTick_Callback+0x104>)
	if (Count1000mSecond >= 1000)
 800470a:	4d39      	ldr	r5, [pc, #228]	; (80047f0 <SysTick_Callback+0x108>)
	if (Count100mSecond >= 100)
 800470c:	8833      	ldrh	r3, [r6, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b63      	cmp	r3, #99	; 0x63
		Count100mSecond = 0;
 8004712:	bf84      	itt	hi
 8004714:	2300      	movhi	r3, #0
 8004716:	8033      	strhhi	r3, [r6, #0]
	if (Count1000mSecond >= 1000)
 8004718:	882b      	ldrh	r3, [r5, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004720:	d353      	bcc.n	80047ca <SysTick_Callback+0xe2>
		Count1000mSecond = 0;
 8004722:	2300      	movs	r3, #0
		if (Current < 2)
 8004724:	4c33      	ldr	r4, [pc, #204]	; (80047f4 <SysTick_Callback+0x10c>)
		Count1000mSecond = 0;
 8004726:	802b      	strh	r3, [r5, #0]
		if (Current < 2)
 8004728:	8823      	ldrh	r3, [r4, #0]
 800472a:	b21b      	sxth	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	dc07      	bgt.n	8004740 <SysTick_Callback+0x58>
			BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent + Module16(Current);
 8004730:	8820      	ldrh	r0, [r4, #0]
 8004732:	b200      	sxth	r0, r0
 8004734:	f7fc fe48 	bl	80013c8 <Module16>
 8004738:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <SysTick_Callback+0x110>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4410      	add	r0, r2
 800473e:	6018      	str	r0, [r3, #0]
		if (Current > 2)
 8004740:	8823      	ldrh	r3, [r4, #0]
 8004742:	b21b      	sxth	r3, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	dd07      	ble.n	8004758 <SysTick_Callback+0x70>
			BatteryCapacityCharge = BatteryCapacityCharge + Module16(Current);
 8004748:	8820      	ldrh	r0, [r4, #0]
 800474a:	b200      	sxth	r0, r0
 800474c:	f7fc fe3c 	bl	80013c8 <Module16>
 8004750:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <SysTick_Callback+0x114>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4410      	add	r0, r2
 8004756:	6018      	str	r0, [r3, #0]
		if (ChargeStatusForTimer == 1)
 8004758:	4b29      	ldr	r3, [pc, #164]	; (8004800 <SysTick_Callback+0x118>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
			ChargeTimeSec++;
 800475e:	bf01      	itttt	eq
 8004760:	4a28      	ldreq	r2, [pc, #160]	; (8004804 <SysTick_Callback+0x11c>)
 8004762:	6813      	ldreq	r3, [r2, #0]
 8004764:	3301      	addeq	r3, #1
 8004766:	6013      	streq	r3, [r2, #0]
		if (DisChargeStatusForTimer == 1)
 8004768:	4b27      	ldr	r3, [pc, #156]	; (8004808 <SysTick_Callback+0x120>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
			DischargeTimeSec++;
 800476e:	bf01      	itttt	eq
 8004770:	4a26      	ldreq	r2, [pc, #152]	; (800480c <SysTick_Callback+0x124>)
 8004772:	6813      	ldreq	r3, [r2, #0]
 8004774:	3301      	addeq	r3, #1
 8004776:	6013      	streq	r3, [r2, #0]
		if (Status_Timer_Sec == 1)
 8004778:	4b25      	ldr	r3, [pc, #148]	; (8004810 <SysTick_Callback+0x128>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b01      	cmp	r3, #1
			Timer_Sec++;
 800477e:	bf01      	itttt	eq
 8004780:	4a24      	ldreq	r2, [pc, #144]	; (8004814 <SysTick_Callback+0x12c>)
 8004782:	6813      	ldreq	r3, [r2, #0]
 8004784:	3301      	addeq	r3, #1
 8004786:	6013      	streq	r3, [r2, #0]
		time_sec++;
 8004788:	4b23      	ldr	r3, [pc, #140]	; (8004818 <SysTick_Callback+0x130>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	3201      	adds	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
		if (time_sec%2==0) GPIOA->BSRR =  GPIO_BSRR_BS15;
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f013 0f01 	tst.w	r3, #1
 8004796:	bf0c      	ite	eq
 8004798:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		else GPIOA->BSRR =  GPIO_BSRR_BR15;
 800479c:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
 80047a0:	4b1e      	ldr	r3, [pc, #120]	; (800481c <SysTick_Callback+0x134>)
 80047a2:	611a      	str	r2, [r3, #16]
		if (Current >= 3000) FAN_ON();
 80047a4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80047a8:	8823      	ldrh	r3, [r4, #0]
 80047aa:	b21b      	sxth	r3, r3
 80047ac:	4293      	cmp	r3, r2
	GPIOB->BSRR =  GPIO_BSRR_BS0;//FAN ON
 80047ae:	bfc2      	ittt	gt
 80047b0:	2201      	movgt	r2, #1
 80047b2:	4b1b      	ldrgt	r3, [pc, #108]	; (8004820 <SysTick_Callback+0x138>)
 80047b4:	611a      	strgt	r2, [r3, #16]
		if (Current < 3000) FAN_OFF();
 80047b6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80047ba:	8823      	ldrh	r3, [r4, #0]
 80047bc:	b21b      	sxth	r3, r3
 80047be:	4293      	cmp	r3, r2
	GPIOB->BSRR =  GPIO_BSRR_BR0;//FAN OFF
 80047c0:	bfde      	ittt	le
 80047c2:	f44f 3280 	movle.w	r2, #65536	; 0x10000
 80047c6:	4b16      	ldrle	r3, [pc, #88]	; (8004820 <SysTick_Callback+0x138>)
 80047c8:	611a      	strle	r2, [r3, #16]
	Count10mSecond++;
 80047ca:	883b      	ldrh	r3, [r7, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	803b      	strh	r3, [r7, #0]
	Count100mSecond++;
 80047d2:	8833      	ldrh	r3, [r6, #0]
 80047d4:	3301      	adds	r3, #1
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	8033      	strh	r3, [r6, #0]
	Count1000mSecond++;
 80047da:	882b      	ldrh	r3, [r5, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	b29b      	uxth	r3, r3
 80047e0:	802b      	strh	r3, [r5, #0]
}
 80047e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e4:	200007c8 	.word	0x200007c8
 80047e8:	200002b0 	.word	0x200002b0
 80047ec:	200002ae 	.word	0x200002ae
 80047f0:	200002ac 	.word	0x200002ac
 80047f4:	20000856 	.word	0x20000856
 80047f8:	2000077c 	.word	0x2000077c
 80047fc:	20000778 	.word	0x20000778
 8004800:	20000787 	.word	0x20000787
 8004804:	20000788 	.word	0x20000788
 8004808:	20000790 	.word	0x20000790
 800480c:	20000794 	.word	0x20000794
 8004810:	200007a5 	.word	0x200007a5
 8004814:	200007cc 	.word	0x200007cc
 8004818:	200007e4 	.word	0x200007e4
 800481c:	40010800 	.word	0x40010800
 8004820:	40010c00 	.word	0x40010c00

08004824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004824:	b510      	push	{r4, lr}
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004826:	4c1d      	ldr	r4, [pc, #116]	; (800489c <SystemClock_Config+0x78>)
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482e:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004830:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8004832:	039a      	lsls	r2, r3, #14
 8004834:	d5fc      	bpl.n	8004830 <SystemClock_Config+0xc>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8004836:	6863      	ldr	r3, [r4, #4]
 8004838:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800483c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8004840:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 8004842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004844:	f023 030f 	bic.w	r3, r3, #15
 8004848:	62e3      	str	r3, [r4, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004850:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004852:	6823      	ldr	r3, [r4, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8004854:	019b      	lsls	r3, r3, #6
 8004856:	d5fc      	bpl.n	8004852 <SystemClock_Config+0x2e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004860:	6863      	ldr	r3, [r4, #4]
 8004862:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004866:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004868:	6863      	ldr	r3, [r4, #4]
 800486a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800486e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004870:	6863      	ldr	r3, [r4, #4]
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	f043 0302 	orr.w	r3, r3, #2
 800487a:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004882:	2b08      	cmp	r3, #8
 8004884:	d1fa      	bne.n	800487c <SystemClock_Config+0x58>
  {

  }
  LL_Init1msTick(24000000);
 8004886:	4806      	ldr	r0, [pc, #24]	; (80048a0 <SystemClock_Config+0x7c>)
 8004888:	f000 ff7e 	bl	8005788 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 800488c:	4804      	ldr	r0, [pc, #16]	; (80048a0 <SystemClock_Config+0x7c>)
 800488e:	f000 ff89 	bl	80057a4 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8004892:	6863      	ldr	r3, [r4, #4]
 8004894:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004898:	6063      	str	r3, [r4, #4]
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
}
 800489a:	bd10      	pop	{r4, pc}
 800489c:	40021000 	.word	0x40021000
 80048a0:	016e3600 	.word	0x016e3600

080048a4 <main>:
{
 80048a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(RCC->APB1ENR, Periphs);
 80048a8:	4dc5      	ldr	r5, [pc, #788]	; (8004bc0 <main+0x31c>)
 80048aa:	b091      	sub	sp, #68	; 0x44
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80048ac:	2001      	movs	r0, #1
 80048ae:	f7fd f943 	bl	8001b38 <LL_APB2_GRP1_EnableClock>
 80048b2:	69eb      	ldr	r3, [r5, #28]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048b4:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8004bc4 <main+0x320>
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048bc:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80048be:	69eb      	ldr	r3, [r5, #28]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80048c0:	f8df a304 	ldr.w	sl, [pc, #772]	; 8004bc8 <main+0x324>
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80048ca:	9b00      	ldr	r3, [sp, #0]
 80048cc:	f8d9 200c 	ldr.w	r2, [r9, #12]
  reg_value  =  (reg_value                                   |
 80048d0:	4bbe      	ldr	r3, [pc, #760]	; (8004bcc <main+0x328>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048d6:	0412      	lsls	r2, r2, #16
 80048d8:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 80048da:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 80048dc:	f8c9 300c 	str.w	r3, [r9, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80048e0:	4bbb      	ldr	r3, [pc, #748]	; (8004bd0 <main+0x32c>)
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80048e2:	4ebc      	ldr	r6, [pc, #752]	; (8004bd4 <main+0x330>)
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80048e4:	685a      	ldr	r2, [r3, #4]

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048e6:	2400      	movs	r4, #0
 80048e8:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80048ec:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80048ee:	685a      	ldr	r2, [r3, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80048f0:	f04f 0b01 	mov.w	fp, #1
 80048f4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80048f8:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 80048fa:	f7ff ff93 	bl	8004824 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fe:	2214      	movs	r2, #20
 8004900:	2100      	movs	r1, #0
 8004902:	a809      	add	r0, sp, #36	; 0x24
 8004904:	f000 ff86 	bl	8005814 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8004908:	2020      	movs	r0, #32
 800490a:	f7fd f915 	bl	8001b38 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800490e:	2004      	movs	r0, #4
 8004910:	f7fd f912 	bl	8001b38 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004914:	2008      	movs	r0, #8
 8004916:	f7fd f90f 	bl	8001b38 <LL_APB2_GRP1_EnableClock>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800491a:	f64f 4303 	movw	r3, #64515	; 0xfc03
 800491e:	f8ca 3014 	str.w	r3, [sl, #20]
 8004922:	f44f 4309 	mov.w	r3, #35072	; 0x8900
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004926:	2702      	movs	r7, #2
 8004928:	6173      	str	r3, [r6, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800492a:	f240 3303 	movw	r3, #771	; 0x303
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800492e:	f04f 0804 	mov.w	r8, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004932:	a909      	add	r1, sp, #36	; 0x24
 8004934:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004936:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800493a:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493e:	f000 fdd7 	bl	80054f0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
 8004942:	4ba5      	ldr	r3, [pc, #660]	; (8004bd8 <main+0x334>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004944:	a909      	add	r1, sp, #36	; 0x24
 8004946:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004948:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800494c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004950:	970b      	str	r7, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004952:	f000 fdcd 	bl	80054f0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_15;
 8004956:	4ba1      	ldr	r3, [pc, #644]	; (8004bdc <main+0x338>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004958:	a909      	add	r1, sp, #36	; 0x24
 800495a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800495c:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004960:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004964:	f000 fdc4 	bl	80054f0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004968:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 800496c:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800496e:	a909      	add	r1, sp, #36	; 0x24
 8004970:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004972:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004976:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800497a:	f000 fdb9 	bl	80054f0 <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 800497e:	696b      	ldr	r3, [r5, #20]
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004980:	221c      	movs	r2, #28
 8004982:	ea43 030b 	orr.w	r3, r3, fp
 8004986:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004988:	696b      	ldr	r3, [r5, #20]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498a:	4d95      	ldr	r5, [pc, #596]	; (8004be0 <main+0x33c>)
 800498c:	ea03 030b 	and.w	r3, r3, fp
 8004990:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004992:	9b01      	ldr	r3, [sp, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004994:	f8d9 000c 	ldr.w	r0, [r9, #12]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004998:	f44f 6300 	mov.w	r3, #2048	; 0x800
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800499c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80049a0:	f7fd fa58 	bl	8001e54 <NVIC_EncodePriority.constprop.0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a4:	fa00 f008 	lsl.w	r0, r0, r8
 80049a8:	b2c0      	uxtb	r0, r0
 80049aa:	f885 030b 	strb.w	r0, [r5, #779]	; 0x30b
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80049ae:	4621      	mov	r1, r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049b0:	602b      	str	r3, [r5, #0]
 80049b2:	a809      	add	r0, sp, #36	; 0x24
 80049b4:	f000 ff2e 	bl	8005814 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b8:	2214      	movs	r2, #20
 80049ba:	4621      	mov	r1, r4
 80049bc:	a804      	add	r0, sp, #16
 80049be:	f000 ff29 	bl	8005814 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80049c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80049c6:	f7fd f8b7 	bl	8001b38 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80049ca:	4640      	mov	r0, r8
 80049cc:	f7fd f8b4 	bl	8001b38 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049d0:	2309      	movs	r3, #9
 80049d2:	4984      	ldr	r1, [pc, #528]	; (8004be4 <main+0x340>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d4:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049d6:	e9cd 1304 	strd	r1, r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80049da:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049dc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049de:	e9cd 3406 	strd	r3, r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e2:	f000 fd85 	bl	80054f0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80049e6:	4b80      	ldr	r3, [pc, #512]	; (8004be8 <main+0x344>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e8:	a904      	add	r1, sp, #16
 80049ea:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80049ec:	e9cd 3804 	strd	r3, r8, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f0:	f000 fd7e 	bl	80054f0 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049f4:	f8d9 000c 	ldr.w	r0, [r9, #12]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f8:	2320      	movs	r3, #32
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80049fa:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80049fe:	f7fd fa29 	bl	8001e54 <NVIC_EncodePriority.constprop.0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a02:	fa00 f008 	lsl.w	r0, r0, r8
 8004a06:	b2c0      	uxtb	r0, r0
 8004a08:	f885 0325 	strb.w	r0, [r5, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a0c:	606b      	str	r3, [r5, #4]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004a0e:	4d77      	ldr	r5, [pc, #476]	; (8004bec <main+0x348>)
  LL_USART_Init(USART1, &USART_InitStruct);
 8004a10:	a909      	add	r1, sp, #36	; 0x24
 8004a12:	68eb      	ldr	r3, [r5, #12]
 8004a14:	4628      	mov	r0, r5
 8004a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1a:	60eb      	str	r3, [r5, #12]
  USART_InitStruct.BaudRate = 38400;
 8004a1c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004a20:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004a24:	230c      	movs	r3, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004a26:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004a2a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004a2e:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8004a30:	f000 fe3e 	bl	80056b0 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a34:	692b      	ldr	r3, [r5, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004a36:	2214      	movs	r2, #20
 8004a38:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004a3c:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004a3e:	696b      	ldr	r3, [r5, #20]
 8004a40:	4621      	mov	r1, r4
 8004a42:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004a46:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004a48:	68eb      	ldr	r3, [r5, #12]
 8004a4a:	a804      	add	r0, sp, #16
 8004a4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a50:	60eb      	str	r3, [r5, #12]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004a52:	e9cd 4402 	strd	r4, r4, [sp, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004a56:	f000 fedd 	bl	8005814 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5a:	2214      	movs	r2, #20
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	a809      	add	r0, sp, #36	; 0x24
 8004a60:	f000 fed8 	bl	8005814 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8004a64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a68:	f7fd f866 	bl	8001b38 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	f7fd f863 	bl	8001b38 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8004a72:	f647 637e 	movw	r3, #32382	; 0x7e7e
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a76:	a909      	add	r1, sp, #36	; 0x24
 8004a78:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004a7a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a7e:	f000 fd37 	bl	80054f0 <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004a82:	4b5b      	ldr	r3, [pc, #364]	; (8004bf0 <main+0x34c>)
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004a84:	f44f 7880 	mov.w	r8, #256	; 0x100
 8004a88:	689a      	ldr	r2, [r3, #8]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004a8a:	f5a5 55a0 	sub.w	r5, r5, #5120	; 0x1400
 8004a8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a92:	f022 0210 	bic.w	r2, r2, #16
 8004a96:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	a902      	add	r1, sp, #8
 8004a9c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aa4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f042 0220 	orr.w	r2, r2, #32
 8004aae:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004abe:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ac6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aca:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ad2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ad6:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8004ad8:	4a46      	ldr	r2, [pc, #280]	; (8004bf4 <main+0x350>)
 8004ada:	611a      	str	r2, [r3, #16]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8004adc:	4a46      	ldr	r2, [pc, #280]	; (8004bf8 <main+0x354>)
 8004ade:	615a      	str	r2, [r3, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	0c12      	lsrs	r2, r2, #16
 8004ae4:	0412      	lsls	r2, r2, #16
 8004ae6:	f042 0208 	orr.w	r2, r2, #8
 8004aea:	60da      	str	r2, [r3, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	ea42 020b 	orr.w	r2, r2, fp
 8004af2:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004af4:	9402      	str	r4, [sp, #8]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004af6:	f8cd 800c 	str.w	r8, [sp, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004afa:	f000 fcc2 	bl	8005482 <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004afe:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8004b02:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004b06:	a904      	add	r1, sp, #16
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004b08:	e9cd 0304 	strd	r0, r3, [sp, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004b0c:	4628      	mov	r0, r5
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8004b0e:	e9cd 4706 	strd	r4, r7, [sp, #24]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004b12:	f8cd 8020 	str.w	r8, [sp, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004b16:	f000 fcc9 	bl	80054ac <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004b1a:	4938      	ldr	r1, [pc, #224]	; (8004bfc <main+0x358>)
 8004b1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004b20:	f7fd f97c 	bl	8001e1c <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b24:	4835      	ldr	r0, [pc, #212]	; (8004bfc <main+0x358>)
 8004b26:	f7fd f94f 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8004b2a:	4935      	ldr	r1, [pc, #212]	; (8004c00 <main+0x35c>)
 8004b2c:	f240 2005 	movw	r0, #517	; 0x205
 8004b30:	f7fd f974 	bl	8001e1c <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b34:	4832      	ldr	r0, [pc, #200]	; (8004c00 <main+0x35c>)
 8004b36:	f7fd f947 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8004b3a:	4932      	ldr	r1, [pc, #200]	; (8004c04 <main+0x360>)
 8004b3c:	f240 200a 	movw	r0, #522	; 0x20a
 8004b40:	f7fd f96c 	bl	8001e1c <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b44:	482f      	ldr	r0, [pc, #188]	; (8004c04 <main+0x360>)
 8004b46:	f7fd f93f 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_4);
 8004b4a:	492f      	ldr	r1, [pc, #188]	; (8004c08 <main+0x364>)
 8004b4c:	f240 200f 	movw	r0, #527	; 0x20f
 8004b50:	f7fd f964 	bl	8001e1c <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b54:	482c      	ldr	r0, [pc, #176]	; (8004c08 <main+0x364>)
 8004b56:	f7fd f937 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_5);
 8004b5a:	492c      	ldr	r1, [pc, #176]	; (8004c0c <main+0x368>)
 8004b5c:	f44f 7005 	mov.w	r0, #532	; 0x214
 8004b60:	f7fd f95c 	bl	8001e1c <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b64:	4829      	ldr	r0, [pc, #164]	; (8004c0c <main+0x368>)
 8004b66:	f7fd f92f 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_6);
 8004b6a:	4929      	ldr	r1, [pc, #164]	; (8004c10 <main+0x36c>)
 8004b6c:	f240 2019 	movw	r0, #537	; 0x219
 8004b70:	f7fd f954 	bl	8001e1c <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b74:	4826      	ldr	r0, [pc, #152]	; (8004c10 <main+0x36c>)
 8004b76:	f7fd f927 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_TEMPSENSOR);
 8004b7a:	4926      	ldr	r1, [pc, #152]	; (8004c14 <main+0x370>)
 8004b7c:	4640      	mov	r0, r8
 8004b7e:	f7fd f94d 	bl	8001e1c <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b82:	4824      	ldr	r0, [pc, #144]	; (8004c14 <main+0x370>)
 8004b84:	f7fd f920 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime.constprop.0>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8004b88:	68ab      	ldr	r3, [r5, #8]
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_VREFINT);
 8004b8a:	4923      	ldr	r1, [pc, #140]	; (8004c18 <main+0x374>)
 8004b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b90:	60ab      	str	r3, [r5, #8]
 8004b92:	f240 1005 	movw	r0, #261	; 0x105
 8004b96:	f7fd f941 	bl	8001e1c <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b9a:	481f      	ldr	r0, [pc, #124]	; (8004c18 <main+0x374>)
 8004b9c:	f7fd f914 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime.constprop.0>
 8004ba0:	68ab      	ldr	r3, [r5, #8]
	  delay_ms(100);
 8004ba2:	2064      	movs	r0, #100	; 0x64
 8004ba4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ba8:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004baa:	68ab      	ldr	r3, [r5, #8]
 8004bac:	ea43 030b 	orr.w	r3, r3, fp
 8004bb0:	60ab      	str	r3, [r5, #8]
 8004bb2:	f7fc fa09 	bl	8000fc8 <delay_ms>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8004bb6:	68ab      	ldr	r3, [r5, #8]
 8004bb8:	f043 0304 	orr.w	r3, r3, #4
 8004bbc:	60ab      	str	r3, [r5, #8]
 8004bbe:	e02d      	b.n	8004c1c <main+0x378>
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	e000ed00 	.word	0xe000ed00
 8004bc8:	40010c00 	.word	0x40010c00
 8004bcc:	05fa0300 	.word	0x05fa0300
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40010800 	.word	0x40010800
 8004bd8:	04fc00fc 	.word	0x04fc00fc
 8004bdc:	04890089 	.word	0x04890089
 8004be0:	e000e100 	.word	0xe000e100
 8004be4:	04020002 	.word	0x04020002
 8004be8:	04040004 	.word	0x04040004
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	40020000 	.word	0x40020000
 8004bf4:	4001244c 	.word	0x4001244c
 8004bf8:	2000085a 	.word	0x2000085a
 8004bfc:	02300001 	.word	0x02300001
 8004c00:	02600002 	.word	0x02600002
 8004c04:	02900003 	.word	0x02900003
 8004c08:	02c00004 	.word	0x02c00004
 8004c0c:	02f00005 	.word	0x02f00005
 8004c10:	03200006 	.word	0x03200006
 8004c14:	81200010 	.word	0x81200010
 8004c18:	81500011 	.word	0x81500011
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8004c1c:	68ac      	ldr	r4, [r5, #8]
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 8004c1e:	f014 0404 	ands.w	r4, r4, #4
 8004c22:	d1fb      	bne.n	8004c1c <main+0x378>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004c24:	68ab      	ldr	r3, [r5, #8]
 8004c26:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8004c2a:	60ab      	str	r3, [r5, #8]
  InitLCD();
 8004c2c:	f7fc ff79 	bl	8001b22 <InitLCD>
  SystemCoreClockUpdate();
 8004c30:	f000 fa8c 	bl	800514c <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 8004c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c38:	4ba6      	ldr	r3, [pc, #664]	; (8004ed4 <main+0x630>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c40:	3b01      	subs	r3, #1
 8004c42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c46:	d209      	bcs.n	8004c5c <main+0x3b8>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c48:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4c:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c4e:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c50:	4ba1      	ldr	r3, [pc, #644]	; (8004ed8 <main+0x634>)
 8004c52:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c56:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c58:	6194      	str	r4, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c5a:	6113      	str	r3, [r2, #16]
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	LoggingData.RecordsQuantity= 0;
 8004c60:	2400      	movs	r4, #0
 8004c62:	4d9e      	ldr	r5, [pc, #632]	; (8004edc <main+0x638>)
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004c64:	6133      	str	r3, [r6, #16]
	PrintToLCD(Version);
 8004c66:	489e      	ldr	r0, [pc, #632]	; (8004ee0 <main+0x63c>)
	OUT_OFF();
 8004c68:	f7fd fce4 	bl	8002634 <OUT_OFF>
	LoggingData.RecordsQuantity= 0;
 8004c6c:	602c      	str	r4, [r5, #0]
	PrintToLCD(Version);
 8004c6e:	f7fc ff49 	bl	8001b04 <PrintToLCD>
	InfoToUARTBeforeStart();
 8004c72:	f7fc f9b9 	bl	8000fe8 <InfoToUARTBeforeStart>
	logInfo(Version);
 8004c76:	489b      	ldr	r0, [pc, #620]	; (8004ee4 <main+0x640>)
 8004c78:	f000 fb00 	bl	800527c <printToBufferWithoutEndUART1>
 8004c7c:	4898      	ldr	r0, [pc, #608]	; (8004ee0 <main+0x63c>)
 8004c7e:	f000 fa97 	bl	80051b0 <printToBufferUART1>
	SetSymbols();
 8004c82:	f7fc fe0a 	bl	800189a <SetSymbols>
	lcd_set_xy(0,0);
 8004c86:	4621      	mov	r1, r4
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f7fc febb 	bl	8001a04 <lcd_set_xy>
	delay_ms(1000);
 8004c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c92:	f7fc f999 	bl	8000fc8 <delay_ms>
	flash_read_block();
 8004c96:	f7fb fb45 	bl	8000324 <flash_read_block>
	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	2b17      	cmp	r3, #23
 8004c9e:	bf88      	it	hi
 8004ca0:	602c      	strhi	r4, [r5, #0]
	EEpromReadStatus = ReadFromFlash();
 8004ca2:	f7fb fe1d 	bl	80008e0 <ReadFromFlash>
	if (EEpromReadStatus==0)
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	b968      	cbnz	r0, 8004cc6 <main+0x422>
		delay_ms(1000);
 8004caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cae:	f7fc f98b 	bl	8000fc8 <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 8004cb2:	f7fb fe15 	bl	80008e0 <ReadFromFlash>
 8004cb6:	4604      	mov	r4, r0
		logInfo("Read from EEprom - FAIL");
 8004cb8:	488a      	ldr	r0, [pc, #552]	; (8004ee4 <main+0x640>)
 8004cba:	f000 fadf 	bl	800527c <printToBufferWithoutEndUART1>
 8004cbe:	488a      	ldr	r0, [pc, #552]	; (8004ee8 <main+0x644>)
 8004cc0:	f000 fa76 	bl	80051b0 <printToBufferUART1>
	if (EEpromReadStatus == 0)
 8004cc4:	b134      	cbz	r4, 8004cd4 <main+0x430>
	if (EEpromReadStatus == 1)
 8004cc6:	2c01      	cmp	r4, #1
 8004cc8:	d114      	bne.n	8004cf4 <main+0x450>
		logInfo("Read from EEprom - SUCCESS");
 8004cca:	4886      	ldr	r0, [pc, #536]	; (8004ee4 <main+0x640>)
 8004ccc:	f000 fad6 	bl	800527c <printToBufferWithoutEndUART1>
 8004cd0:	4886      	ldr	r0, [pc, #536]	; (8004eec <main+0x648>)
 8004cd2:	e00d      	b.n	8004cf0 <main+0x44c>
		PrintToLCD("EEprom Read FAIL");
 8004cd4:	4886      	ldr	r0, [pc, #536]	; (8004ef0 <main+0x64c>)
 8004cd6:	f7fc ff15 	bl	8001b04 <PrintToLCD>
		delay_ms(4000);
 8004cda:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004cde:	f7fc f973 	bl	8000fc8 <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 8004ce2:	4884      	ldr	r0, [pc, #528]	; (8004ef4 <main+0x650>)
 8004ce4:	f7fb ffde 	bl	8000ca4 <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 8004ce8:	487e      	ldr	r0, [pc, #504]	; (8004ee4 <main+0x640>)
 8004cea:	f000 fac7 	bl	800527c <printToBufferWithoutEndUART1>
 8004cee:	487e      	ldr	r0, [pc, #504]	; (8004ee8 <main+0x644>)
		logInfo("Read from EEprom - SUCCESS");
 8004cf0:	f000 fa5e 	bl	80051b0 <printToBufferUART1>
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004cf4:	4d80      	ldr	r5, [pc, #512]	; (8004ef8 <main+0x654>)
 8004cf6:	4b81      	ldr	r3, [pc, #516]	; (8004efc <main+0x658>)
 8004cf8:	692a      	ldr	r2, [r5, #16]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004cfa:	4c81      	ldr	r4, [pc, #516]	; (8004f00 <main+0x65c>)
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004cfc:	601a      	str	r2, [r3, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004cfe:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004d02:	6923      	ldr	r3, [r4, #16]
  OutStateAfterPowerUp = SettingsData.Option2;
 8004d04:	4e7f      	ldr	r6, [pc, #508]	; (8004f04 <main+0x660>)
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004d06:	4353      	muls	r3, r2
 8004d08:	4a7f      	ldr	r2, [pc, #508]	; (8004f08 <main+0x664>)
 8004d0a:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8004d0c:	68a2      	ldr	r2, [r4, #8]
 8004d0e:	4b7f      	ldr	r3, [pc, #508]	; (8004f0c <main+0x668>)
 8004d10:	601a      	str	r2, [r3, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d14:	4a7e      	ldr	r2, [pc, #504]	; (8004f10 <main+0x66c>)
  OutStateAfterPowerUp = SettingsData.Option2;
 8004d16:	6033      	str	r3, [r6, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004d18:	6013      	str	r3, [r2, #0]
  Generation_Coefficients_R_A_B();
 8004d1a:	f7fb ff69 	bl	8000bf0 <Generation_Coefficients_R_A_B>
  delay_ms(1000);
 8004d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d22:	f7fc f951 	bl	8000fc8 <delay_ms>
  lcd_clear();
 8004d26:	f7fc fedb 	bl	8001ae0 <lcd_clear>
	Menu_SetGenericWriteCallback(Generic_Write);
 8004d2a:	487a      	ldr	r0, [pc, #488]	; (8004f14 <main+0x670>)
 8004d2c:	f7fc fd02 	bl	8001734 <Menu_SetGenericWriteCallback>
	if (SettingsData.Option1 == 1)
 8004d30:	68a3      	ldr	r3, [r4, #8]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d114      	bne.n	8004d60 <main+0x4bc>
		Menu_Navigate(&Menu_2_1);
 8004d36:	4878      	ldr	r0, [pc, #480]	; (8004f18 <main+0x674>)
		Menu_Navigate(&Menu_3_1);
 8004d38:	f7fc fce2 	bl	8001700 <Menu_Navigate>
  	Blink_message_counter++;
 8004d3c:	4f77      	ldr	r7, [pc, #476]	; (8004f1c <main+0x678>)
	if (Menu_GetCurrentMenu() == &Menu_2_1)
 8004d3e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8004f18 <main+0x674>
 8004d42:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8004f20 <main+0x67c>
  	Blink_message_counter++;
 8004d46:	783b      	ldrb	r3, [r7, #0]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	703b      	strb	r3, [r7, #0]
  	Button=BUT_GetKey();
 8004d4c:	f7fd fc22 	bl	8002594 <BUT_GetKey>
	switch (Button)
 8004d50:	1e43      	subs	r3, r0, #1
  	Button=BUT_GetKey();
 8004d52:	4604      	mov	r4, r0
	switch (Button)
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d820      	bhi.n	8004d9a <main+0x4f6>
 8004d58:	e8df f003 	tbb	[pc, r3]
 8004d5c:	4b44401a 	.word	0x4b44401a
	else if (SettingsData.Option1 == 2)
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d101      	bne.n	8004d68 <main+0x4c4>
		Menu_Navigate(&Menu_3_1);
 8004d64:	486f      	ldr	r0, [pc, #444]	; (8004f24 <main+0x680>)
 8004d66:	e7e7      	b.n	8004d38 <main+0x494>
	else if (SettingsData.Option1 == 3)
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d101      	bne.n	8004d70 <main+0x4cc>
		Menu_Navigate(&Menu_4_1);
 8004d6c:	486e      	ldr	r0, [pc, #440]	; (8004f28 <main+0x684>)
 8004d6e:	e7e3      	b.n	8004d38 <main+0x494>
	else if (SettingsData.Option1 == 4)
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d101      	bne.n	8004d78 <main+0x4d4>
		Menu_Navigate(&Menu_5_1);
 8004d74:	486d      	ldr	r0, [pc, #436]	; (8004f2c <main+0x688>)
 8004d76:	e7df      	b.n	8004d38 <main+0x494>
	else if (SettingsData.Option1 == 5)
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	d101      	bne.n	8004d80 <main+0x4dc>
		Menu_Navigate(&Menu_6_1);
 8004d7c:	486c      	ldr	r0, [pc, #432]	; (8004f30 <main+0x68c>)
 8004d7e:	e7db      	b.n	8004d38 <main+0x494>
	else if (SettingsData.Option1 == 6)
 8004d80:	2b06      	cmp	r3, #6
 8004d82:	d101      	bne.n	8004d88 <main+0x4e4>
		Menu_Navigate(&Menu_7_1);
 8004d84:	486b      	ldr	r0, [pc, #428]	; (8004f34 <main+0x690>)
 8004d86:	e7d7      	b.n	8004d38 <main+0x494>
	else if (SettingsData.Option1 == 7)
 8004d88:	2b07      	cmp	r3, #7
 8004d8a:	d1d4      	bne.n	8004d36 <main+0x492>
		Menu_Navigate(&Menu_8_1);
 8004d8c:	486a      	ldr	r0, [pc, #424]	; (8004f38 <main+0x694>)
 8004d8e:	e7d3      	b.n	8004d38 <main+0x494>
			Menu_Navigate(MENU_PREVIOUS);
 8004d90:	f7fc fcb0 	bl	80016f4 <Menu_GetCurrentMenu>
 8004d94:	6840      	ldr	r0, [r0, #4]
			Menu_Navigate(MENU_PARENT);
 8004d96:	f7fc fcb3 	bl	8001700 <Menu_Navigate>
	if (Menu_GetCurrentMenu() == &Menu_2_1)
 8004d9a:	f7fc fcab 	bl	80016f4 <Menu_GetCurrentMenu>
 8004d9e:	4581      	cmp	r9, r0
 8004da0:	d12b      	bne.n	8004dfa <main+0x556>
		MenuPowerSupply(Button);
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7fd fe4c 	bl	8002a40 <MenuPowerSupply>
	if (EnterInMenu_Status == 0)
 8004da8:	f898 3000 	ldrb.w	r3, [r8]
 8004dac:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004db0:	b983      	cbnz	r3, 8004dd4 <main+0x530>
	OUT_OFF();
 8004db2:	f7fd fc3f 	bl	8002634 <OUT_OFF>
		InitiStatus = 0;
 8004db6:	4b61      	ldr	r3, [pc, #388]	; (8004f3c <main+0x698>)
 8004db8:	7019      	strb	r1, [r3, #0]
		CountShow = 0;
 8004dba:	4b61      	ldr	r3, [pc, #388]	; (8004f40 <main+0x69c>)
 8004dbc:	7019      	strb	r1, [r3, #0]
		SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8004dbe:	4b61      	ldr	r3, [pc, #388]	; (8004f44 <main+0x6a0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60ab      	str	r3, [r5, #8]
		DischargeTimeSec_Previous = DischargeTimeSec;
 8004dc4:	4b60      	ldr	r3, [pc, #384]	; (8004f48 <main+0x6a4>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4b60      	ldr	r3, [pc, #384]	; (8004f4c <main+0x6a8>)
 8004dca:	601a      	str	r2, [r3, #0]
		ChargeDischargeState = 0;
 8004dcc:	4b60      	ldr	r3, [pc, #384]	; (8004f50 <main+0x6ac>)
 8004dce:	7019      	strb	r1, [r3, #0]
		OutStateAfterPowerUp = 1;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	6033      	str	r3, [r6, #0]
	delay_ms(100);
 8004dd4:	2064      	movs	r0, #100	; 0x64
 8004dd6:	f7fc f8f7 	bl	8000fc8 <delay_ms>
  {
 8004dda:	e7b4      	b.n	8004d46 <main+0x4a2>
			Menu_Navigate(MENU_NEXT);
 8004ddc:	f7fc fc8a 	bl	80016f4 <Menu_GetCurrentMenu>
 8004de0:	6800      	ldr	r0, [r0, #0]
 8004de2:	e7d8      	b.n	8004d96 <main+0x4f2>
			Menu_SelectItem(KEY_NEXT);
 8004de4:	2002      	movs	r0, #2
 8004de6:	f7fc fcaf 	bl	8001748 <Menu_SelectItem>
			Menu_Navigate(MENU_CHILD);
 8004dea:	f7fc fc83 	bl	80016f4 <Menu_GetCurrentMenu>
 8004dee:	68c0      	ldr	r0, [r0, #12]
 8004df0:	e7d1      	b.n	8004d96 <main+0x4f2>
			Menu_Navigate(MENU_PARENT);
 8004df2:	f7fc fc7f 	bl	80016f4 <Menu_GetCurrentMenu>
 8004df6:	6880      	ldr	r0, [r0, #8]
 8004df8:	e7cd      	b.n	8004d96 <main+0x4f2>
	else if (Menu_GetCurrentMenu() == &Menu_3_1)
 8004dfa:	f7fc fc7b 	bl	80016f4 <Menu_GetCurrentMenu>
 8004dfe:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <main+0x680>)
 8004e00:	4283      	cmp	r3, r0
 8004e02:	d103      	bne.n	8004e0c <main+0x568>
		MenuLoad(Button);
 8004e04:	4620      	mov	r0, r4
 8004e06:	f7fd f827 	bl	8001e58 <MenuLoad>
 8004e0a:	e7cd      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_4_1)
 8004e0c:	f7fc fc72 	bl	80016f4 <Menu_GetCurrentMenu>
 8004e10:	4b45      	ldr	r3, [pc, #276]	; (8004f28 <main+0x684>)
 8004e12:	4283      	cmp	r3, r0
 8004e14:	d103      	bne.n	8004e1e <main+0x57a>
		MenuChargeCC_CV(Button);
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7fe f834 	bl	8002e84 <MenuChargeCC_CV>
 8004e1c:	e7c4      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_5_1)
 8004e1e:	f7fc fc69 	bl	80016f4 <Menu_GetCurrentMenu>
 8004e22:	4b42      	ldr	r3, [pc, #264]	; (8004f2c <main+0x688>)
 8004e24:	4283      	cmp	r3, r0
 8004e26:	d103      	bne.n	8004e30 <main+0x58c>
		MenuChargeAdapt(Button);
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f7fe f9a3 	bl	8003174 <MenuChargeAdapt>
 8004e2e:	e7bb      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_6_1)
 8004e30:	f7fc fc60 	bl	80016f4 <Menu_GetCurrentMenu>
 8004e34:	4b3e      	ldr	r3, [pc, #248]	; (8004f30 <main+0x68c>)
 8004e36:	4283      	cmp	r3, r0
 8004e38:	d103      	bne.n	8004e42 <main+0x59e>
		MenuDisCharge(Button);
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f7fd fc72 	bl	8002724 <MenuDisCharge>
 8004e40:	e7b2      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_6_1a)
 8004e42:	f7fc fc57 	bl	80016f4 <Menu_GetCurrentMenu>
 8004e46:	4b43      	ldr	r3, [pc, #268]	; (8004f54 <main+0x6b0>)
 8004e48:	4283      	cmp	r3, r0
 8004e4a:	d103      	bne.n	8004e54 <main+0x5b0>
		MenuCheckingCapacity(Button);
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f7fe fec1 	bl	8003bd4 <MenuCheckingCapacity>
 8004e52:	e7a9      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_7_1)
 8004e54:	f7fc fc4e 	bl	80016f4 <Menu_GetCurrentMenu>
 8004e58:	4b36      	ldr	r3, [pc, #216]	; (8004f34 <main+0x690>)
 8004e5a:	4283      	cmp	r3, r0
 8004e5c:	d103      	bne.n	8004e66 <main+0x5c2>
		MenuTraining_new(Button);
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f7fe fb68 	bl	8003534 <MenuTraining_new>
 8004e64:	e7a0      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_8_1)
 8004e66:	f7fc fc45 	bl	80016f4 <Menu_GetCurrentMenu>
 8004e6a:	4b33      	ldr	r3, [pc, #204]	; (8004f38 <main+0x694>)
 8004e6c:	4283      	cmp	r3, r0
 8004e6e:	d103      	bne.n	8004e78 <main+0x5d4>
		MenuSwing(Button);
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7fe fdb3 	bl	80039dc <MenuSwing>
 8004e76:	e797      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_8a_1)
 8004e78:	f7fc fc3c 	bl	80016f4 <Menu_GetCurrentMenu>
 8004e7c:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <main+0x6b4>)
 8004e7e:	4283      	cmp	r3, r0
 8004e80:	d103      	bne.n	8004e8a <main+0x5e6>
		MenuBatterySimilation(Button);
 8004e82:	4620      	mov	r0, r4
 8004e84:	f7fd ff86 	bl	8002d94 <MenuBatterySimilation>
 8004e88:	e78e      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_9_1)
 8004e8a:	f7fc fc33 	bl	80016f4 <Menu_GetCurrentMenu>
 8004e8e:	4b33      	ldr	r3, [pc, #204]	; (8004f5c <main+0x6b8>)
 8004e90:	4283      	cmp	r3, r0
 8004e92:	d103      	bne.n	8004e9c <main+0x5f8>
		MenuDIAGNOSTIC(Button);
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7ff f97d 	bl	8004194 <MenuDIAGNOSTIC>
 8004e9a:	e785      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_11_1)
 8004e9c:	f7fc fc2a 	bl	80016f4 <Menu_GetCurrentMenu>
 8004ea0:	4b2f      	ldr	r3, [pc, #188]	; (8004f60 <main+0x6bc>)
 8004ea2:	4283      	cmp	r3, r0
 8004ea4:	d103      	bne.n	8004eae <main+0x60a>
		MenuLog(Button);
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f7fd f84c 	bl	8001f44 <MenuLog>
 8004eac:	e77c      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_10_2_1)
 8004eae:	f7fc fc21 	bl	80016f4 <Menu_GetCurrentMenu>
 8004eb2:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <main+0x6c0>)
 8004eb4:	4283      	cmp	r3, r0
 8004eb6:	d103      	bne.n	8004ec0 <main+0x61c>
		MenuCalibration_CURRENT_Load_to_0(Button);
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7fd f8b1 	bl	8002020 <MenuCalibration_CURRENT_Load_to_0>
 8004ebe:	e773      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_10_1_1)
 8004ec0:	f7fc fc18 	bl	80016f4 <Menu_GetCurrentMenu>
 8004ec4:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <main+0x6c4>)
 8004ec6:	4283      	cmp	r3, r0
 8004ec8:	d150      	bne.n	8004f6c <main+0x6c8>
		MenuCalibration_CURRENT_Out_to_0(Button);
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7fd f884 	bl	8001fd8 <MenuCalibration_CURRENT_Out_to_0>
 8004ed0:	e76a      	b.n	8004da8 <main+0x504>
 8004ed2:	bf00      	nop
 8004ed4:	2000028c 	.word	0x2000028c
 8004ed8:	e000ed00 	.word	0xe000ed00
 8004edc:	20000878 	.word	0x20000878
 8004ee0:	2000027a 	.word	0x2000027a
 8004ee4:	08005c4e 	.word	0x08005c4e
 8004ee8:	080062b8 	.word	0x080062b8
 8004eec:	08005af8 	.word	0x08005af8
 8004ef0:	080062d0 	.word	0x080062d0
 8004ef4:	080062e1 	.word	0x080062e1
 8004ef8:	200000f4 	.word	0x200000f4
 8004efc:	20000780 	.word	0x20000780
 8004f00:	20000154 	.word	0x20000154
 8004f04:	20000274 	.word	0x20000274
 8004f08:	20000a18 	.word	0x20000a18
 8004f0c:	20000a1c 	.word	0x20000a1c
 8004f10:	20000a14 	.word	0x20000a14
 8004f14:	08001ce9 	.word	0x08001ce9
 8004f18:	08006a24 	.word	0x08006a24
 8004f1c:	20000785 	.word	0x20000785
 8004f20:	2000079c 	.word	0x2000079c
 8004f24:	08006a7c 	.word	0x08006a7c
 8004f28:	08006ad4 	.word	0x08006ad4
 8004f2c:	08006b2c 	.word	0x08006b2c
 8004f30:	08006b84 	.word	0x08006b84
 8004f34:	08006c34 	.word	0x08006c34
 8004f38:	08006c8c 	.word	0x08006c8c
 8004f3c:	2000079d 	.word	0x2000079d
 8004f40:	2000078d 	.word	0x2000078d
 8004f44:	2000077c 	.word	0x2000077c
 8004f48:	20000794 	.word	0x20000794
 8004f4c:	20000798 	.word	0x20000798
 8004f50:	20000786 	.word	0x20000786
 8004f54:	08006bb0 	.word	0x08006bb0
 8004f58:	08006ce4 	.word	0x08006ce4
 8004f5c:	08006d3c 	.word	0x08006d3c
 8004f60:	08006688 	.word	0x08006688
 8004f64:	080063f8 	.word	0x080063f8
 8004f68:	080063a0 	.word	0x080063a0
	else if (Menu_GetCurrentMenu() == &Menu_10_4_1)
 8004f6c:	f7fc fbc2 	bl	80016f4 <Menu_GetCurrentMenu>
 8004f70:	4b48      	ldr	r3, [pc, #288]	; (8005094 <main+0x7f0>)
 8004f72:	4283      	cmp	r3, r0
 8004f74:	d103      	bne.n	8004f7e <main+0x6da>
		MenuCalibration_CURRENT_Load(Button);
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7fd fb7a 	bl	8002670 <MenuCalibration_CURRENT_Load>
 8004f7c:	e714      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_10_3_1)
 8004f7e:	f7fc fbb9 	bl	80016f4 <Menu_GetCurrentMenu>
 8004f82:	4b45      	ldr	r3, [pc, #276]	; (8005098 <main+0x7f4>)
 8004f84:	4283      	cmp	r3, r0
 8004f86:	d103      	bne.n	8004f90 <main+0x6ec>
		MenuCalibration_CURRENT_Out(Button);
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f7fd fdbd 	bl	8002b08 <MenuCalibration_CURRENT_Out>
 8004f8e:	e70b      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_10_7_1)
 8004f90:	f7fc fbb0 	bl	80016f4 <Menu_GetCurrentMenu>
 8004f94:	4b41      	ldr	r3, [pc, #260]	; (800509c <main+0x7f8>)
 8004f96:	4283      	cmp	r3, r0
 8004f98:	d103      	bne.n	8004fa2 <main+0x6fe>
		MenuCalibration_VoltageIn(Button);
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f7fd fe5c 	bl	8002c58 <MenuCalibration_VoltageIn>
 8004fa0:	e702      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_10_6_1)
 8004fa2:	f7fc fba7 	bl	80016f4 <Menu_GetCurrentMenu>
 8004fa6:	4b3e      	ldr	r3, [pc, #248]	; (80050a0 <main+0x7fc>)
 8004fa8:	4283      	cmp	r3, r0
 8004faa:	d103      	bne.n	8004fb4 <main+0x710>
		MenuCalibration_VoltageOut(Button);
 8004fac:	4620      	mov	r0, r4
 8004fae:	f7fd fe1b 	bl	8002be8 <MenuCalibration_VoltageOut>
 8004fb2:	e6f9      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_10_5_1)
 8004fb4:	f7fc fb9e 	bl	80016f4 <Menu_GetCurrentMenu>
 8004fb8:	4b3a      	ldr	r3, [pc, #232]	; (80050a4 <main+0x800>)
 8004fba:	4283      	cmp	r3, r0
 8004fbc:	d103      	bne.n	8004fc6 <main+0x722>
		MenuCalibration_VoltagePS(Button);
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f7fd fdda 	bl	8002b78 <MenuCalibration_VoltagePS>
 8004fc4:	e6f0      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_10_8_1)
 8004fc6:	f7fc fb95 	bl	80016f4 <Menu_GetCurrentMenu>
 8004fca:	4b37      	ldr	r3, [pc, #220]	; (80050a8 <main+0x804>)
 8004fcc:	4283      	cmp	r3, r0
 8004fce:	d103      	bne.n	8004fd8 <main+0x734>
		MenuCalibration_Resist_Comp_5V1A(Button);
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7fd fe79 	bl	8002cc8 <MenuCalibration_Resist_Comp_5V1A>
 8004fd6:	e6e7      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_10_9_1)
 8004fd8:	f7fc fb8c 	bl	80016f4 <Menu_GetCurrentMenu>
 8004fdc:	4b33      	ldr	r3, [pc, #204]	; (80050ac <main+0x808>)
 8004fde:	4283      	cmp	r3, r0
 8004fe0:	d103      	bne.n	8004fea <main+0x746>
		MenuCalibration_BackToFactory(Button);
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f7fd f840 	bl	8002068 <MenuCalibration_BackToFactory>
 8004fe8:	e6de      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_1_1_1)
 8004fea:	f7fc fb83 	bl	80016f4 <Menu_GetCurrentMenu>
 8004fee:	4b30      	ldr	r3, [pc, #192]	; (80050b0 <main+0x80c>)
 8004ff0:	4283      	cmp	r3, r0
 8004ff2:	d103      	bne.n	8004ffc <main+0x758>
		MenuSettingsChargeTime(Button);
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f7fd f893 	bl	8002120 <MenuSettingsChargeTime>
 8004ffa:	e6d5      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_1_1_1a)
 8004ffc:	f7fc fb7a 	bl	80016f4 <Menu_GetCurrentMenu>
 8005000:	4b2c      	ldr	r3, [pc, #176]	; (80050b4 <main+0x810>)
 8005002:	4283      	cmp	r3, r0
 8005004:	d103      	bne.n	800500e <main+0x76a>
		MenuSettingsBatteryType(Button);
 8005006:	4620      	mov	r0, r4
 8005008:	f7fd f8b0 	bl	800216c <MenuSettingsBatteryType>
 800500c:	e6cc      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_1_2_1)
 800500e:	f7fc fb71 	bl	80016f4 <Menu_GetCurrentMenu>
 8005012:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <main+0x814>)
 8005014:	4283      	cmp	r3, r0
 8005016:	d103      	bne.n	8005020 <main+0x77c>
		MenuSettingsLowVolt(Button);
 8005018:	4620      	mov	r0, r4
 800501a:	f7fd f91f 	bl	800225c <MenuSettingsLowVolt>
 800501e:	e6c3      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_1_3_1)
 8005020:	f7fc fb68 	bl	80016f4 <Menu_GetCurrentMenu>
 8005024:	4b25      	ldr	r3, [pc, #148]	; (80050bc <main+0x818>)
 8005026:	4283      	cmp	r3, r0
 8005028:	d103      	bne.n	8005032 <main+0x78e>
		MenuSettingsMaxVolt(Button);
 800502a:	4620      	mov	r0, r4
 800502c:	f7fd f938 	bl	80022a0 <MenuSettingsMaxVolt>
 8005030:	e6ba      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_1_4_1)
 8005032:	f7fc fb5f 	bl	80016f4 <Menu_GetCurrentMenu>
 8005036:	4b22      	ldr	r3, [pc, #136]	; (80050c0 <main+0x81c>)
 8005038:	4283      	cmp	r3, r0
 800503a:	d103      	bne.n	8005044 <main+0x7a0>
		MenuSettingsSwngChrgTime(Button);
 800503c:	4620      	mov	r0, r4
 800503e:	f7fd f951 	bl	80022e4 <MenuSettingsSwngChrgTime>
 8005042:	e6b1      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_1_5_1)
 8005044:	f7fc fb56 	bl	80016f4 <Menu_GetCurrentMenu>
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <main+0x820>)
 800504a:	4283      	cmp	r3, r0
 800504c:	d103      	bne.n	8005056 <main+0x7b2>
		MenuSettingsSwngDChrgTime(Button);
 800504e:	4620      	mov	r0, r4
 8005050:	f7fd f966 	bl	8002320 <MenuSettingsSwngDChrgTime>
 8005054:	e6a8      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_1_6_1)
 8005056:	f7fc fb4d 	bl	80016f4 <Menu_GetCurrentMenu>
 800505a:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <main+0x824>)
 800505c:	4283      	cmp	r3, r0
 800505e:	d103      	bne.n	8005068 <main+0x7c4>
		MenuSettingsChargeAddapt(Button);
 8005060:	4620      	mov	r0, r4
 8005062:	f7fd f97b 	bl	800235c <MenuSettingsChargeAddapt>
 8005066:	e69f      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_1_S_1)
 8005068:	f7fc fb44 	bl	80016f4 <Menu_GetCurrentMenu>
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <main+0x828>)
 800506e:	4283      	cmp	r3, r0
 8005070:	d103      	bne.n	800507a <main+0x7d6>
		MenuSettingsSaveMenuPosWhenOFF(Button);
 8005072:	4620      	mov	r0, r4
 8005074:	f7fd f9ce 	bl	8002414 <MenuSettingsSaveMenuPosWhenOFF>
 8005078:	e696      	b.n	8004da8 <main+0x504>
	else if (Menu_GetCurrentMenu() == &Menu_1_SO_1)
 800507a:	f7fc fb3b 	bl	80016f4 <Menu_GetCurrentMenu>
 800507e:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <main+0x82c>)
 8005080:	4283      	cmp	r3, r0
 8005082:	d103      	bne.n	800508c <main+0x7e8>
		MenuSettingsOutAfterPowerUp(Button);
 8005084:	4620      	mov	r0, r4
 8005086:	f7fd fa1b 	bl	80024c0 <MenuSettingsOutAfterPowerUp>
 800508a:	e68d      	b.n	8004da8 <main+0x504>
	else EnterInMenu_Status = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	f888 3000 	strb.w	r3, [r8]
 8005092:	e689      	b.n	8004da8 <main+0x504>
 8005094:	080064a8 	.word	0x080064a8
 8005098:	08006450 	.word	0x08006450
 800509c:	080065b0 	.word	0x080065b0
 80050a0:	08006558 	.word	0x08006558
 80050a4:	08006500 	.word	0x08006500
 80050a8:	080065f8 	.word	0x080065f8
 80050ac:	08006640 	.word	0x08006640
 80050b0:	080066e0 	.word	0x080066e0
 80050b4:	0800670c 	.word	0x0800670c
 80050b8:	08006790 	.word	0x08006790
 80050bc:	080067e8 	.word	0x080067e8
 80050c0:	08006840 	.word	0x08006840
 80050c4:	08006898 	.word	0x08006898
 80050c8:	080068f0 	.word	0x080068f0
 80050cc:	080069cc 	.word	0x080069cc
 80050d0:	080069a0 	.word	0x080069a0

080050d4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050d4:	4770      	bx	lr

080050d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050d6:	e7fe      	b.n	80050d6 <HardFault_Handler>

080050d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050d8:	e7fe      	b.n	80050d8 <MemManage_Handler>

080050da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050da:	e7fe      	b.n	80050da <BusFault_Handler>

080050dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050dc:	e7fe      	b.n	80050dc <UsageFault_Handler>

080050de <SVC_Handler>:
 80050de:	4770      	bx	lr

080050e0 <DebugMon_Handler>:
 80050e0:	4770      	bx	lr

080050e2 <PendSV_Handler>:
 80050e2:	4770      	bx	lr

080050e4 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//Delay_us(990);
	SysTick_Callback();
 80050e4:	f7ff bb00 	b.w	80046e8 <SysTick_Callback>

080050e8 <DMA1_Channel1_IRQHandler>:
 80050e8:	4770      	bx	lr
	...

080050ec <USART1_IRQHandler>:
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 80050ec:	4914      	ldr	r1, [pc, #80]	; (8005140 <USART1_IRQHandler+0x54>)
 80050ee:	680b      	ldr	r3, [r1, #0]
 80050f0:	061b      	lsls	r3, r3, #24
 80050f2:	d524      	bpl.n	800513e <USART1_IRQHandler+0x52>
	{
		if (bufferUart1.tx_counter > 0) //если есть что передать
 80050f4:	4b13      	ldr	r3, [pc, #76]	; (8005144 <USART1_IRQHandler+0x58>)
 80050f6:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80050fa:	b292      	uxth	r2, r2
 80050fc:	b1da      	cbz	r2, 8005136 <USART1_IRQHandler+0x4a>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количество не переданных данных
 80050fe:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005102:	3a01      	subs	r2, #1
 8005104:	b292      	uxth	r2, r2
 8005106:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементируя хвост буфера
 800510a:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 800510e:	b292      	uxth	r2, r2
 8005110:	1c50      	adds	r0, r2, #1
 8005112:	b280      	uxth	r0, r0
 8005114:	f8a3 0456 	strh.w	r0, [r3, #1110]	; 0x456
 8005118:	441a      	add	r2, r3
 800511a:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	604a      	str	r2, [r1, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 8005122:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 8005126:	b292      	uxth	r2, r2
 8005128:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800512c:	d107      	bne.n	800513e <USART1_IRQHandler+0x52>
 800512e:	2200      	movs	r2, #0
 8005130:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
 8005134:	4770      	bx	lr
	    }
	    else //если нечего передать, запрещаем прерывание по передачи
	    {
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005136:	68cb      	ldr	r3, [r1, #12]
 8005138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513c:	60cb      	str	r3, [r1, #12]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800513e:	4770      	bx	lr
 8005140:	40013800 	.word	0x40013800
 8005144:	200002b4 	.word	0x200002b4

08005148 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005148:	4770      	bx	lr
	...

0800514c <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800514c:	4913      	ldr	r1, [pc, #76]	; (800519c <SystemCoreClockUpdate+0x50>)
{
 800514e:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005150:	684b      	ldr	r3, [r1, #4]
  
  switch (tmp)
 8005152:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <SystemCoreClockUpdate+0x54>)
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005154:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 8005158:	2b08      	cmp	r3, #8
 800515a:	d00a      	beq.n	8005172 <SystemCoreClockUpdate+0x26>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800515c:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <SystemCoreClockUpdate+0x58>)
      else
      {
 #if defined(STM32F100xB) || defined(STM32F100xE)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 800515e:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8005160:	684b      	ldr	r3, [r1, #4]
 8005162:	4911      	ldr	r1, [pc, #68]	; (80051a8 <SystemCoreClockUpdate+0x5c>)
 8005164:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005168:	5cc9      	ldrb	r1, [r1, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800516a:	6813      	ldr	r3, [r2, #0]
 800516c:	40cb      	lsrs	r3, r1
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bd10      	pop	{r4, pc}
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8005172:	684b      	ldr	r3, [r1, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8005174:	6848      	ldr	r0, [r1, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 8005176:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00U)
 800517a:	03c0      	lsls	r0, r0, #15
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 800517c:	bf49      	itett	mi
 800517e:	6ac8      	ldrmi	r0, [r1, #44]	; 0x2c
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8005180:	480a      	ldrpl	r0, [pc, #40]	; (80051ac <SystemCoreClockUpdate+0x60>)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 8005182:	f000 000f 	andmi.w	r0, r0, #15
 8005186:	1c44      	addmi	r4, r0, #1
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8005188:	bf48      	it	mi
 800518a:	4806      	ldrmi	r0, [pc, #24]	; (80051a4 <SystemCoreClockUpdate+0x58>)
      pllmull = ( pllmull >> 18U) + 2U;
 800518c:	f103 0302 	add.w	r3, r3, #2
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8005190:	bf48      	it	mi
 8005192:	fbb0 f0f4 	udivmi	r0, r0, r4
 8005196:	4343      	muls	r3, r0
 8005198:	e7e1      	b.n	800515e <SystemCoreClockUpdate+0x12>
 800519a:	bf00      	nop
 800519c:	40021000 	.word	0x40021000
 80051a0:	2000028c 	.word	0x2000028c
 80051a4:	007a1200 	.word	0x007a1200
 80051a8:	08006d65 	.word	0x08006d65
 80051ac:	003d0900 	.word	0x003d0900

080051b0 <printToBufferUART1>:
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80051b0:	2100      	movs	r1, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80051b2:	4a30      	ldr	r2, [pc, #192]	; (8005274 <printToBufferUART1+0xc4>)
{
 80051b4:	b510      	push	{r4, lr}
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80051b6:	68d3      	ldr	r3, [r2, #12]
 80051b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051bc:	60d3      	str	r3, [r2, #12]
	while (*str != 0)
 80051be:	4b2e      	ldr	r3, [pc, #184]	; (8005278 <printToBufferUART1+0xc8>)
 80051c0:	7802      	ldrb	r2, [r0, #0]
 80051c2:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80051c6:	bb5a      	cbnz	r2, 8005220 <printToBufferUART1+0x70>
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 80051c8:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80051cc:	b292      	uxth	r2, r2
 80051ce:	1c51      	adds	r1, r2, #1
 80051d0:	b289      	uxth	r1, r1
 80051d2:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 80051d6:	210a      	movs	r1, #10
 80051d8:	441a      	add	r2, r3
 80051da:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80051de:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80051e2:	b292      	uxth	r2, r2
 80051e4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80051e8:	bf08      	it	eq
 80051ea:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80051ee:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80051f2:	3201      	adds	r2, #1
 80051f4:	b292      	uxth	r2, r2
 80051f6:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80051fa:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 80051fe:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005202:	b289      	uxth	r1, r1
 8005204:	b292      	uxth	r2, r2
 8005206:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005208:	bf3e      	ittt	cc
 800520a:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 800520e:	b292      	uxthcc	r2, r2
 8005210:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8005214:	4a17      	ldr	r2, [pc, #92]	; (8005274 <printToBufferUART1+0xc4>)
 8005216:	68d3      	ldr	r3, [r2, #12]
 8005218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521c:	60d3      	str	r3, [r2, #12]
}
 800521e:	bd10      	pop	{r4, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8005220:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005224:	b292      	uxth	r2, r2
 8005226:	1c54      	adds	r4, r2, #1
 8005228:	b2a4      	uxth	r4, r4
 800522a:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 800522e:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005232:	441a      	add	r2, r3
 8005234:	b2e4      	uxtb	r4, r4
 8005236:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800523a:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800523e:	b292      	uxth	r2, r2
 8005240:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005244:	bf08      	it	eq
 8005246:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800524a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800524e:	3201      	adds	r2, #1
 8005250:	b292      	uxth	r2, r2
 8005252:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005256:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 800525a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800525e:	b2a4      	uxth	r4, r4
 8005260:	b292      	uxth	r2, r2
 8005262:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005264:	bf3e      	ittt	cc
 8005266:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 800526a:	b292      	uxthcc	r2, r2
 800526c:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 8005270:	e7a6      	b.n	80051c0 <printToBufferUART1+0x10>
 8005272:	bf00      	nop
 8005274:	40013800 	.word	0x40013800
 8005278:	200002b4 	.word	0x200002b4

0800527c <printToBufferWithoutEndUART1>:
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800527c:	2100      	movs	r1, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800527e:	4a1c      	ldr	r2, [pc, #112]	; (80052f0 <printToBufferWithoutEndUART1+0x74>)
{
 8005280:	b510      	push	{r4, lr}
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005282:	68d3      	ldr	r3, [r2, #12]
 8005284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005288:	60d3      	str	r3, [r2, #12]
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 800528a:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <printToBufferWithoutEndUART1+0x78>)
	while (*str != 0)
 800528c:	7802      	ldrb	r2, [r0, #0]
 800528e:	b92a      	cbnz	r2, 800529c <printToBufferWithoutEndUART1+0x20>
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8005290:	4a17      	ldr	r2, [pc, #92]	; (80052f0 <printToBufferWithoutEndUART1+0x74>)
 8005292:	68d3      	ldr	r3, [r2, #12]
 8005294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005298:	60d3      	str	r3, [r2, #12]
}
 800529a:	bd10      	pop	{r4, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 800529c:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80052a0:	b292      	uxth	r2, r2
 80052a2:	1c54      	adds	r4, r2, #1
 80052a4:	b2a4      	uxth	r4, r4
 80052a6:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 80052aa:	f810 4b01 	ldrb.w	r4, [r0], #1
 80052ae:	441a      	add	r2, r3
 80052b0:	b2e4      	uxtb	r4, r4
 80052b2:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80052b6:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80052ba:	b292      	uxth	r2, r2
 80052bc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80052c0:	bf08      	it	eq
 80052c2:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80052c6:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80052ca:	3201      	adds	r2, #1
 80052cc:	b292      	uxth	r2, r2
 80052ce:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80052d2:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 80052d6:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80052da:	b2a4      	uxth	r4, r4
 80052dc:	b292      	uxth	r2, r2
 80052de:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80052e0:	bf3e      	ittt	cc
 80052e2:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 80052e6:	b292      	uxthcc	r2, r2
 80052e8:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 80052ec:	e7ce      	b.n	800528c <printToBufferWithoutEndUART1+0x10>
 80052ee:	bf00      	nop
 80052f0:	40013800 	.word	0x40013800
 80052f4:	200002b4 	.word	0x200002b4

080052f8 <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 80052f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052fa:	9101      	str	r1, [sp, #4]
 80052fc:	f88d 2003 	strb.w	r2, [sp, #3]
	char *str1;
	if (koma == 0)
 8005300:	f89d 3003 	ldrb.w	r3, [sp, #3]
{
 8005304:	4604      	mov	r4, r0
		str1 = itoa(value);
 8005306:	9801      	ldr	r0, [sp, #4]
	if (koma == 0)
 8005308:	2b00      	cmp	r3, #0
 800530a:	d13f      	bne.n	800538c <printToBufferUART1D+0x94>
		str1 = itoa(value);
 800530c:	f7fb ff78 	bl	8001200 <itoa>
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005310:	2500      	movs	r5, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005312:	4a47      	ldr	r2, [pc, #284]	; (8005430 <printToBufferUART1D+0x138>)
 8005314:	68d3      	ldr	r3, [r2, #12]
 8005316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531a:	60d3      	str	r3, [r2, #12]
	while (*str != 0)
 800531c:	4b45      	ldr	r3, [pc, #276]	; (8005434 <printToBufferUART1D+0x13c>)
 800531e:	7822      	ldrb	r2, [r4, #0]
 8005320:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005324:	2a00      	cmp	r2, #0
 8005326:	d136      	bne.n	8005396 <printToBufferUART1D+0x9e>
 8005328:	3801      	subs	r0, #1

	}

	while (*str1 != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 800532a:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
	while (*str1 != 0)
 800532e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8005332:	b292      	uxth	r2, r2
	while (*str1 != 0)
 8005334:	2c00      	cmp	r4, #0
 8005336:	d157      	bne.n	80053e8 <printToBufferUART1D+0xf0>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8005338:	1c51      	adds	r1, r2, #1
 800533a:	b289      	uxth	r1, r1
 800533c:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 8005340:	210a      	movs	r1, #10
 8005342:	441a      	add	r2, r3
 8005344:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005348:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800534c:	b292      	uxth	r2, r2
 800534e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005352:	bf08      	it	eq
 8005354:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005358:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800535c:	3201      	adds	r2, #1
 800535e:	b292      	uxth	r2, r2
 8005360:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005364:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 8005368:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800536c:	b289      	uxth	r1, r1
 800536e:	b292      	uxth	r2, r2
 8005370:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005372:	bf3e      	ittt	cc
 8005374:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 8005378:	b292      	uxthcc	r2, r2
 800537a:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 800537e:	4a2c      	ldr	r2, [pc, #176]	; (8005430 <printToBufferUART1D+0x138>)
 8005380:	68d3      	ldr	r3, [r2, #12]
 8005382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005386:	60d3      	str	r3, [r2, #12]
}
 8005388:	b003      	add	sp, #12
 800538a:	bd30      	pop	{r4, r5, pc}
		str1 = itoa_koma(value,koma);
 800538c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8005390:	f7fb ffae 	bl	80012f0 <itoa_koma>
 8005394:	e7bc      	b.n	8005310 <printToBufferUART1D+0x18>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8005396:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800539a:	b292      	uxth	r2, r2
 800539c:	1c51      	adds	r1, r2, #1
 800539e:	b289      	uxth	r1, r1
 80053a0:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 80053a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a8:	441a      	add	r2, r3
 80053aa:	b2c9      	uxtb	r1, r1
 80053ac:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80053b0:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80053b4:	b292      	uxth	r2, r2
 80053b6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80053ba:	bf08      	it	eq
 80053bc:	f8a3 5454 	strheq.w	r5, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80053c0:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80053c4:	3201      	adds	r2, #1
 80053c6:	b292      	uxth	r2, r2
 80053c8:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80053cc:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 80053d0:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80053d4:	b289      	uxth	r1, r1
 80053d6:	b292      	uxth	r2, r2
 80053d8:	4291      	cmp	r1, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80053da:	bf3e      	ittt	cc
 80053dc:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 80053e0:	b292      	uxthcc	r2, r2
 80053e2:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 80053e6:	e79a      	b.n	800531e <printToBufferUART1D+0x26>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 80053e8:	1c54      	adds	r4, r2, #1
 80053ea:	b2a4      	uxth	r4, r4
 80053ec:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 80053f0:	7804      	ldrb	r4, [r0, #0]
 80053f2:	441a      	add	r2, r3
 80053f4:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80053f8:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80053fc:	b292      	uxth	r2, r2
 80053fe:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005402:	bf08      	it	eq
 8005404:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005408:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800540c:	3201      	adds	r2, #1
 800540e:	b292      	uxth	r2, r2
 8005410:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005414:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 8005418:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800541c:	b2a4      	uxth	r4, r4
 800541e:	b292      	uxth	r2, r2
 8005420:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005422:	bf3e      	ittt	cc
 8005424:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 8005428:	b292      	uxthcc	r2, r2
 800542a:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 800542e:	e77c      	b.n	800532a <printToBufferUART1D+0x32>
 8005430:	40013800 	.word	0x40013800
 8005434:	200002b4 	.word	0x200002b4

08005438 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005438:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800543a:	e003      	b.n	8005444 <LoopCopyDataInit>

0800543c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800543e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005440:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005442:	3104      	adds	r1, #4

08005444 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005444:	480a      	ldr	r0, [pc, #40]	; (8005470 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005448:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800544a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800544c:	d3f6      	bcc.n	800543c <CopyDataInit>
  ldr r2, =_sbss
 800544e:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005450:	e002      	b.n	8005458 <LoopFillZerobss>

08005452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005452:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005454:	f842 3b04 	str.w	r3, [r2], #4

08005458 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005458:	4b08      	ldr	r3, [pc, #32]	; (800547c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800545a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800545c:	d3f9      	bcc.n	8005452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800545e:	f7ff fe73 	bl	8005148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005462:	f000 f9a5 	bl	80057b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005466:	f7ff fa1d 	bl	80048a4 <main>
  bx lr
 800546a:	4770      	bx	lr
  ldr r3, =_sidata
 800546c:	08006d88 	.word	0x08006d88
  ldr r0, =_sdata
 8005470:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005474:	20000290 	.word	0x20000290
  ldr r2, =_sbss
 8005478:	20000290 	.word	0x20000290
  ldr r3, = _ebss
 800547c:	20000a20 	.word	0x20000a20

08005480 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005480:	e7fe      	b.n	8005480 <ADC1_IRQHandler>

08005482 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005482:	4602      	mov	r2, r0
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8005484:	6880      	ldr	r0, [r0, #8]
 8005486:	b510      	push	{r4, lr}
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8005488:	f010 0001 	ands.w	r0, r0, #1
 800548c:	d10c      	bne.n	80054a8 <LL_ADC_Init+0x26>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800548e:	6853      	ldr	r3, [r2, #4]
 8005490:	684c      	ldr	r4, [r1, #4]
 8005492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005496:	4323      	orrs	r3, r4
 8005498:	6053      	str	r3, [r2, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800549a:	6893      	ldr	r3, [r2, #8]
 800549c:	6809      	ldr	r1, [r1, #0]
 800549e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054a2:	430b      	orrs	r3, r1
 80054a4:	6093      	str	r3, [r2, #8]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80054a6:	bd10      	pop	{r4, pc}
    status = ERROR;
 80054a8:	2001      	movs	r0, #1
 80054aa:	e7fc      	b.n	80054a6 <LL_ADC_Init+0x24>

080054ac <LL_ADC_REG_Init>:
 80054ac:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80054ae:	b510      	push	{r4, lr}
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80054b0:	07db      	lsls	r3, r3, #31
 80054b2:	d41b      	bmi.n	80054ec <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 80054b4:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80054b6:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 80054b8:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80054bc:	b112      	cbz	r2, 80054c4 <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 80054be:	688c      	ldr	r4, [r1, #8]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80054c4:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80054c6:	6883      	ldr	r3, [r0, #8]
 80054c8:	680c      	ldr	r4, [r1, #0]
 80054ca:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80054ce:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80054d2:	4323      	orrs	r3, r4
 80054d4:	68cc      	ldr	r4, [r1, #12]
 80054d6:	6909      	ldr	r1, [r1, #16]
 80054d8:	4323      	orrs	r3, r4
 80054da:	430b      	orrs	r3, r1
 80054dc:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80054de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80054e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054e4:	4313      	orrs	r3, r2
 80054e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 80054e8:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80054ea:	bd10      	pop	{r4, pc}
    status = ERROR;
 80054ec:	2001      	movs	r0, #1
 80054ee:	e7fc      	b.n	80054ea <LL_ADC_REG_Init+0x3e>

080054f0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80054f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80054f4:	680d      	ldr	r5, [r1, #0]
{
 80054f6:	4604      	mov	r4, r0
  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80054f8:	f3c5 250f 	ubfx	r5, r5, #8, #16
 80054fc:	fa95 f2a5 	rbit	r2, r5
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8005500:	2703      	movs	r7, #3
  pinpos = POSITION_VAL(pinmask);
 8005502:	fab2 f282 	clz	r2, r2
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8005506:	f04f 0c04 	mov.w	ip, #4
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800550a:	f04f 1e01 	mov.w	lr, #65537	; 0x10001
        currentpin = (0x00000101uL << pinpos);
 800550e:	f240 1801 	movw	r8, #257	; 0x101
  while ((pinmask  >> pinpos) != 0u)
 8005512:	fa35 f002 	lsrs.w	r0, r5, r2
 8005516:	d101      	bne.n	800551c <LL_GPIO_Init+0x2c>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 8005518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1u << pinpos)) != 0u)
 800551c:	2301      	movs	r3, #1
 800551e:	4093      	lsls	r3, r2
 8005520:	422b      	tst	r3, r5
 8005522:	d066      	beq.n	80055f2 <LL_GPIO_Init+0x102>
      if (pinpos < GPIO_PIN_MASK_POS)
 8005524:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005526:	bf88      	it	hi
 8005528:	f1a2 0308 	subhi.w	r3, r2, #8
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800552c:	f8d1 a004 	ldr.w	sl, [r1, #4]
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005530:	bf8a      	itet	hi
 8005532:	fa0e f303 	lslhi.w	r3, lr, r3
        currentpin = (0x00000101uL << pinpos);
 8005536:	fa08 f302 	lslls.w	r3, r8, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800553a:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800553e:	f1ba 0f08 	cmp.w	sl, #8
 8005542:	d10c      	bne.n	800555e <LL_GPIO_Init+0x6e>
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8005544:	68e6      	ldr	r6, [r4, #12]
 8005546:	0a18      	lsrs	r0, r3, #8
 8005548:	fa90 f9a0 	rbit	r9, r0
 800554c:	fab9 f989 	clz	r9, r9
 8005550:	ea26 0600 	bic.w	r6, r6, r0
 8005554:	6908      	ldr	r0, [r1, #16]
 8005556:	fa00 f009 	lsl.w	r0, r0, r9
 800555a:	4306      	orrs	r6, r0
 800555c:	60e6      	str	r6, [r4, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800555e:	ea4f 6913 	mov.w	r9, r3, lsr #24
 8005562:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005566:	fab6 f686 	clz	r6, r6
 800556a:	fa93 fba3 	rbit	fp, r3
 800556e:	200f      	movs	r0, #15
 8005570:	fabb fb8b 	clz	fp, fp
 8005574:	00b6      	lsls	r6, r6, #2
 8005576:	fa00 f606 	lsl.w	r6, r0, r6
 800557a:	f854 0009 	ldr.w	r0, [r4, r9]
 800557e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005582:	ea20 0606 	bic.w	r6, r0, r6
 8005586:	fa0a fb0b 	lsl.w	fp, sl, fp
 800558a:	ea46 060b 	orr.w	r6, r6, fp
 800558e:	f844 6009 	str.w	r6, [r4, r9]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005592:	6848      	ldr	r0, [r1, #4]
 8005594:	f020 0008 	bic.w	r0, r0, #8
 8005598:	2801      	cmp	r0, #1
 800559a:	d12a      	bne.n	80055f2 <LL_GPIO_Init+0x102>
 800559c:	fa93 f0a3 	rbit	r0, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80055a0:	fab0 f080 	clz	r0, r0
 80055a4:	fa93 fba3 	rbit	fp, r3
 80055a8:	fabb fb8b 	clz	fp, fp
 80055ac:	0080      	lsls	r0, r0, #2
 80055ae:	fa07 f000 	lsl.w	r0, r7, r0
 80055b2:	ea26 0600 	bic.w	r6, r6, r0
 80055b6:	6888      	ldr	r0, [r1, #8]
 80055b8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80055bc:	fa00 fb0b 	lsl.w	fp, r0, fp
 80055c0:	ea46 060b 	orr.w	r6, r6, fp
 80055c4:	f844 6009 	str.w	r6, [r4, r9]
 80055c8:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80055cc:	faba fa8a 	clz	sl, sl
 80055d0:	fa93 f3a3 	rbit	r3, r3
 80055d4:	fab3 f383 	clz	r3, r3
 80055d8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80055dc:	fa0c fa0a 	lsl.w	sl, ip, sl
 80055e0:	ea26 0a0a 	bic.w	sl, r6, sl
 80055e4:	68ce      	ldr	r6, [r1, #12]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	409e      	lsls	r6, r3
 80055ea:	ea4a 0606 	orr.w	r6, sl, r6
 80055ee:	f844 6009 	str.w	r6, [r4, r9]
    pinpos++;
 80055f2:	3201      	adds	r2, #1
 80055f4:	e78d      	b.n	8005512 <LL_GPIO_Init+0x22>
	...

080055f8 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80055fa:	4a04      	ldr	r2, [pc, #16]	; (800560c <RCC_GetHCLKClockFreq+0x14>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005602:	5cd3      	ldrb	r3, [r2, r3]
}
 8005604:	40d8      	lsrs	r0, r3
 8005606:	4770      	bx	lr
 8005608:	40021000 	.word	0x40021000
 800560c:	08006d65 	.word	0x08006d65

08005610 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005610:	4b03      	ldr	r3, [pc, #12]	; (8005620 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005612:	4a04      	ldr	r2, [pc, #16]	; (8005624 <RCC_GetPCLK1ClockFreq+0x14>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800561a:	5cd3      	ldrb	r3, [r2, r3]
}
 800561c:	40d8      	lsrs	r0, r3
 800561e:	4770      	bx	lr
 8005620:	40021000 	.word	0x40021000
 8005624:	08006d75 	.word	0x08006d75

08005628 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005628:	4b03      	ldr	r3, [pc, #12]	; (8005638 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800562a:	4a04      	ldr	r2, [pc, #16]	; (800563c <RCC_GetPCLK2ClockFreq+0x14>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005632:	5cd3      	ldrb	r3, [r2, r3]
}
 8005634:	40d8      	lsrs	r0, r3
 8005636:	4770      	bx	lr
 8005638:	40021000 	.word	0x40021000
 800563c:	08006d75 	.word	0x08006d75

08005640 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8005640:	4a09      	ldr	r2, [pc, #36]	; (8005668 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8005642:	6853      	ldr	r3, [r2, #4]
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8005644:	03db      	lsls	r3, r3, #15
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8005646:	bf41      	itttt	mi
 8005648:	6ad0      	ldrmi	r0, [r2, #44]	; 0x2c
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800564a:	4b08      	ldrmi	r3, [pc, #32]	; (800566c <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 800564c:	f000 000f 	andmi.w	r0, r0, #15
 8005650:	3001      	addmi	r0, #1
 8005652:	bf48      	it	mi
 8005654:	fbb3 f0f0 	udivmi	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8005658:	6853      	ldr	r3, [r2, #4]
      pllinputfreq = HSI_VALUE / 2U;
 800565a:	bf58      	it	pl
 800565c:	4804      	ldrpl	r0, [pc, #16]	; (8005670 <RCC_PLL_GetFreqDomain_SYS+0x30>)

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800565e:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8005662:	3302      	adds	r3, #2
}
 8005664:	4358      	muls	r0, r3
 8005666:	4770      	bx	lr
 8005668:	40021000 	.word	0x40021000
 800566c:	007a1200 	.word	0x007a1200
 8005670:	003d0900 	.word	0x003d0900

08005674 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <RCC_GetSystemClockFreq+0x14>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800567c:	2b08      	cmp	r3, #8
 800567e:	d101      	bne.n	8005684 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005680:	f7ff bfde 	b.w	8005640 <RCC_PLL_GetFreqDomain_SYS>
}
 8005684:	4801      	ldr	r0, [pc, #4]	; (800568c <RCC_GetSystemClockFreq+0x18>)
 8005686:	4770      	bx	lr
 8005688:	40021000 	.word	0x40021000
 800568c:	007a1200 	.word	0x007a1200

08005690 <LL_RCC_GetSystemClocksFreq>:
{
 8005690:	b508      	push	{r3, lr}
 8005692:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005694:	f7ff ffee 	bl	8005674 <RCC_GetSystemClockFreq>
 8005698:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800569a:	f7ff ffad 	bl	80055f8 <RCC_GetHCLKClockFreq>
 800569e:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80056a0:	f7ff ffb6 	bl	8005610 <RCC_GetPCLK1ClockFreq>
 80056a4:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80056a6:	6848      	ldr	r0, [r1, #4]
 80056a8:	f7ff ffbe 	bl	8005628 <RCC_GetPCLK2ClockFreq>
 80056ac:	60c8      	str	r0, [r1, #12]
}
 80056ae:	bd08      	pop	{r3, pc}

080056b0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80056b0:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80056b2:	68c3      	ldr	r3, [r0, #12]
 80056b4:	4604      	mov	r4, r0
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80056b6:	049b      	lsls	r3, r3, #18
{
 80056b8:	460d      	mov	r5, r1
 80056ba:	b085      	sub	sp, #20
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80056bc:	d502      	bpl.n	80056c4 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 80056be:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80056c0:	b005      	add	sp, #20
 80056c2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 80056c4:	684b      	ldr	r3, [r1, #4]
 80056c6:	68c9      	ldr	r1, [r1, #12]
 80056c8:	68c2      	ldr	r2, [r0, #12]
 80056ca:	430b      	orrs	r3, r1
 80056cc:	6929      	ldr	r1, [r5, #16]
 80056ce:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 80056d2:	430b      	orrs	r3, r1
 80056d4:	69a9      	ldr	r1, [r5, #24]
 80056d6:	f022 020c 	bic.w	r2, r2, #12
 80056da:	430b      	orrs	r3, r1
 80056dc:	4313      	orrs	r3, r2
 80056de:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80056e0:	6903      	ldr	r3, [r0, #16]
 80056e2:	68aa      	ldr	r2, [r5, #8]
 80056e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80056e8:	4313      	orrs	r3, r2
 80056ea:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80056ec:	6943      	ldr	r3, [r0, #20]
 80056ee:	696a      	ldr	r2, [r5, #20]
 80056f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f4:	4313      	orrs	r3, r2
 80056f6:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80056f8:	4668      	mov	r0, sp
 80056fa:	f7ff ffc9 	bl	8005690 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80056fe:	4b1f      	ldr	r3, [pc, #124]	; (800577c <LL_USART_Init+0xcc>)
 8005700:	429c      	cmp	r4, r3
 8005702:	d124      	bne.n	800574e <LL_USART_Init+0x9e>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005704:	9b03      	ldr	r3, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0d9      	beq.n	80056be <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 800570a:	682a      	ldr	r2, [r5, #0]
 800570c:	2a00      	cmp	r2, #0
 800570e:	d0d6      	beq.n	80056be <LL_USART_Init+0xe>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005710:	2119      	movs	r1, #25
 8005712:	434b      	muls	r3, r1
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005714:	69a9      	ldr	r1, [r5, #24]
 8005716:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800571a:	f04f 0164 	mov.w	r1, #100	; 0x64
 800571e:	d11f      	bne.n	8005760 <LL_USART_Init+0xb0>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005720:	0052      	lsls	r2, r2, #1
 8005722:	fbb3 f3f2 	udiv	r3, r3, r2
 8005726:	fbb3 f0f1 	udiv	r0, r3, r1
 800572a:	fb01 3310 	mls	r3, r1, r0, r3
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	3332      	adds	r3, #50	; 0x32
 8005732:	fbb3 f3f1 	udiv	r3, r3, r1
 8005736:	f003 0207 	and.w	r2, r3, #7
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8005740:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005744:	4413      	add	r3, r2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005746:	b29b      	uxth	r3, r3
      status = SUCCESS;
 8005748:	2000      	movs	r0, #0
 800574a:	60a3      	str	r3, [r4, #8]
 800574c:	e7b8      	b.n	80056c0 <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 800574e:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <LL_USART_Init+0xd0>)
 8005750:	429c      	cmp	r4, r3
 8005752:	d101      	bne.n	8005758 <LL_USART_Init+0xa8>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005754:	9b02      	ldr	r3, [sp, #8]
 8005756:	e7d6      	b.n	8005706 <LL_USART_Init+0x56>
    else if (USARTx == USART3)
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <LL_USART_Init+0xd4>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d1af      	bne.n	80056be <LL_USART_Init+0xe>
 800575e:	e7f9      	b.n	8005754 <LL_USART_Init+0xa4>
 8005760:	0092      	lsls	r2, r2, #2
 8005762:	fbb3 f3f2 	udiv	r3, r3, r2
 8005766:	fbb3 f2f1 	udiv	r2, r3, r1
 800576a:	fb01 3312 	mls	r3, r1, r2, r3
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	3332      	adds	r3, #50	; 0x32
 8005772:	fbb3 f3f1 	udiv	r3, r3, r1
 8005776:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800577a:	e7e4      	b.n	8005746 <LL_USART_Init+0x96>
 800577c:	40013800 	.word	0x40013800
 8005780:	40004400 	.word	0x40004400
 8005784:	40004800 	.word	0x40004800

08005788 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800578c:	fbb0 f0f3 	udiv	r0, r0, r3
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005790:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005792:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005796:	3801      	subs	r0, #1
 8005798:	6158      	str	r0, [r3, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800579a:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800579c:	2205      	movs	r2, #5
 800579e:	611a      	str	r2, [r3, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80057a0:	4770      	bx	lr
	...

080057a4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80057a4:	4b01      	ldr	r3, [pc, #4]	; (80057ac <LL_SetSystemCoreClock+0x8>)
 80057a6:	6018      	str	r0, [r3, #0]
}
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	2000028c 	.word	0x2000028c

080057b0 <__libc_init_array>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	2600      	movs	r6, #0
 80057b4:	4d0c      	ldr	r5, [pc, #48]	; (80057e8 <__libc_init_array+0x38>)
 80057b6:	4c0d      	ldr	r4, [pc, #52]	; (80057ec <__libc_init_array+0x3c>)
 80057b8:	1b64      	subs	r4, r4, r5
 80057ba:	10a4      	asrs	r4, r4, #2
 80057bc:	42a6      	cmp	r6, r4
 80057be:	d109      	bne.n	80057d4 <__libc_init_array+0x24>
 80057c0:	f000 f830 	bl	8005824 <_init>
 80057c4:	2600      	movs	r6, #0
 80057c6:	4d0a      	ldr	r5, [pc, #40]	; (80057f0 <__libc_init_array+0x40>)
 80057c8:	4c0a      	ldr	r4, [pc, #40]	; (80057f4 <__libc_init_array+0x44>)
 80057ca:	1b64      	subs	r4, r4, r5
 80057cc:	10a4      	asrs	r4, r4, #2
 80057ce:	42a6      	cmp	r6, r4
 80057d0:	d105      	bne.n	80057de <__libc_init_array+0x2e>
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d8:	4798      	blx	r3
 80057da:	3601      	adds	r6, #1
 80057dc:	e7ee      	b.n	80057bc <__libc_init_array+0xc>
 80057de:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e2:	4798      	blx	r3
 80057e4:	3601      	adds	r6, #1
 80057e6:	e7f2      	b.n	80057ce <__libc_init_array+0x1e>
 80057e8:	08006d80 	.word	0x08006d80
 80057ec:	08006d80 	.word	0x08006d80
 80057f0:	08006d80 	.word	0x08006d80
 80057f4:	08006d84 	.word	0x08006d84

080057f8 <memcpy>:
 80057f8:	440a      	add	r2, r1
 80057fa:	4291      	cmp	r1, r2
 80057fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005800:	d100      	bne.n	8005804 <memcpy+0xc>
 8005802:	4770      	bx	lr
 8005804:	b510      	push	{r4, lr}
 8005806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800580a:	4291      	cmp	r1, r2
 800580c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005810:	d1f9      	bne.n	8005806 <memcpy+0xe>
 8005812:	bd10      	pop	{r4, pc}

08005814 <memset>:
 8005814:	4603      	mov	r3, r0
 8005816:	4402      	add	r2, r0
 8005818:	4293      	cmp	r3, r2
 800581a:	d100      	bne.n	800581e <memset+0xa>
 800581c:	4770      	bx	lr
 800581e:	f803 1b01 	strb.w	r1, [r3], #1
 8005822:	e7f9      	b.n	8005818 <memset+0x4>

08005824 <_init>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr

08005830 <_fini>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr
