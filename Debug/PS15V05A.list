
PS15V05A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005638  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001538  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d40  08006d40  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  08006d40  08006d40  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d40  08006d40  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d40  08006d40  00016d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08006d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000290  08006fd8  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  08006fd8  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011aa1  00000000  00000000  000202b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002848  00000000  00000000  00031d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005307  00000000  00000000  000345a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  000398b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001058  00000000  00000000  0003a048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c3b4  00000000  00000000  0003b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b757  00000000  00000000  00047454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00044264  00000000  00000000  00052bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00096e0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001630  00000000  00000000  00096e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080057f0 	.word	0x080057f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	080057f0 	.word	0x080057f0

08000210 <flash_erase_page>:
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
	while (FLASH->SR & FLASH_SR_BSY);
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <flash_erase_page+0x3c>)
 8000212:	4613      	mov	r3, r2
 8000214:	68d1      	ldr	r1, [r2, #12]
 8000216:	07c9      	lsls	r1, r1, #31
 8000218:	d4fc      	bmi.n	8000214 <flash_erase_page+0x4>

		if (FLASH->SR & FLASH_SR_EOP) {
 800021a:	68d1      	ldr	r1, [r2, #12]
 800021c:	0689      	lsls	r1, r1, #26
			FLASH->SR = FLASH_SR_EOP;
 800021e:	bf44      	itt	mi
 8000220:	2120      	movmi	r1, #32
 8000222:	60d1      	strmi	r1, [r2, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 8000224:	691a      	ldr	r2, [r3, #16]
 8000226:	f042 0202 	orr.w	r2, r2, #2
 800022a:	611a      	str	r2, [r3, #16]
		FLASH->AR = address;
 800022c:	6158      	str	r0, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800022e:	691a      	ldr	r2, [r3, #16]
 8000230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000234:	611a      	str	r2, [r3, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <flash_erase_page+0x3c>)
 8000238:	68da      	ldr	r2, [r3, #12]
 800023a:	0692      	lsls	r2, r2, #26
 800023c:	d5fc      	bpl.n	8000238 <flash_erase_page+0x28>
		FLASH->SR = FLASH_SR_EOP;
 800023e:	2220      	movs	r2, #32
 8000240:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 8000242:	691a      	ldr	r2, [r3, #16]
 8000244:	f022 0202 	bic.w	r2, r2, #2
 8000248:	611a      	str	r2, [r3, #16]
}
 800024a:	4770      	bx	lr
 800024c:	40022000 	.word	0x40022000

08000250 <flash_unlock>:


void flash_unlock(void)
{
	  FLASH->KEYR = FLASH_KEY1;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <flash_unlock+0x10>)
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <flash_unlock+0x14>)
 8000254:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY2;
 8000256:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800025a:	605a      	str	r2, [r3, #4]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40022000 	.word	0x40022000
 8000264:	45670123 	.word	0x45670123

08000268 <flash_lock>:

void flash_lock()
{
	FLASH->CR |= FLASH_CR_LOCK;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <flash_lock+0xc>)
 800026a:	6913      	ldr	r3, [r2, #16]
 800026c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000270:	6113      	str	r3, [r2, #16]
}
 8000272:	4770      	bx	lr
 8000274:	40022000 	.word	0x40022000

08000278 <flash_write>:

void flash_write(uint32_t address,uint32_t data)
{


	while (FLASH->SR & FLASH_SR_BSY);
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <flash_write+0x48>)
{
 800027a:	b510      	push	{r4, lr}
 800027c:	461a      	mov	r2, r3
	while (FLASH->SR & FLASH_SR_BSY);
 800027e:	68dc      	ldr	r4, [r3, #12]
 8000280:	07e4      	lsls	r4, r4, #31
 8000282:	d4fc      	bmi.n	800027e <flash_write+0x6>
	if (FLASH->SR & FLASH_SR_EOP) {
 8000284:	68dc      	ldr	r4, [r3, #12]
 8000286:	06a4      	lsls	r4, r4, #26
		FLASH->SR = FLASH_SR_EOP;
 8000288:	bf44      	itt	mi
 800028a:	2420      	movmi	r4, #32
 800028c:	60dc      	strmi	r4, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 800028e:	6913      	ldr	r3, [r2, #16]
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6113      	str	r3, [r2, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <flash_write+0x48>)
    *(__IO uint16_t*)address = (uint16_t)data;
 8000298:	b28b      	uxth	r3, r1
 800029a:	8003      	strh	r3, [r0, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 800029c:	4613      	mov	r3, r2
 800029e:	68d4      	ldr	r4, [r2, #12]
 80002a0:	06a4      	lsls	r4, r4, #26
 80002a2:	d5fc      	bpl.n	800029e <flash_write+0x26>
    		FLASH->SR = FLASH_SR_EOP;
 80002a4:	2420      	movs	r4, #32


	address+=2;
	data>>=16;
    *(__IO uint16_t*)address = (uint16_t)data;
 80002a6:	0c09      	lsrs	r1, r1, #16
    		FLASH->SR = FLASH_SR_EOP;
 80002a8:	60d4      	str	r4, [r2, #12]
    *(__IO uint16_t*)address = (uint16_t)data;
 80002aa:	8041      	strh	r1, [r0, #2]
    while (!(FLASH->SR & FLASH_SR_EOP));
 80002ac:	68da      	ldr	r2, [r3, #12]
 80002ae:	0692      	lsls	r2, r2, #26
 80002b0:	d5fc      	bpl.n	80002ac <flash_write+0x34>
    		FLASH->SR = FLASH_SR_EOP;
 80002b2:	2220      	movs	r2, #32
 80002b4:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 80002b6:	691a      	ldr	r2, [r3, #16]
 80002b8:	f022 0201 	bic.w	r2, r2, #1
 80002bc:	611a      	str	r2, [r3, #16]

}
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	40022000 	.word	0x40022000

080002c4 <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
void flash_write_block()
{
 80002c4:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c6:	b672      	cpsid	i
	__disable_irq();
	flash_unlock();
 80002c8:	f7ff ffc2 	bl	8000250 <flash_unlock>
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = (void *)&LoggingData;

	logDebugD("size: ",size,0);
 80002cc:	4810      	ldr	r0, [pc, #64]	; (8000310 <flash_write_block+0x4c>)
 80002ce:	f004 ffbb 	bl	8005248 <printToBufferWithoutEndUART1>
	logDebugD("val: ",*(source_adr + 0),0);
 80002d2:	4c10      	ldr	r4, [pc, #64]	; (8000314 <flash_write_block+0x50>)
	logDebugD("size: ",size,0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80002da:	480f      	ldr	r0, [pc, #60]	; (8000318 <flash_write_block+0x54>)
 80002dc:	f004 fff2 	bl	80052c4 <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 80002e0:	480b      	ldr	r0, [pc, #44]	; (8000310 <flash_write_block+0x4c>)
 80002e2:	f004 ffb1 	bl	8005248 <printToBufferWithoutEndUART1>
 80002e6:	2200      	movs	r2, #0
 80002e8:	6821      	ldr	r1, [r4, #0]
 80002ea:	480c      	ldr	r0, [pc, #48]	; (800031c <flash_write_block+0x58>)
 80002ec:	f004 ffea 	bl	80052c4 <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <flash_write_block+0x5c>)
 80002f2:	f7ff ff8d 	bl	8000210 <flash_erase_page>
	for (i = 0; i < size/4; ++i)
 80002f6:	4d0b      	ldr	r5, [pc, #44]	; (8000324 <flash_write_block+0x60>)
	flash_erase_page(pageAdr );
 80002f8:	4809      	ldr	r0, [pc, #36]	; (8000320 <flash_write_block+0x5c>)
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80002fa:	f854 1b04 	ldr.w	r1, [r4], #4
 80002fe:	f7ff ffbb 	bl	8000278 <flash_write>
	for (i = 0; i < size/4; ++i)
 8000302:	3004      	adds	r0, #4
 8000304:	42a8      	cmp	r0, r5
 8000306:	d1f8      	bne.n	80002fa <flash_write_block+0x36>
    }

	flash_lock();
 8000308:	f7ff ffae 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800030c:	b662      	cpsie	i
	__enable_irq();
	return 1;
}
 800030e:	bd38      	pop	{r3, r4, r5, pc}
 8000310:	08005908 	.word	0x08005908
 8000314:	20000878 	.word	0x20000878
 8000318:	08005910 	.word	0x08005910
 800031c:	08005917 	.word	0x08005917
 8000320:	0801e400 	.word	0x0801e400
 8000324:	0801e59c 	.word	0x0801e59c

08000328 <flash_read_block>:

	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
	uint32_t *dest_adr = (void *)&LoggingData;

	for (i=0; i < size/4; ++i)
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <flash_read_block+0x18>)
{
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <flash_read_block+0x1c>)
	for (i=0; i < size/4; ++i)
 800032c:	4906      	ldr	r1, [pc, #24]	; (8000348 <flash_read_block+0x20>)
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 800032e:	f853 0b04 	ldr.w	r0, [r3], #4
	for (i=0; i < size/4; ++i)
 8000332:	428b      	cmp	r3, r1
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000334:	f842 0b04 	str.w	r0, [r2], #4
	for (i=0; i < size/4; ++i)
 8000338:	d1f9      	bne.n	800032e <flash_read_block+0x6>
	}

	return 1;

}
 800033a:	2001      	movs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	20000878 	.word	0x20000878
 8000344:	0801e400 	.word	0x0801e400
 8000348:	0801e59c 	.word	0x0801e59c

0800034c <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 800034e:	6804      	ldr	r4, [r0, #0]
{
 8000350:	4607      	mov	r7, r0
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000352:	428c      	cmp	r4, r1
{
 8000354:	460d      	mov	r5, r1
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000356:	d301      	bcc.n	800035c <flash_read+0x10>
 8000358:	4294      	cmp	r4, r2
 800035a:	d91b      	bls.n	8000394 <flash_read+0x48>
	{
		return EEpromValue;
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 800035c:	2600      	movs	r6, #0
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <flash_read+0x4c>)
		logDebugD("Fail to read address: ",address,0);
 8000360:	480e      	ldr	r0, [pc, #56]	; (800039c <flash_read+0x50>)
		EEpromReadStatus = 0;
 8000362:	701e      	strb	r6, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000364:	f004 ff70 	bl	8005248 <printToBufferWithoutEndUART1>
 8000368:	4632      	mov	r2, r6
 800036a:	4639      	mov	r1, r7
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <flash_read+0x54>)
 800036e:	f004 ffa9 	bl	80052c4 <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 8000372:	480a      	ldr	r0, [pc, #40]	; (800039c <flash_read+0x50>)
 8000374:	f004 ff68 	bl	8005248 <printToBufferWithoutEndUART1>
 8000378:	4621      	mov	r1, r4
 800037a:	4632      	mov	r2, r6
 800037c:	4809      	ldr	r0, [pc, #36]	; (80003a4 <flash_read+0x58>)
 800037e:	f004 ffa1 	bl	80052c4 <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 8000382:	4806      	ldr	r0, [pc, #24]	; (800039c <flash_read+0x50>)
 8000384:	f004 ff60 	bl	8005248 <printToBufferWithoutEndUART1>
 8000388:	4632      	mov	r2, r6
 800038a:	4907      	ldr	r1, [pc, #28]	; (80003a8 <flash_read+0x5c>)
 800038c:	4807      	ldr	r0, [pc, #28]	; (80003ac <flash_read+0x60>)
 800038e:	f004 ff99 	bl	80052c4 <printToBufferUART1D>
		return MinValue;
 8000392:	462c      	mov	r4, r5
	}
}
 8000394:	4620      	mov	r0, r4
 8000396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000398:	20000000 	.word	0x20000000
 800039c:	08005908 	.word	0x08005908
 80003a0:	0800591d 	.word	0x0800591d
 80003a4:	08005934 	.word	0x08005934
 80003a8:	0801ec00 	.word	0x0801ec00
 80003ac:	08005946 	.word	0x08005946

080003b0 <CalibrationWriteToFlash>:
	__enable_irq();

}

uint8_t CalibrationWriteToFlash(void)
{
 80003b0:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationData.CRC_AddresInEEprom);
 80003b2:	4c19      	ldr	r4, [pc, #100]	; (8000418 <CalibrationWriteToFlash+0x68>)
 80003b4:	6860      	ldr	r0, [r4, #4]
 80003b6:	f7ff ff2b 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationData.CRC_AddresInEEprom, CalibrationData.CRC_data);
 80003ba:	e9d4 1000 	ldrd	r1, r0, [r4]
 80003be:	f7ff ff5b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent);
 80003c2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80003c6:	f7ff ff57 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent1);
 80003ca:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80003ce:	f7ff ff53 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent_AddresInEEprom, CalibrationData.CalibrationValueForCurrent_x50);
 80003d2:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 80003d6:	f7ff ff4f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent1_AddresInEEprom, CalibrationData.CalibrationValueForCurrent_x1);
 80003da:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80003de:	f7ff ff4b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage_AddresInEEprom, CalibrationData.CalibrationValueForVoltage);
 80003e2:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 80003e6:	f7ff ff47 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage1_AddresInEEprom, CalibrationData.CalibrationValueForU_OUT);
 80003ea:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 80003ee:	f7ff ff43 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage2_AddresInEEprom, CalibrationData.CalibrationValueForU_IN);
 80003f2:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 80003f6:	f7ff ff3f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationData.ResistanceComp_Ishunt_Wires);
 80003fa:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 80003fe:	f7ff ff3b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_MOSFET_AddresInEEprom, CalibrationData.ResistanceComp_MOSFET);
 8000402:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 8000406:	f7ff ff37 	bl	8000278 <flash_write>
	logDebug("CalibrationWriteToFlash ");
 800040a:	4804      	ldr	r0, [pc, #16]	; (800041c <CalibrationWriteToFlash+0x6c>)
 800040c:	f004 ff1c 	bl	8005248 <printToBufferWithoutEndUART1>
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <CalibrationWriteToFlash+0x70>)
 8000412:	f004 feb3 	bl	800517c <printToBufferUART1>

}
 8000416:	bd10      	pop	{r4, pc}
 8000418:	20000004 	.word	0x20000004
 800041c:	08005908 	.word	0x08005908
 8000420:	0800595d 	.word	0x0800595d

08000424 <CalibrationFactoryWriteToFlash>:
uint8_t CalibrationFactoryWriteToFlash(void)
{
 8000424:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationDataFactory.CRC_AddresInEEprom);
 8000426:	4c19      	ldr	r4, [pc, #100]	; (800048c <CalibrationFactoryWriteToFlash+0x68>)
 8000428:	6860      	ldr	r0, [r4, #4]
 800042a:	f7ff fef1 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationDataFactory.CRC_AddresInEEprom, CalibrationDataFactory.CRC_data);
 800042e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000432:	f7ff ff21 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent);
 8000436:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800043a:	f7ff ff1d 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent1);
 800043e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000442:	f7ff ff19 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent_x50);
 8000446:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800044a:	f7ff ff15 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent_x1);
 800044e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000452:	f7ff ff11 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage);
 8000456:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 800045a:	f7ff ff0d 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForU_OUT);
 800045e:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 8000462:	f7ff ff09 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage2_AddresInEEprom, CalibrationDataFactory.CalibrationValueForU_IN);
 8000466:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800046a:	f7ff ff05 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationDataFactory.ResistanceComp_Ishunt_Wires);
 800046e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 8000472:	f7ff ff01 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_MOSFET_AddresInEEprom, CalibrationDataFactory.ResistanceComp_MOSFET);
 8000476:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 800047a:	f7ff fefd 	bl	8000278 <flash_write>
	logDebug("CalibrationFactoryWriteToFlash ");
 800047e:	4804      	ldr	r0, [pc, #16]	; (8000490 <CalibrationFactoryWriteToFlash+0x6c>)
 8000480:	f004 fee2 	bl	8005248 <printToBufferWithoutEndUART1>
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <CalibrationFactoryWriteToFlash+0x70>)
 8000486:	f004 fe79 	bl	800517c <printToBufferUART1>
}
 800048a:	bd10      	pop	{r4, pc}
 800048c:	20000054 	.word	0x20000054
 8000490:	08005908 	.word	0x08005908
 8000494:	08005976 	.word	0x08005976

08000498 <CalibrationReadFromFlash>:
uint8_t CalibrationReadFromFlash(void)
{
 8000498:	b538      	push	{r3, r4, r5, lr}
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 800049a:	4c25      	ldr	r4, [pc, #148]	; (8000530 <CalibrationReadFromFlash+0x98>)
 800049c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a0:	2100      	movs	r1, #0
 80004a2:	6860      	ldr	r0, [r4, #4]
 80004a4:	f7ff ff52 	bl	800034c <flash_read>
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004ac:	6020      	str	r0, [r4, #0]
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004ae:	2100      	movs	r1, #0
 80004b0:	68e0      	ldr	r0, [r4, #12]
 80004b2:	f7ff ff4b 	bl	800034c <flash_read>
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004ba:	60a0      	str	r0, [r4, #8]
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004bc:	2100      	movs	r1, #0
 80004be:	6960      	ldr	r0, [r4, #20]
 80004c0:	f7ff ff44 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004c4:	4d1b      	ldr	r5, [pc, #108]	; (8000534 <CalibrationReadFromFlash+0x9c>)
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004c6:	6120      	str	r0, [r4, #16]
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004c8:	462a      	mov	r2, r5
 80004ca:	210a      	movs	r1, #10
 80004cc:	69e0      	ldr	r0, [r4, #28]
 80004ce:	f7ff ff3d 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004d2:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004d4:	61a0      	str	r0, [r4, #24]
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004d6:	210a      	movs	r1, #10
 80004d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80004da:	f7ff ff37 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004de:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004e0:	6220      	str	r0, [r4, #32]
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004e2:	210a      	movs	r1, #10
 80004e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004e6:	f7ff ff31 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004ea:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004ec:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004ee:	210a      	movs	r1, #10
 80004f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80004f2:	f7ff ff2b 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForU_IN = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80004f6:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004f8:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationData.CalibrationValueForU_IN = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80004fa:	210a      	movs	r1, #10
 80004fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80004fe:	f7ff ff25 	bl	800034c <flash_read>
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 8000502:	f44f 7296 	mov.w	r2, #300	; 0x12c
	CalibrationData.CalibrationValueForU_IN = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 8000506:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 8000508:	2146      	movs	r1, #70	; 0x46
 800050a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800050c:	f7ff ff1e 	bl	800034c <flash_read>
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,300);
 8000510:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000514:	210a      	movs	r1, #10
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 8000516:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,300);
 8000518:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800051a:	f7ff ff17 	bl	800034c <flash_read>
 800051e:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <CalibrationReadFromFlash+0xa0>)
 8000522:	f004 fe91 	bl	8005248 <printToBufferWithoutEndUART1>
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <CalibrationReadFromFlash+0xa4>)
 8000528:	f004 fe28 	bl	800517c <printToBufferUART1>
}
 800052c:	bd38      	pop	{r3, r4, r5, pc}
 800052e:	bf00      	nop
 8000530:	20000004 	.word	0x20000004
 8000534:	000186a0 	.word	0x000186a0
 8000538:	08005908 	.word	0x08005908
 800053c:	08005996 	.word	0x08005996

08000540 <CalibrationReadFromFlashForVerify>:
uint8_t CalibrationReadFromFlashForVerify(void)
{
 8000540:	b538      	push	{r3, r4, r5, lr}
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 8000542:	4c25      	ldr	r4, [pc, #148]	; (80005d8 <CalibrationReadFromFlashForVerify+0x98>)
 8000544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000548:	2100      	movs	r1, #0
 800054a:	6860      	ldr	r0, [r4, #4]
 800054c:	f7ff fefe 	bl	800034c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 8000550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 8000554:	6020      	str	r0, [r4, #0]
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 8000556:	2100      	movs	r1, #0
 8000558:	68e0      	ldr	r0, [r4, #12]
 800055a:	f7ff fef7 	bl	800034c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800055e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 8000562:	60a0      	str	r0, [r4, #8]
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 8000564:	2100      	movs	r1, #0
 8000566:	6960      	ldr	r0, [r4, #20]
 8000568:	f7ff fef0 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 800056c:	4d1b      	ldr	r5, [pc, #108]	; (80005dc <CalibrationReadFromFlashForVerify+0x9c>)
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800056e:	6120      	str	r0, [r4, #16]
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000570:	462a      	mov	r2, r5
 8000572:	210a      	movs	r1, #10
 8000574:	69e0      	ldr	r0, [r4, #28]
 8000576:	f7ff fee9 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 800057a:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 800057c:	61a0      	str	r0, [r4, #24]
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 800057e:	210a      	movs	r1, #10
 8000580:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000582:	f7ff fee3 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000586:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000588:	6220      	str	r0, [r4, #32]
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 800058a:	210a      	movs	r1, #10
 800058c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800058e:	f7ff fedd 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 8000592:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000594:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 8000596:	210a      	movs	r1, #10
 8000598:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800059a:	f7ff fed7 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForU_IN = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 800059e:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80005a0:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationDataForVerify.CalibrationValueForU_IN = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005a2:	210a      	movs	r1, #10
 80005a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80005a6:	f7ff fed1 	bl	800034c <flash_read>
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 80005aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
	CalibrationDataForVerify.CalibrationValueForU_IN = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005ae:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 80005b0:	2146      	movs	r1, #70	; 0x46
 80005b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005b4:	f7ff feca 	bl	800034c <flash_read>
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,300);
 80005b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005bc:	210a      	movs	r1, #10
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,300);
 80005be:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,300);
 80005c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80005c2:	f7ff fec3 	bl	800034c <flash_read>
 80005c6:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlashForVerify ");
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <CalibrationReadFromFlashForVerify+0xa0>)
 80005ca:	f004 fe3d 	bl	8005248 <printToBufferWithoutEndUART1>
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <CalibrationReadFromFlashForVerify+0xa4>)
 80005d0:	f004 fdd4 	bl	800517c <printToBufferUART1>
}
 80005d4:	bd38      	pop	{r3, r4, r5, pc}
 80005d6:	bf00      	nop
 80005d8:	200000a4 	.word	0x200000a4
 80005dc:	000186a0 	.word	0x000186a0
 80005e0:	08005908 	.word	0x08005908
 80005e4:	080059b0 	.word	0x080059b0

080005e8 <SettingsWriteToFlash>:
//==============
uint8_t SettingsWriteToFlash(void)
{
 80005e8:	b510      	push	{r4, lr}
	flash_erase_page( SettingsData.CRC_AddresInEEprom);
 80005ea:	4c17      	ldr	r4, [pc, #92]	; (8000648 <SettingsWriteToFlash+0x60>)
 80005ec:	6860      	ldr	r0, [r4, #4]
 80005ee:	f7ff fe0f 	bl	8000210 <flash_erase_page>
	flash_write( SettingsData.CRC_AddresInEEprom, SettingsData.CRC_data);
 80005f2:	e9d4 1000 	ldrd	r1, r0, [r4]
 80005f6:	f7ff fe3f 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option1_AddresInEEprom, SettingsData.Option1);
 80005fa:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80005fe:	f7ff fe3b 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeTime_AddresInEEprom, SettingsData.ChargeTime);
 8000602:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000606:	f7ff fe37 	bl	8000278 <flash_write>
	flash_write( SettingsData.LowVoltage_AddresInEEprom, SettingsData.LowVoltage);
 800060a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800060e:	f7ff fe33 	bl	8000278 <flash_write>
	flash_write( SettingsData.MaxVoltage_AddresInEEprom, SettingsData.MaxVoltage);
 8000612:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000616:	f7ff fe2f 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_Chrg_time_AddresInEEprom, SettingsData.Swing_Chrg_time);
 800061a:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 800061e:	f7ff fe2b 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_DChrg_time_AddresInEEprom, SettingsData.Swing_DChrg_time);
 8000622:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 8000626:	f7ff fe27 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeAdapt_AddresInEEprom, SettingsData.ChargeAdapt);
 800062a:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800062e:	f7ff fe23 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option2_AddresInEEprom, SettingsData.Option2);
 8000632:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 8000636:	f7ff fe1f 	bl	8000278 <flash_write>
	logDebug("SettingsWriteToFlash ");
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <SettingsWriteToFlash+0x64>)
 800063c:	f004 fe04 	bl	8005248 <printToBufferWithoutEndUART1>
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <SettingsWriteToFlash+0x68>)
 8000642:	f004 fd9b 	bl	800517c <printToBufferUART1>
}
 8000646:	bd10      	pop	{r4, pc}
 8000648:	20000154 	.word	0x20000154
 800064c:	08005908 	.word	0x08005908
 8000650:	080059d3 	.word	0x080059d3

08000654 <SettingsFactoryWriteToFlash>:
uint8_t SettingsFactoryWriteToFlash(void)
{
 8000654:	b510      	push	{r4, lr}
	flash_erase_page( SettingsDataFactory.CRC_AddresInEEprom);
 8000656:	4c17      	ldr	r4, [pc, #92]	; (80006b4 <SettingsFactoryWriteToFlash+0x60>)
 8000658:	6860      	ldr	r0, [r4, #4]
 800065a:	f7ff fdd9 	bl	8000210 <flash_erase_page>
	flash_write( SettingsDataFactory.CRC_AddresInEEprom, SettingsDataFactory.CRC_data);
 800065e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000662:	f7ff fe09 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option1_AddresInEEprom, SettingsDataFactory.Option1);
 8000666:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800066a:	f7ff fe05 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeTime_AddresInEEprom, SettingsDataFactory.ChargeTime);
 800066e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000672:	f7ff fe01 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.LowVoltage_AddresInEEprom, SettingsDataFactory.LowVoltage);
 8000676:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800067a:	f7ff fdfd 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.MaxVoltage_AddresInEEprom, SettingsDataFactory.MaxVoltage);
 800067e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000682:	f7ff fdf9 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_Chrg_time_AddresInEEprom, SettingsDataFactory.Swing_Chrg_time);
 8000686:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 800068a:	f7ff fdf5 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_DChrg_time_AddresInEEprom, SettingsDataFactory.Swing_DChrg_time);
 800068e:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 8000692:	f7ff fdf1 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
 8000696:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800069a:	f7ff fded 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
 800069e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 80006a2:	f7ff fde9 	bl	8000278 <flash_write>
	logDebug("SettingsFactoryWriteToFlash ");
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <SettingsFactoryWriteToFlash+0x64>)
 80006a8:	f004 fdce 	bl	8005248 <printToBufferWithoutEndUART1>
 80006ac:	4803      	ldr	r0, [pc, #12]	; (80006bc <SettingsFactoryWriteToFlash+0x68>)
 80006ae:	f004 fd65 	bl	800517c <printToBufferUART1>
}
 80006b2:	bd10      	pop	{r4, pc}
 80006b4:	2000019c 	.word	0x2000019c
 80006b8:	08005908 	.word	0x08005908
 80006bc:	080059e9 	.word	0x080059e9

080006c0 <SettingsReadFromFlash>:
uint8_t SettingsReadFromFlash(void)
{
 80006c0:	b510      	push	{r4, lr}
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006c2:	4c22      	ldr	r4, [pc, #136]	; (800074c <SettingsReadFromFlash+0x8c>)
 80006c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c8:	2100      	movs	r1, #0
 80006ca:	6860      	ldr	r0, [r4, #4]
 80006cc:	f7ff fe3e 	bl	800034c <flash_read>
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006d0:	220a      	movs	r2, #10
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006d2:	6020      	str	r0, [r4, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006d4:	2101      	movs	r1, #1
 80006d6:	68e0      	ldr	r0, [r4, #12]
 80006d8:	f7ff fe38 	bl	800034c <flash_read>
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006e0:	60a0      	str	r0, [r4, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006e2:	2101      	movs	r1, #1
 80006e4:	6960      	ldr	r0, [r4, #20]
 80006e6:	f7ff fe31 	bl	800034c <flash_read>
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006ea:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006ee:	6120      	str	r0, [r4, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006f0:	2101      	movs	r1, #1
 80006f2:	69e0      	ldr	r0, [r4, #28]
 80006f4:	f7ff fe2a 	bl	800034c <flash_read>
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 80006f8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006fc:	61a0      	str	r0, [r4, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 80006fe:	2101      	movs	r1, #1
 8000700:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000702:	f7ff fe23 	bl	800034c <flash_read>
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000706:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 800070a:	6220      	str	r0, [r4, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 800070c:	2100      	movs	r1, #0
 800070e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000710:	f7ff fe1c 	bl	800034c <flash_read>
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000714:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000718:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800071a:	2100      	movs	r1, #0
 800071c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800071e:	f7ff fe15 	bl	800034c <flash_read>
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000722:	2264      	movs	r2, #100	; 0x64
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000724:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000726:	2100      	movs	r1, #0
 8000728:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800072a:	f7ff fe0f 	bl	800034c <flash_read>
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 800072e:	2203      	movs	r2, #3
 8000730:	2101      	movs	r1, #1
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000732:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000734:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000736:	f7ff fe09 	bl	800034c <flash_read>
 800073a:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <SettingsReadFromFlash+0x90>)
 800073e:	f004 fd83 	bl	8005248 <printToBufferWithoutEndUART1>
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <SettingsReadFromFlash+0x94>)
 8000744:	f004 fd1a 	bl	800517c <printToBufferUART1>
}
 8000748:	bd10      	pop	{r4, pc}
 800074a:	bf00      	nop
 800074c:	20000154 	.word	0x20000154
 8000750:	08005908 	.word	0x08005908
 8000754:	08005a06 	.word	0x08005a06

08000758 <SettingsReadFromFlashForVerify>:
uint8_t SettingsReadFromFlashForVerify(void)
{
 8000758:	b510      	push	{r4, lr}
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 800075a:	4c22      	ldr	r4, [pc, #136]	; (80007e4 <SettingsReadFromFlashForVerify+0x8c>)
 800075c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000760:	2100      	movs	r1, #0
 8000762:	6860      	ldr	r0, [r4, #4]
 8000764:	f7ff fdf2 	bl	800034c <flash_read>
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000768:	220a      	movs	r2, #10
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 800076a:	6020      	str	r0, [r4, #0]
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 800076c:	2101      	movs	r1, #1
 800076e:	68e0      	ldr	r0, [r4, #12]
 8000770:	f7ff fdec 	bl	800034c <flash_read>
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000778:	60a0      	str	r0, [r4, #8]
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800077a:	2101      	movs	r1, #1
 800077c:	6960      	ldr	r0, [r4, #20]
 800077e:	f7ff fde5 	bl	800034c <flash_read>
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000782:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000786:	6120      	str	r0, [r4, #16]
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000788:	2101      	movs	r1, #1
 800078a:	69e0      	ldr	r0, [r4, #28]
 800078c:	f7ff fdde 	bl	800034c <flash_read>
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 8000790:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000794:	61a0      	str	r0, [r4, #24]
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 8000796:	2101      	movs	r1, #1
 8000798:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800079a:	f7ff fdd7 	bl	800034c <flash_read>
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 800079e:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 80007a2:	6220      	str	r0, [r4, #32]
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007a4:	2100      	movs	r1, #0
 80007a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80007a8:	f7ff fdd0 	bl	800034c <flash_read>
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007ac:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007b0:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007b2:	2100      	movs	r1, #0
 80007b4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80007b6:	f7ff fdc9 	bl	800034c <flash_read>
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007ba:	2264      	movs	r2, #100	; 0x64
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007bc:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007be:	2100      	movs	r1, #0
 80007c0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007c2:	f7ff fdc3 	bl	800034c <flash_read>
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007c6:	2203      	movs	r2, #3
 80007c8:	2101      	movs	r1, #1
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007ca:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80007ce:	f7ff fdbd 	bl	800034c <flash_read>
 80007d2:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlashForVerify ");
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <SettingsReadFromFlashForVerify+0x90>)
 80007d6:	f004 fd37 	bl	8005248 <printToBufferWithoutEndUART1>
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <SettingsReadFromFlashForVerify+0x94>)
 80007dc:	f004 fcce 	bl	800517c <printToBufferUART1>
}
 80007e0:	bd10      	pop	{r4, pc}
 80007e2:	bf00      	nop
 80007e4:	200001e4 	.word	0x200001e4
 80007e8:	08005908 	.word	0x08005908
 80007ec:	08005a1d 	.word	0x08005a1d

080007f0 <DataWhenPowerOff_Factory_WriteToFlash>:
	flash_write( SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent);
	flash_write( SaveDataWhenPowerOff.OutState_AddresInEEprom, SaveDataWhenPowerOff.OutState);
	logDebug("DataWhenPowerOffWriteToFlash ");
}
uint8_t DataWhenPowerOff_Factory_WriteToFlash(void)
{
 80007f0:	b510      	push	{r4, lr}
	flash_erase_page( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom);
 80007f2:	4c0d      	ldr	r4, [pc, #52]	; (8000828 <DataWhenPowerOff_Factory_WriteToFlash+0x38>)
 80007f4:	6860      	ldr	r0, [r4, #4]
 80007f6:	f7ff fd0b 	bl	8000210 <flash_erase_page>
	flash_write( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom, SaveDataWhenPowerOffFactory.CRC_data);
 80007fa:	e9d4 1000 	ldrd	r1, r0, [r4]
 80007fe:	f7ff fd3b 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargePrevious_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargePreviousValue);
 8000802:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000806:	f7ff fd37 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent);
 800080a:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800080e:	f7ff fd33 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
 8000812:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000816:	f7ff fd2f 	bl	8000278 <flash_write>
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <DataWhenPowerOff_Factory_WriteToFlash+0x3c>)
 800081c:	f004 fd14 	bl	8005248 <printToBufferWithoutEndUART1>
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <DataWhenPowerOff_Factory_WriteToFlash+0x40>)
 8000822:	f004 fcab 	bl	800517c <printToBufferUART1>
}
 8000826:	bd10      	pop	{r4, pc}
 8000828:	20000114 	.word	0x20000114
 800082c:	08005908 	.word	0x08005908
 8000830:	08005a3d 	.word	0x08005a3d

08000834 <DataWhenPowerOffReadFromFlash>:
uint8_t DataWhenPowerOffReadFromFlash(void)
{
 8000834:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 8000836:	4c11      	ldr	r4, [pc, #68]	; (800087c <DataWhenPowerOffReadFromFlash+0x48>)
 8000838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083c:	2100      	movs	r1, #0
 800083e:	6860      	ldr	r0, [r4, #4]
 8000840:	f7ff fd84 	bl	800034c <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000844:	4d0e      	ldr	r5, [pc, #56]	; (8000880 <DataWhenPowerOffReadFromFlash+0x4c>)
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 8000846:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000848:	462a      	mov	r2, r5
 800084a:	2100      	movs	r1, #0
 800084c:	68e0      	ldr	r0, [r4, #12]
 800084e:	f7ff fd7d 	bl	800034c <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 8000852:	462a      	mov	r2, r5
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000854:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 8000856:	2100      	movs	r1, #0
 8000858:	6960      	ldr	r0, [r4, #20]
 800085a:	f7ff fd77 	bl	800034c <flash_read>
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 800085e:	2201      	movs	r2, #1
 8000860:	2100      	movs	r1, #0
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 8000862:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 8000864:	69e0      	ldr	r0, [r4, #28]
 8000866:	f7ff fd71 	bl	800034c <flash_read>
 800086a:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <DataWhenPowerOffReadFromFlash+0x50>)
 800086e:	f004 fceb 	bl	8005248 <printToBufferWithoutEndUART1>
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <DataWhenPowerOffReadFromFlash+0x54>)
 8000874:	f004 fc82 	bl	800517c <printToBufferUART1>
}
 8000878:	bd38      	pop	{r3, r4, r5, pc}
 800087a:	bf00      	nop
 800087c:	200000f4 	.word	0x200000f4
 8000880:	ee6b2800 	.word	0xee6b2800
 8000884:	08005908 	.word	0x08005908
 8000888:	08005a64 	.word	0x08005a64

0800088c <DataWhenPowerOffReadFromFlashForVerify>:
uint8_t DataWhenPowerOffReadFromFlashForVerify(void)
{
 800088c:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 800088e:	4c11      	ldr	r4, [pc, #68]	; (80008d4 <DataWhenPowerOffReadFromFlashForVerify+0x48>)
 8000890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000894:	2100      	movs	r1, #0
 8000896:	6860      	ldr	r0, [r4, #4]
 8000898:	f7ff fd58 	bl	800034c <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 800089c:	4d0e      	ldr	r5, [pc, #56]	; (80008d8 <DataWhenPowerOffReadFromFlashForVerify+0x4c>)
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 800089e:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008a0:	462a      	mov	r2, r5
 80008a2:	2100      	movs	r1, #0
 80008a4:	68e0      	ldr	r0, [r4, #12]
 80008a6:	f7ff fd51 	bl	800034c <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008aa:	462a      	mov	r2, r5
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008ac:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008ae:	2100      	movs	r1, #0
 80008b0:	6960      	ldr	r0, [r4, #20]
 80008b2:	f7ff fd4b 	bl	800034c <flash_read>
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2100      	movs	r1, #0
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008ba:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 80008bc:	69e0      	ldr	r0, [r4, #28]
 80008be:	f7ff fd45 	bl	800034c <flash_read>
 80008c2:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlashForVerify ");
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <DataWhenPowerOffReadFromFlashForVerify+0x50>)
 80008c6:	f004 fcbf 	bl	8005248 <printToBufferWithoutEndUART1>
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <DataWhenPowerOffReadFromFlashForVerify+0x54>)
 80008cc:	f004 fc56 	bl	800517c <printToBufferUART1>
}
 80008d0:	bd38      	pop	{r3, r4, r5, pc}
 80008d2:	bf00      	nop
 80008d4:	20000134 	.word	0x20000134
 80008d8:	ee6b2800 	.word	0xee6b2800
 80008dc:	08005908 	.word	0x08005908
 80008e0:	08005a83 	.word	0x08005a83

080008e4 <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 80008e4:	b570      	push	{r4, r5, r6, lr}
		EEpromReadStatus = 1;
 80008e6:	2401      	movs	r4, #1
 80008e8:	4d0e      	ldr	r5, [pc, #56]	; (8000924 <ReadFromFlash+0x40>)
 80008ea:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
	    __disable_irq();

	    DataWhenPowerOffReadFromFlash();
 80008ee:	f7ff ffa1 	bl	8000834 <DataWhenPowerOffReadFromFlash>
	    SettingsReadFromFlash();
 80008f2:	f7ff fee5 	bl	80006c0 <SettingsReadFromFlash>
	    CalibrationReadFromFlash();
 80008f6:	f7ff fdcf 	bl	8000498 <CalibrationReadFromFlash>
  __ASM volatile ("cpsie i" : : : "memory");
 80008fa:	b662      	cpsie	i


		__enable_irq();
		if (EEpromReadStatus == 0)
 80008fc:	782e      	ldrb	r6, [r5, #0]
		{
			logDebug("Read from EEprom - FAIL ");
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <ReadFromFlash+0x44>)
		if (EEpromReadStatus == 0)
 8000900:	b93e      	cbnz	r6, 8000912 <ReadFromFlash+0x2e>
			logDebug("Read from EEprom - FAIL ");
 8000902:	f004 fca1 	bl	8005248 <printToBufferWithoutEndUART1>
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <ReadFromFlash+0x48>)
 8000908:	f004 fc38 	bl	800517c <printToBufferUART1>
			EEpromReadStatus = 1;
 800090c:	702c      	strb	r4, [r5, #0]
		{
			logDebug("Read from EEprom - SUCCESS");
			EEpromReadStatus = 1;
			return 1;
		}
}
 800090e:	4630      	mov	r0, r6
 8000910:	bd70      	pop	{r4, r5, r6, pc}
			logDebug("Read from EEprom - SUCCESS");
 8000912:	f004 fc99 	bl	8005248 <printToBufferWithoutEndUART1>
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <ReadFromFlash+0x4c>)
 8000918:	f004 fc30 	bl	800517c <printToBufferUART1>
			return 1;
 800091c:	4626      	mov	r6, r4
			EEpromReadStatus = 1;
 800091e:	702c      	strb	r4, [r5, #0]
			return 1;
 8000920:	e7f5      	b.n	800090e <ReadFromFlash+0x2a>
 8000922:	bf00      	nop
 8000924:	20000000 	.word	0x20000000
 8000928:	08005908 	.word	0x08005908
 800092c:	08005aab 	.word	0x08005aab
 8000930:	08005ac4 	.word	0x08005ac4

08000934 <CalcCRC8>:



char CalcCRC8(char *Ptr, char Num, char CRC1)
{
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	4614      	mov	r4, r2
 8000938:	b0c0      	sub	sp, #256	; 0x100
 800093a:	4606      	mov	r6, r0
 800093c:	460d      	mov	r5, r1
   const char CrcTable[256] = {
 800093e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000942:	4668      	mov	r0, sp
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <CalcCRC8+0x30>)
 8000946:	f004 ff3d 	bl	80057c4 <memcpy>
 800094a:	4620      	mov	r0, r4
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 800094c:	f816 2b01 	ldrb.w	r2, [r6], #1
 8000950:	3d01      	subs	r5, #1
 8000952:	4042      	eors	r2, r0
 8000954:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8000958:	f81d 0002 	ldrb.w	r0, [sp, r2]
 800095c:	d1f6      	bne.n	800094c <CalcCRC8+0x18>
  return CRC1;
}
 800095e:	b040      	add	sp, #256	; 0x100
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	bf00      	nop
 8000964:	08005808 	.word	0x08005808

08000968 <CalibrationWriteToFlash_CRC>:
{
 8000968:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800096a:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationData)+4,((unsigned char)sizeof(CalibrationData))-4,0);
 800096c:	4d14      	ldr	r5, [pc, #80]	; (80009c0 <CalibrationWriteToFlash_CRC+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	214c      	movs	r1, #76	; 0x4c
 8000972:	4628      	mov	r0, r5
 8000974:	f7ff ffde 	bl	8000934 <CalcCRC8>
 8000978:	4604      	mov	r4, r0
	CalibrationData.CRC_data = CRC_Calibration;
 800097a:	f845 0c04 	str.w	r0, [r5, #-4]
	flash_unlock();
 800097e:	f7ff fc67 	bl	8000250 <flash_unlock>
	CalibrationWriteToFlash();
 8000982:	f7ff fd15 	bl	80003b0 <CalibrationWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000986:	f7ff fddb 	bl	8000540 <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 800098a:	2200      	movs	r2, #0
 800098c:	214c      	movs	r1, #76	; 0x4c
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <CalibrationWriteToFlash_CRC+0x5c>)
 8000990:	f7ff ffd0 	bl	8000934 <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000994:	4284      	cmp	r4, r0
		logDebug("Calibration write to Flash success ");
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <CalibrationWriteToFlash_CRC+0x60>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000998:	d109      	bne.n	80009ae <CalibrationWriteToFlash_CRC+0x46>
		logDebug("Calibration write to Flash success ");
 800099a:	f004 fc55 	bl	8005248 <printToBufferWithoutEndUART1>
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <CalibrationWriteToFlash_CRC+0x64>)
 80009a0:	f004 fbec 	bl	800517c <printToBufferUART1>
	flash_lock();
 80009a4:	f7ff fc60 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80009a8:	b662      	cpsie	i
}
 80009aa:	2001      	movs	r0, #1
 80009ac:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Calibration write to Flash Fail, try again... ");
 80009ae:	f004 fc4b 	bl	8005248 <printToBufferWithoutEndUART1>
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <CalibrationWriteToFlash_CRC+0x68>)
 80009b4:	f004 fbe2 	bl	800517c <printToBufferUART1>
		CalibrationWriteToFlash();
 80009b8:	f7ff fcfa 	bl	80003b0 <CalibrationWriteToFlash>
 80009bc:	e7f2      	b.n	80009a4 <CalibrationWriteToFlash_CRC+0x3c>
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	200000a8 	.word	0x200000a8
 80009c8:	08005908 	.word	0x08005908
 80009cc:	08005af8 	.word	0x08005af8
 80009d0:	08005b1d 	.word	0x08005b1d

080009d4 <SettingsWriteToFlash_CRC>:
{
 80009d4:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80009d6:	b672      	cpsid	i
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsData)+4,((unsigned char)sizeof(SettingsData))-4,0);
 80009d8:	4d24      	ldr	r5, [pc, #144]	; (8000a6c <SettingsWriteToFlash_CRC+0x98>)
 80009da:	2200      	movs	r2, #0
 80009dc:	2144      	movs	r1, #68	; 0x44
 80009de:	4628      	mov	r0, r5
 80009e0:	f7ff ffa8 	bl	8000934 <CalcCRC8>
 80009e4:	4604      	mov	r4, r0
	logDebugD("CRC is : ",CRC_Settings,0);
 80009e6:	4822      	ldr	r0, [pc, #136]	; (8000a70 <SettingsWriteToFlash_CRC+0x9c>)
 80009e8:	f004 fc2e 	bl	8005248 <printToBufferWithoutEndUART1>
 80009ec:	2200      	movs	r2, #0
 80009ee:	4621      	mov	r1, r4
 80009f0:	4820      	ldr	r0, [pc, #128]	; (8000a74 <SettingsWriteToFlash_CRC+0xa0>)
 80009f2:	f004 fc67 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsData))-4,0);
 80009f6:	481e      	ldr	r0, [pc, #120]	; (8000a70 <SettingsWriteToFlash_CRC+0x9c>)
 80009f8:	f004 fc26 	bl	8005248 <printToBufferWithoutEndUART1>
 80009fc:	2200      	movs	r2, #0
 80009fe:	2144      	movs	r1, #68	; 0x44
 8000a00:	481d      	ldr	r0, [pc, #116]	; (8000a78 <SettingsWriteToFlash_CRC+0xa4>)
 8000a02:	f004 fc5f 	bl	80052c4 <printToBufferUART1D>
	SettingsData.CRC_data = CRC_Settings;
 8000a06:	f845 4c04 	str.w	r4, [r5, #-4]
	flash_unlock();
 8000a0a:	f7ff fc21 	bl	8000250 <flash_unlock>
	SettingsWriteToFlash();
 8000a0e:	f7ff fdeb 	bl	80005e8 <SettingsWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000a12:	f7ff fea1 	bl	8000758 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2144      	movs	r1, #68	; 0x44
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <SettingsWriteToFlash_CRC+0xa8>)
 8000a1c:	f7ff ff8a 	bl	8000934 <CalcCRC8>
 8000a20:	4605      	mov	r5, r0
	logDebugD("CRC is : ",CRC_SettingsVerify,0);
 8000a22:	4813      	ldr	r0, [pc, #76]	; (8000a70 <SettingsWriteToFlash_CRC+0x9c>)
 8000a24:	f004 fc10 	bl	8005248 <printToBufferWithoutEndUART1>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4629      	mov	r1, r5
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <SettingsWriteToFlash_CRC+0xa0>)
 8000a2e:	f004 fc49 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a32:	480f      	ldr	r0, [pc, #60]	; (8000a70 <SettingsWriteToFlash_CRC+0x9c>)
 8000a34:	f004 fc08 	bl	8005248 <printToBufferWithoutEndUART1>
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <SettingsWriteToFlash_CRC+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2144      	movs	r1, #68	; 0x44
 8000a3e:	f004 fc41 	bl	80052c4 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000a42:	42ac      	cmp	r4, r5
		logDebug("Settings write to Flash success ");
 8000a44:	480a      	ldr	r0, [pc, #40]	; (8000a70 <SettingsWriteToFlash_CRC+0x9c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000a46:	d109      	bne.n	8000a5c <SettingsWriteToFlash_CRC+0x88>
		logDebug("Settings write to Flash success ");
 8000a48:	f004 fbfe 	bl	8005248 <printToBufferWithoutEndUART1>
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <SettingsWriteToFlash_CRC+0xac>)
 8000a4e:	f004 fb95 	bl	800517c <printToBufferUART1>
	flash_lock();
 8000a52:	f7ff fc09 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a56:	b662      	cpsie	i
}
 8000a58:	2001      	movs	r0, #1
 8000a5a:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Settings write to Flash Fail, try again... ");
 8000a5c:	f004 fbf4 	bl	8005248 <printToBufferWithoutEndUART1>
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <SettingsWriteToFlash_CRC+0xb0>)
 8000a62:	f004 fb8b 	bl	800517c <printToBufferUART1>
		SettingsWriteToFlash();
 8000a66:	f7ff fdbf 	bl	80005e8 <SettingsWriteToFlash>
 8000a6a:	e7f2      	b.n	8000a52 <SettingsWriteToFlash_CRC+0x7e>
 8000a6c:	20000158 	.word	0x20000158
 8000a70:	08005908 	.word	0x08005908
 8000a74:	08005b4d 	.word	0x08005b4d
 8000a78:	08005b58 	.word	0x08005b58
 8000a7c:	200001e8 	.word	0x200001e8
 8000a80:	08005b64 	.word	0x08005b64
 8000a84:	08005b86 	.word	0x08005b86

08000a88 <FactoryWriteToFlash_CRC>:
{
 8000a88:	b538      	push	{r3, r4, r5, lr}
	logDebug("FactoryWriteToFlash_CRC");
 8000a8a:	484a      	ldr	r0, [pc, #296]	; (8000bb4 <FactoryWriteToFlash_CRC+0x12c>)
 8000a8c:	f004 fbdc 	bl	8005248 <printToBufferWithoutEndUART1>
 8000a90:	4849      	ldr	r0, [pc, #292]	; (8000bb8 <FactoryWriteToFlash_CRC+0x130>)
 8000a92:	f004 fb73 	bl	800517c <printToBufferUART1>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a96:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000a98:	4d48      	ldr	r5, [pc, #288]	; (8000bbc <FactoryWriteToFlash_CRC+0x134>)
	flash_unlock();
 8000a9a:	f7ff fbd9 	bl	8000250 <flash_unlock>
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	214c      	movs	r1, #76	; 0x4c
 8000aa2:	4628      	mov	r0, r5
 8000aa4:	f7ff ff46 	bl	8000934 <CalcCRC8>
 8000aa8:	4604      	mov	r4, r0
	CalibrationDataFactory.CRC_data = CRC_Calibration;
 8000aaa:	f845 0c04 	str.w	r0, [r5, #-4]
	CalibrationFactoryWriteToFlash();
 8000aae:	f7ff fcb9 	bl	8000424 <CalibrationFactoryWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000ab2:	f7ff fd45 	bl	8000540 <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	214c      	movs	r1, #76	; 0x4c
 8000aba:	4841      	ldr	r0, [pc, #260]	; (8000bc0 <FactoryWriteToFlash_CRC+0x138>)
 8000abc:	f7ff ff3a 	bl	8000934 <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000ac0:	4284      	cmp	r4, r0
		logDebug("FCalibration write to Flash success ");
 8000ac2:	483c      	ldr	r0, [pc, #240]	; (8000bb4 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000ac4:	d15d      	bne.n	8000b82 <FactoryWriteToFlash_CRC+0xfa>
		logDebug("FCalibration write to Flash success ");
 8000ac6:	f004 fbbf 	bl	8005248 <printToBufferWithoutEndUART1>
 8000aca:	483e      	ldr	r0, [pc, #248]	; (8000bc4 <FactoryWriteToFlash_CRC+0x13c>)
 8000acc:	f004 fb56 	bl	800517c <printToBufferUART1>
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsDataFactory)+4,((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000ad0:	4d3d      	ldr	r5, [pc, #244]	; (8000bc8 <FactoryWriteToFlash_CRC+0x140>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2144      	movs	r1, #68	; 0x44
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	f7ff ff2c 	bl	8000934 <CalcCRC8>
 8000adc:	4604      	mov	r4, r0
	logDebugD("FCRC is : ",CRC_Settings,0);
 8000ade:	4835      	ldr	r0, [pc, #212]	; (8000bb4 <FactoryWriteToFlash_CRC+0x12c>)
 8000ae0:	f004 fbb2 	bl	8005248 <printToBufferWithoutEndUART1>
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	4621      	mov	r1, r4
 8000ae8:	4838      	ldr	r0, [pc, #224]	; (8000bcc <FactoryWriteToFlash_CRC+0x144>)
 8000aea:	f004 fbeb 	bl	80052c4 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000aee:	4831      	ldr	r0, [pc, #196]	; (8000bb4 <FactoryWriteToFlash_CRC+0x12c>)
 8000af0:	f004 fbaa 	bl	8005248 <printToBufferWithoutEndUART1>
 8000af4:	2200      	movs	r2, #0
 8000af6:	2144      	movs	r1, #68	; 0x44
 8000af8:	4835      	ldr	r0, [pc, #212]	; (8000bd0 <FactoryWriteToFlash_CRC+0x148>)
 8000afa:	f004 fbe3 	bl	80052c4 <printToBufferUART1D>
	SettingsDataFactory.CRC_data = CRC_Settings;
 8000afe:	f845 4c04 	str.w	r4, [r5, #-4]
	SettingsFactoryWriteToFlash();
 8000b02:	f7ff fda7 	bl	8000654 <SettingsFactoryWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000b06:	f7ff fe27 	bl	8000758 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2144      	movs	r1, #68	; 0x44
 8000b0e:	4831      	ldr	r0, [pc, #196]	; (8000bd4 <FactoryWriteToFlash_CRC+0x14c>)
 8000b10:	f7ff ff10 	bl	8000934 <CalcCRC8>
 8000b14:	4605      	mov	r5, r0
	logDebugD("FCRC is : ",CRC_SettingsVerify,0);
 8000b16:	4827      	ldr	r0, [pc, #156]	; (8000bb4 <FactoryWriteToFlash_CRC+0x12c>)
 8000b18:	f004 fb96 	bl	8005248 <printToBufferWithoutEndUART1>
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	4629      	mov	r1, r5
 8000b20:	482a      	ldr	r0, [pc, #168]	; (8000bcc <FactoryWriteToFlash_CRC+0x144>)
 8000b22:	f004 fbcf 	bl	80052c4 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000b26:	4823      	ldr	r0, [pc, #140]	; (8000bb4 <FactoryWriteToFlash_CRC+0x12c>)
 8000b28:	f004 fb8e 	bl	8005248 <printToBufferWithoutEndUART1>
 8000b2c:	4828      	ldr	r0, [pc, #160]	; (8000bd0 <FactoryWriteToFlash_CRC+0x148>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2144      	movs	r1, #68	; 0x44
 8000b32:	f004 fbc7 	bl	80052c4 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000b36:	42ac      	cmp	r4, r5
		logDebug("FSettings write to Flash success ");
 8000b38:	481e      	ldr	r0, [pc, #120]	; (8000bb4 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000b3a:	d12a      	bne.n	8000b92 <FactoryWriteToFlash_CRC+0x10a>
		logDebug("FSettings write to Flash success ");
 8000b3c:	f004 fb84 	bl	8005248 <printToBufferWithoutEndUART1>
 8000b40:	4825      	ldr	r0, [pc, #148]	; (8000bd8 <FactoryWriteToFlash_CRC+0x150>)
 8000b42:	f004 fb1b 	bl	800517c <printToBufferUART1>
	CRC_DataWhenPowerOff = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffFactory)+4,((unsigned char)sizeof(SaveDataWhenPowerOffFactory))-4,0);
 8000b46:	4d25      	ldr	r5, [pc, #148]	; (8000bdc <FactoryWriteToFlash_CRC+0x154>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	211c      	movs	r1, #28
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f7ff fef1 	bl	8000934 <CalcCRC8>
 8000b52:	4604      	mov	r4, r0
	SaveDataWhenPowerOffFactory.CRC_data = CRC_DataWhenPowerOff;
 8000b54:	f845 0c04 	str.w	r0, [r5, #-4]
	DataWhenPowerOff_Factory_WriteToFlash();
 8000b58:	f7ff fe4a 	bl	80007f0 <DataWhenPowerOff_Factory_WriteToFlash>
	DataWhenPowerOffReadFromFlashForVerify();
 8000b5c:	f7ff fe96 	bl	800088c <DataWhenPowerOffReadFromFlashForVerify>
	CRC_DataWhenPowerOffVerify = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffForVerify)+4,((unsigned char)sizeof(SaveDataWhenPowerOffForVerify))-4,0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	211c      	movs	r1, #28
 8000b64:	481e      	ldr	r0, [pc, #120]	; (8000be0 <FactoryWriteToFlash_CRC+0x158>)
 8000b66:	f7ff fee5 	bl	8000934 <CalcCRC8>
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b6a:	4284      	cmp	r4, r0
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b6e:	d118      	bne.n	8000ba2 <FactoryWriteToFlash_CRC+0x11a>
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000b70:	f004 fb6a 	bl	8005248 <printToBufferWithoutEndUART1>
 8000b74:	481b      	ldr	r0, [pc, #108]	; (8000be4 <FactoryWriteToFlash_CRC+0x15c>)
 8000b76:	f004 fb01 	bl	800517c <printToBufferUART1>
	flash_lock();
 8000b7a:	f7ff fb75 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b7e:	b662      	cpsie	i
}
 8000b80:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("FCalibration write to Flash Fail, try again... ");
 8000b82:	f004 fb61 	bl	8005248 <printToBufferWithoutEndUART1>
 8000b86:	4818      	ldr	r0, [pc, #96]	; (8000be8 <FactoryWriteToFlash_CRC+0x160>)
 8000b88:	f004 faf8 	bl	800517c <printToBufferUART1>
		CalibrationFactoryWriteToFlash();
 8000b8c:	f7ff fc4a 	bl	8000424 <CalibrationFactoryWriteToFlash>
 8000b90:	e79e      	b.n	8000ad0 <FactoryWriteToFlash_CRC+0x48>
		logDebug("FSettings write to Flash Fail, try again... ");
 8000b92:	f004 fb59 	bl	8005248 <printToBufferWithoutEndUART1>
 8000b96:	4815      	ldr	r0, [pc, #84]	; (8000bec <FactoryWriteToFlash_CRC+0x164>)
 8000b98:	f004 faf0 	bl	800517c <printToBufferUART1>
		SettingsFactoryWriteToFlash();
 8000b9c:	f7ff fd5a 	bl	8000654 <SettingsFactoryWriteToFlash>
 8000ba0:	e7d1      	b.n	8000b46 <FactoryWriteToFlash_CRC+0xbe>
		logDebug("FDataWhenPowerOff write to Flash Fail, try again... ");
 8000ba2:	f004 fb51 	bl	8005248 <printToBufferWithoutEndUART1>
 8000ba6:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <FactoryWriteToFlash_CRC+0x168>)
 8000ba8:	f004 fae8 	bl	800517c <printToBufferUART1>
		DataWhenPowerOff_Factory_WriteToFlash();
 8000bac:	f7ff fe20 	bl	80007f0 <DataWhenPowerOff_Factory_WriteToFlash>
 8000bb0:	e7e3      	b.n	8000b7a <FactoryWriteToFlash_CRC+0xf2>
 8000bb2:	bf00      	nop
 8000bb4:	08005908 	.word	0x08005908
 8000bb8:	08005adf 	.word	0x08005adf
 8000bbc:	20000058 	.word	0x20000058
 8000bc0:	200000a8 	.word	0x200000a8
 8000bc4:	08005af7 	.word	0x08005af7
 8000bc8:	200001a0 	.word	0x200001a0
 8000bcc:	08005b4c 	.word	0x08005b4c
 8000bd0:	08005b57 	.word	0x08005b57
 8000bd4:	200001e8 	.word	0x200001e8
 8000bd8:	08005b63 	.word	0x08005b63
 8000bdc:	20000118 	.word	0x20000118
 8000be0:	20000138 	.word	0x20000138
 8000be4:	08005bb2 	.word	0x08005bb2
 8000be8:	08005b1c 	.word	0x08005b1c
 8000bec:	08005b85 	.word	0x08005b85
 8000bf0:	08005bdc 	.word	0x08005bdc

08000bf4 <Generation_Coefficients_R_A_B>:
		{150,500}
};
void Generation_Coefficients_R_A_B()
{
	int8_t i;
	for (i=0;i<(TLT-1);i++)
 8000bf4:	4917      	ldr	r1, [pc, #92]	; (8000c54 <Generation_Coefficients_R_A_B+0x60>)
 8000bf6:	4818      	ldr	r0, [pc, #96]	; (8000c58 <Generation_Coefficients_R_A_B+0x64>)
{
 8000bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		Temp_R_A_B[i].R = T_Table[i].R;
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000bfc:	f242 7c10 	movw	ip, #10000	; 0x2710
{
 8000c00:	2400      	movs	r4, #0
 8000c02:	460e      	mov	r6, r1
 8000c04:	4605      	mov	r5, r0
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c06:	4f15      	ldr	r7, [pc, #84]	; (8000c5c <Generation_Coefficients_R_A_B+0x68>)
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c08:	f9b1 e000 	ldrsh.w	lr, [r1]
 8000c0c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
		Temp_R_A_B[i].R = T_Table[i].R;
 8000c10:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c14:	eba2 020e 	sub.w	r2, r2, lr
 8000c18:	fb0c f202 	mul.w	r2, ip, r2
 8000c1c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8000c20:	3401      	adds	r4, #1
 8000c22:	eba3 0308 	sub.w	r3, r3, r8
 8000c26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c2a:	6043      	str	r3, [r0, #4]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c2c:	fb03 f308 	mul.w	r3, r3, r8
 8000c30:	fb93 f3f7 	sdiv	r3, r3, r7
	for (i=0;i<(TLT-1);i++)
 8000c34:	2c07      	cmp	r4, #7
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c36:	4473      	add	r3, lr
		Temp_R_A_B[i].R = T_Table[i].R;
 8000c38:	f8c0 8000 	str.w	r8, [r0]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c3c:	6083      	str	r3, [r0, #8]
	for (i=0;i<(TLT-1);i++)
 8000c3e:	f101 0104 	add.w	r1, r1, #4
 8000c42:	f100 000c 	add.w	r0, r0, #12
 8000c46:	d1df      	bne.n	8000c08 <Generation_Coefficients_R_A_B+0x14>
	}
	Temp_R_A_B[i].R = T_Table[i].R;
 8000c48:	f9b6 301e 	ldrsh.w	r3, [r6, #30]
 8000c4c:	656b      	str	r3, [r5, #84]	; 0x54
	    c=(Temp_R_A_B[i].R-Temp_R_A_B[i+1].R)/2+Temp_R_A_B[i+1].R;
	    Print_to_USART1_d(c,"c= ",0);
	    Print_to_USART1_d(Temp_R_A_B[i].A10000*c/10000+Temp_R_A_B[i].B,"T:",0);
	}
*/
}
 8000c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c52:	bf00      	nop
 8000c54:	2000022c 	.word	0x2000022c
 8000c58:	200007f4 	.word	0x200007f4
 8000c5c:	ffffd8f0 	.word	0xffffd8f0

08000c60 <GetTemperature>:
int32_t GetTemperature(int32_t Rtemp)
{
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <GetTemperature+0x48>)
{
 8000c62:	b510      	push	{r4, lr}
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	4282      	cmp	r2, r0
 8000c68:	db1a      	blt.n	8000ca0 <GetTemperature+0x40>
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	2200      	movs	r2, #0

	int8_t i;
	for (i=0; i<(TLT-1);i++)
	{
		if (Rtemp <= Temp_R_A_B[i].R  && Rtemp > Temp_R_A_B[i+1].R)
 8000c6e:	680c      	ldr	r4, [r1, #0]
 8000c70:	4284      	cmp	r4, r0
 8000c72:	db0e      	blt.n	8000c92 <GetTemperature+0x32>
 8000c74:	68cc      	ldr	r4, [r1, #12]
 8000c76:	4284      	cmp	r4, r0
 8000c78:	da0b      	bge.n	8000c92 <GetTemperature+0x32>
		{
			return Rtemp*Temp_R_A_B[i].A10000/10000+Temp_R_A_B[i].B;
 8000c7a:	210c      	movs	r1, #12
 8000c7c:	fb01 3202 	mla	r2, r1, r2, r3
 8000c80:	6853      	ldr	r3, [r2, #4]
 8000c82:	4358      	muls	r0, r3
 8000c84:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c88:	fb90 f0f3 	sdiv	r0, r0, r3
 8000c8c:	6893      	ldr	r3, [r2, #8]
 8000c8e:	4418      	add	r0, r3

		}
	}
	return 200;
}
 8000c90:	bd10      	pop	{r4, pc}
	for (i=0; i<(TLT-1);i++)
 8000c92:	3201      	adds	r2, #1
 8000c94:	2a07      	cmp	r2, #7
 8000c96:	f101 010c 	add.w	r1, r1, #12
 8000c9a:	d1e8      	bne.n	8000c6e <GetTemperature+0xe>
	return 200;
 8000c9c:	20c8      	movs	r0, #200	; 0xc8
 8000c9e:	e7f7      	b.n	8000c90 <GetTemperature+0x30>
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000ca0:	f06f 0009 	mvn.w	r0, #9
 8000ca4:	e7f4      	b.n	8000c90 <GetTemperature+0x30>
 8000ca6:	bf00      	nop
 8000ca8:	200007f4 	.word	0x200007f4

08000cac <WriteInLOG>:

void WriteInLOG(char  str [17])
{
 8000cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000cb0:	4c5d      	ldr	r4, [pc, #372]	; (8000e28 <WriteInLOG+0x17c>)
{
 8000cb2:	4606      	mov	r6, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000cb4:	6820      	ldr	r0, [r4, #0]
 8000cb6:	f000 fadb 	bl	8001270 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000cba:	2200      	movs	r2, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000cbc:	6827      	ldr	r7, [r4, #0]
 8000cbe:	eb07 1307 	add.w	r3, r7, r7, lsl #4
 8000cc2:	0139      	lsls	r1, r7, #4
 8000cc4:	4423      	add	r3, r4
	for(i=0;number[i]!='\0';i++)
 8000cc6:	f810 c002 	ldrb.w	ip, [r0, r2]
 8000cca:	4615      	mov	r5, r2
 8000ccc:	3201      	adds	r2, #1
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	f1bc 0f00 	cmp.w	ip, #0
 8000cd4:	d11b      	bne.n	8000d0e <WriteInLOG+0x62>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000cd6:	19cb      	adds	r3, r1, r7
 8000cd8:	18e0      	adds	r0, r4, r3
 8000cda:	4405      	add	r5, r0
 8000cdc:	203a      	movs	r0, #58	; 0x3a
 8000cde:	3304      	adds	r3, #4
 8000ce0:	7128      	strb	r0, [r5, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000ce2:	eb04 0c03 	add.w	ip, r4, r3
 8000ce6:	1e70      	subs	r0, r6, #1
 8000ce8:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8000cec:	b2d5      	uxtb	r5, r2
 8000cee:	b996      	cbnz	r6, 8000d16 <WriteInLOG+0x6a>
 8000cf0:	462a      	mov	r2, r5
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	442b      	add	r3, r5
 8000cf6:	4423      	add	r3, r4
	for (;i<16;i++)
 8000cf8:	2a0f      	cmp	r2, #15
 8000cfa:	d975      	bls.n	8000de8 <WriteInLOG+0x13c>
 8000cfc:	2d10      	cmp	r5, #16
 8000cfe:	f1c5 0110 	rsb	r1, r5, #16
 8000d02:	bf88      	it	hi
 8000d04:	2100      	movhi	r1, #0
 8000d06:	440d      	add	r5, r1
 8000d08:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8000d0c:	e00e      	b.n	8000d2c <WriteInLOG+0x80>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000d0e:	441d      	add	r5, r3
 8000d10:	f885 c004 	strb.w	ip, [r5, #4]
	for(i=0;number[i]!='\0';i++)
 8000d14:	e7d7      	b.n	8000cc6 <WriteInLOG+0x1a>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000d16:	2d0f      	cmp	r5, #15
 8000d18:	d803      	bhi.n	8000d22 <WriteInLOG+0x76>
 8000d1a:	f80c 6002 	strb.w	r6, [ip, r2]
	for(j=0;str[j]!='\0';i++,j++)
 8000d1e:	3201      	adds	r2, #1
 8000d20:	e7e2      	b.n	8000ce8 <WriteInLOG+0x3c>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d22:	2300      	movs	r3, #0
 8000d24:	4439      	add	r1, r7
 8000d26:	4421      	add	r1, r4
 8000d28:	440a      	add	r2, r1
 8000d2a:	7113      	strb	r3, [r2, #4]
	}
	logDebugD("ii: ",i,0);
 8000d2c:	483f      	ldr	r0, [pc, #252]	; (8000e2c <WriteInLOG+0x180>)
 8000d2e:	f004 fa8b 	bl	8005248 <printToBufferWithoutEndUART1>
 8000d32:	4629      	mov	r1, r5
 8000d34:	2200      	movs	r2, #0
 8000d36:	483e      	ldr	r0, [pc, #248]	; (8000e30 <WriteInLOG+0x184>)
 8000d38:	f004 fac4 	bl	80052c4 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8000d42:	4421      	add	r1, r4
 8000d44:	4429      	add	r1, r5
 8000d46:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000d48:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000d4a:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d4c:	710d      	strb	r5, [r1, #4]
	LoggingData.RecordsQuantity++;
 8000d4e:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000d50:	d93e      	bls.n	8000dd0 <WriteInLOG+0x124>
 8000d52:	260a      	movs	r6, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000d54:	462f      	mov	r7, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000d56:	f04f 0820 	mov.w	r8, #32
			number = itoa(i);
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	f000 fa88 	bl	8001270 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000d60:	2300      	movs	r3, #0
				LoggingData.Records[i][k] = number[k];
 8000d62:	eb05 1105 	add.w	r1, r5, r5, lsl #4
 8000d66:	012a      	lsls	r2, r5, #4
 8000d68:	4421      	add	r1, r4
			for(k=0;number[k]!='\0';k++)
 8000d6a:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000d6e:	469c      	mov	ip, r3
 8000d70:	3301      	adds	r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	f1be 0f00 	cmp.w	lr, #0
 8000d78:	d13b      	bne.n	8000df2 <WriteInLOG+0x146>
			LoggingData.Records[i][k] = ':';
 8000d7a:	203a      	movs	r0, #58	; 0x3a
 8000d7c:	1951      	adds	r1, r2, r5
 8000d7e:	4421      	add	r1, r4
 8000d80:	448c      	add	ip, r1
 8000d82:	f88c 0004 	strb.w	r0, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000d86:	eb06 1006 	add.w	r0, r6, r6, lsl #4
 8000d8a:	4420      	add	r0, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000d8c:	eb01 0c03 	add.w	ip, r1, r3
 8000d90:	f89c c004 	ldrb.w	ip, [ip, #4]
 8000d94:	f1bc 0f00 	cmp.w	ip, #0
 8000d98:	d12f      	bne.n	8000dfa <WriteInLOG+0x14e>
			j--;
 8000d9a:	1e58      	subs	r0, r3, #1
 8000d9c:	b2c0      	uxtb	r0, r0
 8000d9e:	4684      	mov	ip, r0
 8000da0:	1951      	adds	r1, r2, r5
 8000da2:	3104      	adds	r1, #4
 8000da4:	4401      	add	r1, r0
 8000da6:	4421      	add	r1, r4
			for (;j<16;j++)
 8000da8:	f1bc 0f0f 	cmp.w	ip, #15
 8000dac:	d934      	bls.n	8000e18 <WriteInLOG+0x16c>
			}
			LoggingData.Records[i][j] = '\0';
 8000dae:	2810      	cmp	r0, #16
 8000db0:	f1c3 0311 	rsb	r3, r3, #17
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	bf88      	it	hi
 8000db8:	2300      	movhi	r3, #0
 8000dba:	442a      	add	r2, r5
 8000dbc:	4422      	add	r2, r4
 8000dbe:	4402      	add	r2, r0
 8000dc0:	3501      	adds	r5, #1
 8000dc2:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000dc4:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000dc6:	711f      	strb	r7, [r3, #4]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000dc8:	f106 0601 	add.w	r6, r6, #1
 8000dcc:	d1c5      	bne.n	8000d5a <WriteInLOG+0xae>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000dce:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8000dd0:	f7ff fa78 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <WriteInLOG+0x180>)
 8000dd6:	f004 fa37 	bl	8005248 <printToBufferWithoutEndUART1>
 8000dda:	6821      	ldr	r1, [r4, #0]
 8000ddc:	2200      	movs	r2, #0
}
 8000dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000de2:	4814      	ldr	r0, [pc, #80]	; (8000e34 <WriteInLOG+0x188>)
 8000de4:	f004 ba6e 	b.w	80052c4 <printToBufferUART1D>
	for (;i<16;i++)
 8000de8:	3201      	adds	r2, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000dea:	f803 1b01 	strb.w	r1, [r3], #1
	for (;i<16;i++)
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	e782      	b.n	8000cf8 <WriteInLOG+0x4c>
				LoggingData.Records[i][k] = number[k];
 8000df2:	448c      	add	ip, r1
 8000df4:	f88c e004 	strb.w	lr, [ip, #4]
			for(k=0;number[k]!='\0';k++)
 8000df8:	e7b7      	b.n	8000d6a <WriteInLOG+0xbe>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000dfa:	eb00 0c03 	add.w	ip, r0, r3
				if (i>=10)
 8000dfe:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000e00:	bf8c      	ite	hi
 8000e02:	f89c c004 	ldrbhi.w	ip, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000e06:	f89c c005 	ldrbls.w	ip, [ip, #5]
 8000e0a:	eb01 0e03 	add.w	lr, r1, r3
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000e0e:	3301      	adds	r3, #1
 8000e10:	f88e c004 	strb.w	ip, [lr, #4]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	e7b9      	b.n	8000d8c <WriteInLOG+0xe0>
			for (;j<16;j++)
 8000e18:	f10c 0c01 	add.w	ip, ip, #1
				LoggingData.Records[i][j] = ' ';
 8000e1c:	f801 8b01 	strb.w	r8, [r1], #1
			for (;j<16;j++)
 8000e20:	fa5f fc8c 	uxtb.w	ip, ip
 8000e24:	e7c0      	b.n	8000da8 <WriteInLOG+0xfc>
 8000e26:	bf00      	nop
 8000e28:	20000878 	.word	0x20000878
 8000e2c:	08005908 	.word	0x08005908
 8000e30:	08005c11 	.word	0x08005c11
 8000e34:	08005c16 	.word	0x08005c16

08000e38 <WriteInLOGc>:

void WriteInLOGc(char  str [17],char c)
{
 8000e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000e3c:	4c5e      	ldr	r4, [pc, #376]	; (8000fb8 <WriteInLOGc+0x180>)
{
 8000e3e:	4680      	mov	r8, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000e40:	6820      	ldr	r0, [r4, #0]
{
 8000e42:	460e      	mov	r6, r1
	number = itoa(LoggingData.RecordsQuantity);
 8000e44:	f000 fa14 	bl	8001270 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000e48:	2200      	movs	r2, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000e4a:	6827      	ldr	r7, [r4, #0]
 8000e4c:	eb07 1307 	add.w	r3, r7, r7, lsl #4
 8000e50:	0139      	lsls	r1, r7, #4
 8000e52:	4423      	add	r3, r4
	for(i=0;number[i]!='\0';i++)
 8000e54:	f810 c002 	ldrb.w	ip, [r0, r2]
 8000e58:	4615      	mov	r5, r2
 8000e5a:	3201      	adds	r2, #1
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	f1bc 0f00 	cmp.w	ip, #0
 8000e62:	d11d      	bne.n	8000ea0 <WriteInLOGc+0x68>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = c;
 8000e64:	19cb      	adds	r3, r1, r7
 8000e66:	18e0      	adds	r0, r4, r3
 8000e68:	4405      	add	r5, r0
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	712e      	strb	r6, [r5, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000e6e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e72:	eb04 0e03 	add.w	lr, r4, r3
 8000e76:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8000e7a:	b2d5      	uxtb	r5, r2
 8000e7c:	f1bc 0f00 	cmp.w	ip, #0
 8000e80:	d112      	bne.n	8000ea8 <WriteInLOGc+0x70>
 8000e82:	462a      	mov	r2, r5
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000e84:	2120      	movs	r1, #32
 8000e86:	442b      	add	r3, r5
 8000e88:	4423      	add	r3, r4
	for (;i<16;i++)
 8000e8a:	2a0f      	cmp	r2, #15
 8000e8c:	d975      	bls.n	8000f7a <WriteInLOGc+0x142>
 8000e8e:	2d10      	cmp	r5, #16
 8000e90:	f1c5 0110 	rsb	r1, r5, #16
 8000e94:	bf88      	it	hi
 8000e96:	2100      	movhi	r1, #0
 8000e98:	440d      	add	r5, r1
 8000e9a:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8000e9e:	e00e      	b.n	8000ebe <WriteInLOGc+0x86>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000ea0:	441d      	add	r5, r3
 8000ea2:	f885 c004 	strb.w	ip, [r5, #4]
	for(i=0;number[i]!='\0';i++)
 8000ea6:	e7d5      	b.n	8000e54 <WriteInLOGc+0x1c>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000ea8:	2d0f      	cmp	r5, #15
 8000eaa:	d803      	bhi.n	8000eb4 <WriteInLOGc+0x7c>
 8000eac:	f80e c002 	strb.w	ip, [lr, r2]
	for(j=0;str[j]!='\0';i++,j++)
 8000eb0:	3201      	adds	r2, #1
 8000eb2:	e7e0      	b.n	8000e76 <WriteInLOGc+0x3e>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	4439      	add	r1, r7
 8000eb8:	4421      	add	r1, r4
 8000eba:	440a      	add	r2, r1
 8000ebc:	7113      	strb	r3, [r2, #4]
	}
	logDebugD("ii: ",i,0);
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <WriteInLOGc+0x184>)
 8000ec0:	f004 f9c2 	bl	8005248 <printToBufferWithoutEndUART1>
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	483d      	ldr	r0, [pc, #244]	; (8000fc0 <WriteInLOGc+0x188>)
 8000eca:	f004 f9fb 	bl	80052c4 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8000ed4:	4421      	add	r1, r4
 8000ed6:	4429      	add	r1, r5
 8000ed8:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000eda:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000edc:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000ede:	710d      	strb	r5, [r1, #4]
	LoggingData.RecordsQuantity++;
 8000ee0:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000ee2:	d93e      	bls.n	8000f62 <WriteInLOGc+0x12a>
 8000ee4:	270a      	movs	r7, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000ee6:	46a8      	mov	r8, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000ee8:	f04f 0920 	mov.w	r9, #32
			number = itoa(i);
 8000eec:	4628      	mov	r0, r5
 8000eee:	f000 f9bf 	bl	8001270 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000ef2:	2300      	movs	r3, #0
				LoggingData.Records[i][k] = number[k];
 8000ef4:	eb05 1105 	add.w	r1, r5, r5, lsl #4
 8000ef8:	012a      	lsls	r2, r5, #4
 8000efa:	4421      	add	r1, r4
			for(k=0;number[k]!='\0';k++)
 8000efc:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000f00:	469c      	mov	ip, r3
 8000f02:	3301      	adds	r3, #1
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f1be 0f00 	cmp.w	lr, #0
 8000f0a:	d13b      	bne.n	8000f84 <WriteInLOGc+0x14c>
			LoggingData.Records[i][k] = c;
 8000f0c:	1951      	adds	r1, r2, r5
 8000f0e:	4421      	add	r1, r4
 8000f10:	448c      	add	ip, r1
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f12:	eb07 1007 	add.w	r0, r7, r7, lsl #4
			LoggingData.Records[i][k] = c;
 8000f16:	f88c 6004 	strb.w	r6, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f1a:	4420      	add	r0, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000f1c:	eb01 0c03 	add.w	ip, r1, r3
 8000f20:	f89c c004 	ldrb.w	ip, [ip, #4]
 8000f24:	f1bc 0f00 	cmp.w	ip, #0
 8000f28:	d130      	bne.n	8000f8c <WriteInLOGc+0x154>
			j--;
 8000f2a:	1e58      	subs	r0, r3, #1
 8000f2c:	b2c0      	uxtb	r0, r0
 8000f2e:	4684      	mov	ip, r0
 8000f30:	1951      	adds	r1, r2, r5
 8000f32:	3104      	adds	r1, #4
 8000f34:	4401      	add	r1, r0
 8000f36:	4421      	add	r1, r4
			for (;j<16;j++)
 8000f38:	f1bc 0f0f 	cmp.w	ip, #15
 8000f3c:	d935      	bls.n	8000faa <WriteInLOGc+0x172>
			}
			LoggingData.Records[i][j] = '\0';
 8000f3e:	2810      	cmp	r0, #16
 8000f40:	f1c3 0311 	rsb	r3, r3, #17
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	bf88      	it	hi
 8000f48:	2300      	movhi	r3, #0
 8000f4a:	442a      	add	r2, r5
 8000f4c:	4422      	add	r2, r4
 8000f4e:	4402      	add	r2, r0
 8000f50:	3501      	adds	r5, #1
 8000f52:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000f54:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000f56:	f883 8004 	strb.w	r8, [r3, #4]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000f5a:	f107 0701 	add.w	r7, r7, #1
 8000f5e:	d1c5      	bne.n	8000eec <WriteInLOGc+0xb4>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000f60:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8000f62:	f7ff f9af 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000f66:	4815      	ldr	r0, [pc, #84]	; (8000fbc <WriteInLOGc+0x184>)
 8000f68:	f004 f96e 	bl	8005248 <printToBufferWithoutEndUART1>
 8000f6c:	6821      	ldr	r1, [r4, #0]
 8000f6e:	2200      	movs	r2, #0
}
 8000f70:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <WriteInLOGc+0x18c>)
 8000f76:	f004 b9a5 	b.w	80052c4 <printToBufferUART1D>
	for (;i<16;i++)
 8000f7a:	3201      	adds	r2, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000f7c:	f803 1b01 	strb.w	r1, [r3], #1
	for (;i<16;i++)
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	e782      	b.n	8000e8a <WriteInLOGc+0x52>
				LoggingData.Records[i][k] = number[k];
 8000f84:	448c      	add	ip, r1
 8000f86:	f88c e004 	strb.w	lr, [ip, #4]
			for(k=0;number[k]!='\0';k++)
 8000f8a:	e7b7      	b.n	8000efc <WriteInLOGc+0xc4>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000f8c:	eb00 0c03 	add.w	ip, r0, r3
				if (i>=10)
 8000f90:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000f92:	bf8c      	ite	hi
 8000f94:	f89c c004 	ldrbhi.w	ip, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f98:	f89c c005 	ldrbls.w	ip, [ip, #5]
 8000f9c:	eb01 0e03 	add.w	lr, r1, r3
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f88e c004 	strb.w	ip, [lr, #4]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	e7b8      	b.n	8000f1c <WriteInLOGc+0xe4>
			for (;j<16;j++)
 8000faa:	f10c 0c01 	add.w	ip, ip, #1
				LoggingData.Records[i][j] = ' ';
 8000fae:	f801 9b01 	strb.w	r9, [r1], #1
			for (;j<16;j++)
 8000fb2:	fa5f fc8c 	uxtb.w	ip, ip
 8000fb6:	e7bf      	b.n	8000f38 <WriteInLOGc+0x100>
 8000fb8:	20000878 	.word	0x20000878
 8000fbc:	08005908 	.word	0x08005908
 8000fc0:	08005c11 	.word	0x08005c11
 8000fc4:	08005c16 	.word	0x08005c16

08000fc8 <delay_us>:
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
	delay_ms(50);
}
void delay_us(uint32_t us)
{
	volatile uint32_t n = 0;
 8000fc8:	2300      	movs	r3, #0
{
 8000fca:	b084      	sub	sp, #16
	if (us==1) n=1;//в тактах процесора
 8000fcc:	2801      	cmp	r0, #1
	volatile uint32_t n = 0;
 8000fce:	9300      	str	r3, [sp, #0]
	if (us==1) n=1;//в тактах процесора
 8000fd0:	d101      	bne.n	8000fd6 <delay_us+0xe>
	if (us==2) n=2;//в тактах процесора
	if (us==3) n=18;//в тактах процесора
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000fd2:	9000      	str	r0, [sp, #0]
 8000fd4:	e004      	b.n	8000fe0 <delay_us+0x18>
	if (us==2) n=2;//в тактах процесора
 8000fd6:	2802      	cmp	r0, #2
 8000fd8:	d0fb      	beq.n	8000fd2 <delay_us+0xa>
	if (us==3) n=18;//в тактах процесора
 8000fda:	2803      	cmp	r0, #3
 8000fdc:	d01a      	beq.n	8001014 <delay_us+0x4c>
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000fde:	d81c      	bhi.n	800101a <delay_us+0x52>
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <delay_us+0x64>)
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	9201      	str	r2, [sp, #4]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 8000fe6:	9a01      	ldr	r2, [sp, #4]
 8000fe8:	9202      	str	r2, [sp, #8]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	9203      	str	r2, [sp, #12]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 8000fee:	9903      	ldr	r1, [sp, #12]
 8000ff0:	9a02      	ldr	r2, [sp, #8]
 8000ff2:	4291      	cmp	r1, r2
 8000ff4:	d304      	bcc.n	8001000 <delay_us+0x38>
            n0+=SysTick->LOAD+1;
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	9901      	ldr	r1, [sp, #4]
 8000ffa:	440a      	add	r2, r1
 8000ffc:	3201      	adds	r2, #1
 8000ffe:	9201      	str	r2, [sp, #4]
        np=nc;
 8001000:	9a03      	ldr	r2, [sp, #12]
 8001002:	9202      	str	r2, [sp, #8]
    }while(n0-nc<n);
 8001004:	9a01      	ldr	r2, [sp, #4]
 8001006:	9803      	ldr	r0, [sp, #12]
 8001008:	9900      	ldr	r1, [sp, #0]
 800100a:	1a12      	subs	r2, r2, r0
 800100c:	428a      	cmp	r2, r1
 800100e:	d3ec      	bcc.n	8000fea <delay_us+0x22>
}
 8001010:	b004      	add	sp, #16
 8001012:	4770      	bx	lr
	if (us==3) n=18;//в тактах процесора
 8001014:	2312      	movs	r3, #18
 8001016:	9300      	str	r3, [sp, #0]
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8001018:	e7e2      	b.n	8000fe0 <delay_us+0x18>
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <delay_us+0x68>)
 800101c:	4a05      	ldr	r2, [pc, #20]	; (8001034 <delay_us+0x6c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3803      	subs	r0, #3
 8001022:	fbb3 f3f2 	udiv	r3, r3, r2
 8001026:	4358      	muls	r0, r3
 8001028:	e7d3      	b.n	8000fd2 <delay_us+0xa>
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010
 8001030:	2000028c 	.word	0x2000028c
 8001034:	000f4240 	.word	0x000f4240

08001038 <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 8001038:	b507      	push	{r0, r1, r2, lr}
 800103a:	9001      	str	r0, [sp, #4]
	while(value>0)
 800103c:	9b01      	ldr	r3, [sp, #4]
 800103e:	b913      	cbnz	r3, 8001046 <delay_ms+0xe>
	{
		delay_us(1000);
		value--;
	}
}
 8001040:	b003      	add	sp, #12
 8001042:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_us(1000);
 8001046:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104a:	f7ff ffbd 	bl	8000fc8 <delay_us>
		value--;
 800104e:	9b01      	ldr	r3, [sp, #4]
 8001050:	3b01      	subs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	e7f2      	b.n	800103c <delay_ms+0x4>
	...

08001058 <InfoToUARTBeforeStart>:
{
 8001058:	b538      	push	{r3, r4, r5, lr}
	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 800105a:	4c68      	ldr	r4, [pc, #416]	; (80011fc <InfoToUARTBeforeStart+0x1a4>)
 800105c:	4d68      	ldr	r5, [pc, #416]	; (8001200 <InfoToUARTBeforeStart+0x1a8>)
 800105e:	4620      	mov	r0, r4
 8001060:	f004 f8f2 	bl	8005248 <printToBufferWithoutEndUART1>
 8001064:	6829      	ldr	r1, [r5, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	4866      	ldr	r0, [pc, #408]	; (8001204 <InfoToUARTBeforeStart+0x1ac>)
 800106a:	f004 f92b 	bl	80052c4 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.Calibration0ValueForCurrent ,0);
 800106e:	4620      	mov	r0, r4
 8001070:	f004 f8ea 	bl	8005248 <printToBufferWithoutEndUART1>
 8001074:	68a9      	ldr	r1, [r5, #8]
 8001076:	2200      	movs	r2, #0
 8001078:	4863      	ldr	r0, [pc, #396]	; (8001208 <InfoToUARTBeforeStart+0x1b0>)
 800107a:	f004 f923 	bl	80052c4 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent1 =",CalibrationData.Calibration0ValueForCurrent1 ,0);
 800107e:	4620      	mov	r0, r4
 8001080:	f004 f8e2 	bl	8005248 <printToBufferWithoutEndUART1>
 8001084:	6929      	ldr	r1, [r5, #16]
 8001086:	2200      	movs	r2, #0
 8001088:	4860      	ldr	r0, [pc, #384]	; (800120c <InfoToUARTBeforeStart+0x1b4>)
 800108a:	f004 f91b 	bl	80052c4 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent =",CalibrationData.CalibrationValueForCurrent_x50 ,0);
 800108e:	4620      	mov	r0, r4
 8001090:	f004 f8da 	bl	8005248 <printToBufferWithoutEndUART1>
 8001094:	69a9      	ldr	r1, [r5, #24]
 8001096:	2200      	movs	r2, #0
 8001098:	485d      	ldr	r0, [pc, #372]	; (8001210 <InfoToUARTBeforeStart+0x1b8>)
 800109a:	f004 f913 	bl	80052c4 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent1 =",CalibrationData.CalibrationValueForCurrent_x1 ,0);
 800109e:	4620      	mov	r0, r4
 80010a0:	f004 f8d2 	bl	8005248 <printToBufferWithoutEndUART1>
 80010a4:	6a29      	ldr	r1, [r5, #32]
 80010a6:	2200      	movs	r2, #0
 80010a8:	485a      	ldr	r0, [pc, #360]	; (8001214 <InfoToUARTBeforeStart+0x1bc>)
 80010aa:	f004 f90b 	bl	80052c4 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage =",CalibrationData.CalibrationValueForVoltage ,0);
 80010ae:	4620      	mov	r0, r4
 80010b0:	f004 f8ca 	bl	8005248 <printToBufferWithoutEndUART1>
 80010b4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	4857      	ldr	r0, [pc, #348]	; (8001218 <InfoToUARTBeforeStart+0x1c0>)
 80010ba:	f004 f903 	bl	80052c4 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage1 =",CalibrationData.CalibrationValueForU_OUT ,0);
 80010be:	4620      	mov	r0, r4
 80010c0:	f004 f8c2 	bl	8005248 <printToBufferWithoutEndUART1>
 80010c4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80010c6:	2200      	movs	r2, #0
 80010c8:	4854      	ldr	r0, [pc, #336]	; (800121c <InfoToUARTBeforeStart+0x1c4>)
 80010ca:	f004 f8fb 	bl	80052c4 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForU_IN,0);
 80010ce:	4620      	mov	r0, r4
 80010d0:	f004 f8ba 	bl	8005248 <printToBufferWithoutEndUART1>
 80010d4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80010d6:	2200      	movs	r2, #0
 80010d8:	4851      	ldr	r0, [pc, #324]	; (8001220 <InfoToUARTBeforeStart+0x1c8>)
 80010da:	f004 f8f3 	bl	80052c4 <printToBufferUART1D>
	logInfoD("ResistanceComp_Ishunt_Wires =",CalibrationData.ResistanceComp_Ishunt_Wires ,0) ;
 80010de:	4620      	mov	r0, r4
 80010e0:	f004 f8b2 	bl	8005248 <printToBufferWithoutEndUART1>
 80010e4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010e6:	2200      	movs	r2, #0
 80010e8:	484e      	ldr	r0, [pc, #312]	; (8001224 <InfoToUARTBeforeStart+0x1cc>)
 80010ea:	f004 f8eb 	bl	80052c4 <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 80010ee:	4620      	mov	r0, r4
 80010f0:	f004 f8aa 	bl	8005248 <printToBufferWithoutEndUART1>
 80010f4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80010f6:	2200      	movs	r2, #0
 80010f8:	484b      	ldr	r0, [pc, #300]	; (8001228 <InfoToUARTBeforeStart+0x1d0>)
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 80010fa:	4d4c      	ldr	r5, [pc, #304]	; (800122c <InfoToUARTBeforeStart+0x1d4>)
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 80010fc:	f004 f8e2 	bl	80052c4 <printToBufferUART1D>
	delay_ms(50);
 8001100:	2032      	movs	r0, #50	; 0x32
 8001102:	f7ff ff99 	bl	8001038 <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 8001106:	4620      	mov	r0, r4
 8001108:	f004 f89e 	bl	8005248 <printToBufferWithoutEndUART1>
 800110c:	6829      	ldr	r1, [r5, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	4847      	ldr	r0, [pc, #284]	; (8001230 <InfoToUARTBeforeStart+0x1d8>)
 8001112:	f004 f8d7 	bl	80052c4 <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 8001116:	4620      	mov	r0, r4
 8001118:	f004 f896 	bl	8005248 <printToBufferWithoutEndUART1>
 800111c:	68a9      	ldr	r1, [r5, #8]
 800111e:	2200      	movs	r2, #0
 8001120:	4844      	ldr	r0, [pc, #272]	; (8001234 <InfoToUARTBeforeStart+0x1dc>)
 8001122:	f004 f8cf 	bl	80052c4 <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 8001126:	4620      	mov	r0, r4
 8001128:	f004 f88e 	bl	8005248 <printToBufferWithoutEndUART1>
 800112c:	6929      	ldr	r1, [r5, #16]
 800112e:	2200      	movs	r2, #0
 8001130:	4841      	ldr	r0, [pc, #260]	; (8001238 <InfoToUARTBeforeStart+0x1e0>)
 8001132:	f004 f8c7 	bl	80052c4 <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 8001136:	4620      	mov	r0, r4
 8001138:	f004 f886 	bl	8005248 <printToBufferWithoutEndUART1>
 800113c:	69a9      	ldr	r1, [r5, #24]
 800113e:	2200      	movs	r2, #0
 8001140:	483e      	ldr	r0, [pc, #248]	; (800123c <InfoToUARTBeforeStart+0x1e4>)
 8001142:	f004 f8bf 	bl	80052c4 <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 8001146:	4620      	mov	r0, r4
 8001148:	f004 f87e 	bl	8005248 <printToBufferWithoutEndUART1>
 800114c:	6a29      	ldr	r1, [r5, #32]
 800114e:	2200      	movs	r2, #0
 8001150:	483b      	ldr	r0, [pc, #236]	; (8001240 <InfoToUARTBeforeStart+0x1e8>)
 8001152:	f004 f8b7 	bl	80052c4 <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 8001156:	4620      	mov	r0, r4
 8001158:	f004 f876 	bl	8005248 <printToBufferWithoutEndUART1>
 800115c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800115e:	2200      	movs	r2, #0
 8001160:	4838      	ldr	r0, [pc, #224]	; (8001244 <InfoToUARTBeforeStart+0x1ec>)
 8001162:	f004 f8af 	bl	80052c4 <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 8001166:	4620      	mov	r0, r4
 8001168:	f004 f86e 	bl	8005248 <printToBufferWithoutEndUART1>
 800116c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800116e:	2200      	movs	r2, #0
 8001170:	4835      	ldr	r0, [pc, #212]	; (8001248 <InfoToUARTBeforeStart+0x1f0>)
 8001172:	f004 f8a7 	bl	80052c4 <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 8001176:	4620      	mov	r0, r4
 8001178:	f004 f866 	bl	8005248 <printToBufferWithoutEndUART1>
 800117c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800117e:	2200      	movs	r2, #0
 8001180:	4832      	ldr	r0, [pc, #200]	; (800124c <InfoToUARTBeforeStart+0x1f4>)
 8001182:	f004 f89f 	bl	80052c4 <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 8001186:	4620      	mov	r0, r4
 8001188:	f004 f85e 	bl	8005248 <printToBufferWithoutEndUART1>
 800118c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800118e:	2200      	movs	r2, #0
 8001190:	482f      	ldr	r0, [pc, #188]	; (8001250 <InfoToUARTBeforeStart+0x1f8>)
 8001192:	f004 f897 	bl	80052c4 <printToBufferUART1D>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 8001196:	4d2f      	ldr	r5, [pc, #188]	; (8001254 <InfoToUARTBeforeStart+0x1fc>)
	delay_ms(50);
 8001198:	2032      	movs	r0, #50	; 0x32
 800119a:	f7ff ff4d 	bl	8001038 <delay_ms>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 800119e:	4620      	mov	r0, r4
 80011a0:	f004 f852 	bl	8005248 <printToBufferWithoutEndUART1>
 80011a4:	6829      	ldr	r1, [r5, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	482b      	ldr	r0, [pc, #172]	; (8001258 <InfoToUARTBeforeStart+0x200>)
 80011aa:	f004 f88b 	bl	80052c4 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue ,0);
 80011ae:	4620      	mov	r0, r4
 80011b0:	f004 f84a 	bl	8005248 <printToBufferWithoutEndUART1>
 80011b4:	68a9      	ldr	r1, [r5, #8]
 80011b6:	2200      	movs	r2, #0
 80011b8:	4828      	ldr	r0, [pc, #160]	; (800125c <InfoToUARTBeforeStart+0x204>)
 80011ba:	f004 f883 	bl	80052c4 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent ,0);
 80011be:	4620      	mov	r0, r4
 80011c0:	f004 f842 	bl	8005248 <printToBufferWithoutEndUART1>
 80011c4:	6929      	ldr	r1, [r5, #16]
 80011c6:	2200      	movs	r2, #0
 80011c8:	4825      	ldr	r0, [pc, #148]	; (8001260 <InfoToUARTBeforeStart+0x208>)
 80011ca:	f004 f87b 	bl	80052c4 <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 80011ce:	4620      	mov	r0, r4
 80011d0:	f004 f83a 	bl	8005248 <printToBufferWithoutEndUART1>
 80011d4:	69a9      	ldr	r1, [r5, #24]
 80011d6:	2200      	movs	r2, #0
 80011d8:	4822      	ldr	r0, [pc, #136]	; (8001264 <InfoToUARTBeforeStart+0x20c>)
 80011da:	f004 f873 	bl	80052c4 <printToBufferUART1D>
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 80011de:	4620      	mov	r0, r4
 80011e0:	f004 f832 	bl	8005248 <printToBufferWithoutEndUART1>
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <InfoToUARTBeforeStart+0x210>)
 80011e6:	4821      	ldr	r0, [pc, #132]	; (800126c <InfoToUARTBeforeStart+0x214>)
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f004 f86a 	bl	80052c4 <printToBufferUART1D>
}
 80011f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delay_ms(50);
 80011f4:	2032      	movs	r0, #50	; 0x32
 80011f6:	f7ff bf1f 	b.w	8001038 <delay_ms>
 80011fa:	bf00      	nop
 80011fc:	08005c1a 	.word	0x08005c1a
 8001200:	20000004 	.word	0x20000004
 8001204:	08005c21 	.word	0x08005c21
 8001208:	08005c34 	.word	0x08005c34
 800120c:	08005c52 	.word	0x08005c52
 8001210:	08005c71 	.word	0x08005c71
 8001214:	08005c8e 	.word	0x08005c8e
 8001218:	08005cac 	.word	0x08005cac
 800121c:	08005cc9 	.word	0x08005cc9
 8001220:	08005ce7 	.word	0x08005ce7
 8001224:	08005d05 	.word	0x08005d05
 8001228:	08005d23 	.word	0x08005d23
 800122c:	20000154 	.word	0x20000154
 8001230:	08005d3b 	.word	0x08005d3b
 8001234:	08005d4f 	.word	0x08005d4f
 8001238:	08005d68 	.word	0x08005d68
 800123c:	08005d75 	.word	0x08005d75
 8001240:	08005d82 	.word	0x08005d82
 8001244:	08005d8f 	.word	0x08005d8f
 8001248:	08005d9d 	.word	0x08005d9d
 800124c:	08005daf 	.word	0x08005daf
 8001250:	08005dc2 	.word	0x08005dc2
 8001254:	200000f4 	.word	0x200000f4
 8001258:	08005ddf 	.word	0x08005ddf
 800125c:	08005dfb 	.word	0x08005dfb
 8001260:	08005e23 	.word	0x08005e23
 8001264:	08005e45 	.word	0x08005e45
 8001268:	2000028c 	.word	0x2000028c
 800126c:	08005e51 	.word	0x08005e51

08001270 <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	2300      	movs	r3, #0
	static char s1[16];
     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 8001274:	270a      	movs	r7, #10
 8001276:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
{
 800127a:	b085      	sub	sp, #20
 800127c:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
         s[i++] = n % 10 + '0';
 8001280:	461c      	mov	r4, r3
 8001282:	fbb1 f6f7 	udiv	r6, r1, r7
 8001286:	ad04      	add	r5, sp, #16
 8001288:	442c      	add	r4, r5
 800128a:	fb07 1516 	mls	r5, r7, r6, r1
 800128e:	3530      	adds	r5, #48	; 0x30
 8001290:	f804 5c10 	strb.w	r5, [r4, #-16]
 8001294:	460c      	mov	r4, r1
 8001296:	b2da      	uxtb	r2, r3
 8001298:	1c53      	adds	r3, r2, #1
     } while ((n /= 10) > 0);
 800129a:	2c09      	cmp	r4, #9
 800129c:	4631      	mov	r1, r6
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	dcee      	bgt.n	8001280 <itoa+0x10>
     if (sign < 0)
 80012a2:	2800      	cmp	r0, #0
 80012a4:	da06      	bge.n	80012b4 <itoa+0x44>
         s[i++] = '-';
 80012a6:	a904      	add	r1, sp, #16
 80012a8:	440b      	add	r3, r1
 80012aa:	212d      	movs	r1, #45	; 0x2d
 80012ac:	3202      	adds	r2, #2
 80012ae:	f803 1c10 	strb.w	r1, [r3, #-16]
 80012b2:	b253      	sxtb	r3, r2
     s[i] = '\0';
 80012b4:	2100      	movs	r1, #0
 80012b6:	aa04      	add	r2, sp, #16
 80012b8:	441a      	add	r2, r3
 80012ba:	f802 1c10 	strb.w	r1, [r2, #-16]

     k=0;
     while (i)
 80012be:	461a      	mov	r2, r3
 80012c0:	4c08      	ldr	r4, [pc, #32]	; (80012e4 <itoa+0x74>)
 80012c2:	b2d0      	uxtb	r0, r2
 80012c4:	1a19      	subs	r1, r3, r0
 80012c6:	b249      	sxtb	r1, r1
 80012c8:	b91a      	cbnz	r2, 80012d2 <itoa+0x62>
    	i--;
    	k++;
     }
     s1[k] = '\0';
     return s1;
}
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <itoa+0x74>)
     s1[k] = '\0';
 80012cc:	5462      	strb	r2, [r4, r1]
}
 80012ce:	b005      	add	sp, #20
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 80012d2:	ad04      	add	r5, sp, #16
 80012d4:	442a      	add	r2, r5
 80012d6:	f812 2c11 	ldrb.w	r2, [r2, #-17]
 80012da:	5462      	strb	r2, [r4, r1]
    	i--;
 80012dc:	1e42      	subs	r2, r0, #1
 80012de:	b252      	sxtb	r2, r2
    	k++;
 80012e0:	e7ef      	b.n	80012c2 <itoa+0x52>
 80012e2:	bf00      	nop
 80012e4:	2000074c 	.word	0x2000074c

080012e8 <itoaP>:

char * itoaP(int32_t n,char *s1)
{
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	4604      	mov	r4, r0
 80012ec:	2300      	movs	r3, #0

     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 80012ee:	f04f 0c0a 	mov.w	ip, #10
{
 80012f2:	4608      	mov	r0, r1
 80012f4:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 80012f8:	b085      	sub	sp, #20
 80012fa:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
         s[i++] = n % 10 + '0';
 80012fe:	461d      	mov	r5, r3
 8001300:	fbb1 f7fc 	udiv	r7, r1, ip
 8001304:	ae04      	add	r6, sp, #16
 8001306:	4435      	add	r5, r6
 8001308:	fb0c 1617 	mls	r6, ip, r7, r1
 800130c:	3630      	adds	r6, #48	; 0x30
 800130e:	f805 6c10 	strb.w	r6, [r5, #-16]
 8001312:	460d      	mov	r5, r1
 8001314:	b2da      	uxtb	r2, r3
 8001316:	1c53      	adds	r3, r2, #1
     } while ((n /= 10) > 0);
 8001318:	2d09      	cmp	r5, #9
 800131a:	4639      	mov	r1, r7
 800131c:	b25b      	sxtb	r3, r3
 800131e:	dcee      	bgt.n	80012fe <itoaP+0x16>
     if (sign < 0)
 8001320:	2c00      	cmp	r4, #0
 8001322:	da06      	bge.n	8001332 <itoaP+0x4a>
         s[i++] = '-';
 8001324:	a904      	add	r1, sp, #16
 8001326:	440b      	add	r3, r1
 8001328:	212d      	movs	r1, #45	; 0x2d
 800132a:	3202      	adds	r2, #2
 800132c:	f803 1c10 	strb.w	r1, [r3, #-16]
 8001330:	b253      	sxtb	r3, r2
     s[i] = '\0';
 8001332:	2100      	movs	r1, #0
 8001334:	aa04      	add	r2, sp, #16
 8001336:	441a      	add	r2, r3
 8001338:	f802 1c10 	strb.w	r1, [r2, #-16]

     k=0;
     while (i)
 800133c:	461a      	mov	r2, r3
 800133e:	b2d4      	uxtb	r4, r2
 8001340:	1b19      	subs	r1, r3, r4
 8001342:	b249      	sxtb	r1, r1
 8001344:	1845      	adds	r5, r0, r1
 8001346:	b912      	cbnz	r2, 800134e <itoaP+0x66>
     {
    	s1[k]=s[i-1];
    	i--;
    	k++;
     }
     s1[k] = '\0';
 8001348:	702a      	strb	r2, [r5, #0]
     return s1;
}
 800134a:	b005      	add	sp, #20
 800134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 800134e:	ad04      	add	r5, sp, #16
 8001350:	442a      	add	r2, r5
 8001352:	f812 2c11 	ldrb.w	r2, [r2, #-17]
 8001356:	5442      	strb	r2, [r0, r1]
    	i--;
 8001358:	1e62      	subs	r2, r4, #1
 800135a:	b252      	sxtb	r2, r2
    	k++;
 800135c:	e7ef      	b.n	800133e <itoaP+0x56>
	...

08001360 <itoa_koma>:

char * itoa_koma(int32_t n,uint8_t koma)
{
 8001360:	2200      	movs	r2, #0
    if ((sign = n) < 0)
    	n = -n;
     i = 0;
     do
     {
         s[i++] = n % 10 + '0';
 8001362:	f04f 0c0a 	mov.w	ip, #10
{
 8001366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001368:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 800136c:	b08b      	sub	sp, #44	; 0x2c
 800136e:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
         s[i++] = n % 10 + '0';
 8001372:	4615      	mov	r5, r2
 8001374:	fbb4 f7fc 	udiv	r7, r4, ip
 8001378:	ae0a      	add	r6, sp, #40	; 0x28
 800137a:	4435      	add	r5, r6
 800137c:	fb0c 4617 	mls	r6, ip, r7, r4
 8001380:	3630      	adds	r6, #48	; 0x30
 8001382:	f805 6c28 	strb.w	r6, [r5, #-40]
 8001386:	4625      	mov	r5, r4
 8001388:	b2d3      	uxtb	r3, r2
 800138a:	1c5a      	adds	r2, r3, #1
     } while ((n /= 10) > 0);
 800138c:	2d09      	cmp	r5, #9
 800138e:	463c      	mov	r4, r7
 8001390:	b252      	sxtb	r2, r2
 8001392:	dcee      	bgt.n	8001372 <itoa_koma+0x12>
     s[i] = '\0';
     if (i<=1)
 8001394:	2a01      	cmp	r2, #1
 8001396:	ac0a      	add	r4, sp, #40	; 0x28
 8001398:	4414      	add	r4, r2
     {
       	 s[i] = '0';
 800139a:	bfd7      	itett	le
 800139c:	2230      	movle	r2, #48	; 0x30
     s[i] = '\0';
 800139e:	2300      	movgt	r3, #0
       	 s[i] = '0';
 80013a0:	f804 2c28 	strble.w	r2, [r4, #-40]
       	 i++;
 80013a4:	1c9a      	addle	r2, r3, #2
 80013a6:	bfd4      	ite	le
 80013a8:	b252      	sxtble	r2, r2
     s[i] = '\0';
 80013aa:	f804 3c28 	strbgt.w	r3, [r4, #-40]
     }
     if (i<=2&&koma>1)
 80013ae:	2a02      	cmp	r2, #2
 80013b0:	dc08      	bgt.n	80013c4 <itoa_koma+0x64>
 80013b2:	2901      	cmp	r1, #1
 80013b4:	d906      	bls.n	80013c4 <itoa_koma+0x64>
     {
    	 s[i] = '0';
 80013b6:	2430      	movs	r4, #48	; 0x30
 80013b8:	ab0a      	add	r3, sp, #40	; 0x28
 80013ba:	4413      	add	r3, r2
    	 i++;
 80013bc:	3201      	adds	r2, #1
    	 s[i] = '0';
 80013be:	f803 4c28 	strb.w	r4, [r3, #-40]
    	 i++;
 80013c2:	b252      	sxtb	r2, r2
     }
     k=0;
     j=0;
     while (j<i)
 80013c4:	2400      	movs	r4, #0
     {
    	 if (k==koma)
         {
         	 sKoma[k]='.';
 80013c6:	262e      	movs	r6, #46	; 0x2e
     k=0;
 80013c8:	4623      	mov	r3, r4
     while (j<i)
 80013ca:	b265      	sxtb	r5, r4
 80013cc:	42aa      	cmp	r2, r5
 80013ce:	dc12      	bgt.n	80013f6 <itoa_koma+0x96>
         }
    	 sKoma[k]=s[j];
         j++;
         k++;
      }
     if (sign < 0) sKoma[k++] = '-';
 80013d0:	2800      	cmp	r0, #0
 80013d2:	da06      	bge.n	80013e2 <itoa_koma+0x82>
 80013d4:	a90a      	add	r1, sp, #40	; 0x28
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	440b      	add	r3, r1
 80013da:	212d      	movs	r1, #45	; 0x2d
 80013dc:	f803 1c14 	strb.w	r1, [r3, #-20]
 80013e0:	b253      	sxtb	r3, r2
 80013e2:	461a      	mov	r2, r3
 80013e4:	4c11      	ldr	r4, [pc, #68]	; (800142c <itoa_koma+0xcc>)
 80013e6:	b2d0      	uxtb	r0, r2
     i=0;
     while (k)
 80013e8:	1a19      	subs	r1, r3, r0
 80013ea:	b249      	sxtb	r1, r1
 80013ec:	b9b2      	cbnz	r2, 800141c <itoa_koma+0xbc>
    	k--;
    	i++;
     }
     s1[i] = '\0';
     return s1;
}
 80013ee:	480f      	ldr	r0, [pc, #60]	; (800142c <itoa_koma+0xcc>)
     s1[i] = '\0';
 80013f0:	5462      	strb	r2, [r4, r1]
}
 80013f2:	b00b      	add	sp, #44	; 0x2c
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	 if (k==koma)
 80013f6:	428b      	cmp	r3, r1
 80013f8:	461d      	mov	r5, r3
 80013fa:	d105      	bne.n	8001408 <itoa_koma+0xa8>
         	 sKoma[k]='.';
 80013fc:	af0a      	add	r7, sp, #40	; 0x28
 80013fe:	3301      	adds	r3, #1
 8001400:	443d      	add	r5, r7
 8001402:	b25b      	sxtb	r3, r3
 8001404:	f805 6c14 	strb.w	r6, [r5, #-20]
    	 sKoma[k]=s[j];
 8001408:	f81d 7004 	ldrb.w	r7, [sp, r4]
 800140c:	ad0a      	add	r5, sp, #40	; 0x28
 800140e:	441d      	add	r5, r3
         k++;
 8001410:	3301      	adds	r3, #1
    	 sKoma[k]=s[j];
 8001412:	f805 7c14 	strb.w	r7, [r5, #-20]
         k++;
 8001416:	b25b      	sxtb	r3, r3
 8001418:	3401      	adds	r4, #1
 800141a:	e7d6      	b.n	80013ca <itoa_koma+0x6a>
    	s1[i]=sKoma[k-1];
 800141c:	ad0a      	add	r5, sp, #40	; 0x28
 800141e:	442a      	add	r2, r5
 8001420:	f812 2c15 	ldrb.w	r2, [r2, #-21]
 8001424:	5462      	strb	r2, [r4, r1]
    	k--;
 8001426:	1e42      	subs	r2, r0, #1
 8001428:	b252      	sxtb	r2, r2
    	i++;
 800142a:	e7dc      	b.n	80013e6 <itoa_koma+0x86>
 800142c:	2000075c 	.word	0x2000075c

08001430 <Module16>:
     s1[i] = '\0';
     return s1;
}
int16_t Module16 (int16_t value)
{
	if (value == 0) return 0;
 8001430:	2800      	cmp	r0, #0
 8001432:	d002      	beq.n	800143a <Module16+0xa>
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
 8001434:	bfdc      	itt	le
 8001436:	4240      	negle	r0, r0
 8001438:	b200      	sxthle	r0, r0
}
 800143a:	4770      	bx	lr

0800143c <strlen1>:
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
}

uint8_t strlen1(char string[])
{
 800143c:	4602      	mov	r2, r0
	uint8_t i=0;
	while(string[i]!='\0')
 800143e:	2300      	movs	r3, #0
 8001440:	b2d8      	uxtb	r0, r3
 8001442:	5c11      	ldrb	r1, [r2, r0]
 8001444:	3301      	adds	r3, #1
 8001446:	2900      	cmp	r1, #0
 8001448:	d1fa      	bne.n	8001440 <strlen1+0x4>
		i++;
	return i;
}
 800144a:	4770      	bx	lr

0800144c <Merge2Strings>:

char * Merge2Strings(char * str1in, char * str2in, char * strout)
{
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	4605      	mov	r5, r0
	int8_t i, j;
	for (i=0; str1in[i]!='\0'; i++)
 8001450:	2400      	movs	r4, #0
{
 8001452:	4610      	mov	r0, r2
	for (i=0; str1in[i]!='\0'; i++)
 8001454:	b262      	sxtb	r2, r4
 8001456:	5cab      	ldrb	r3, [r5, r2]
 8001458:	1c66      	adds	r6, r4, #1
 800145a:	b943      	cbnz	r3, 800146e <Merge2Strings+0x22>
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 800145c:	b25a      	sxtb	r2, r3
 800145e:	5c8d      	ldrb	r5, [r1, r2]
 8001460:	18e2      	adds	r2, r4, r3
 8001462:	b252      	sxtb	r2, r2
 8001464:	1886      	adds	r6, r0, r2
 8001466:	3301      	adds	r3, #1
 8001468:	b925      	cbnz	r5, 8001474 <Merge2Strings+0x28>
	{
		strout[i] = str2in[j];
	}
	strout[i] = '\0';
 800146a:	7035      	strb	r5, [r6, #0]
	return strout;
}
 800146c:	bd70      	pop	{r4, r5, r6, pc}
		strout[i] = str1in[i];
 800146e:	4634      	mov	r4, r6
 8001470:	5483      	strb	r3, [r0, r2]
	for (i=0; str1in[i]!='\0'; i++)
 8001472:	e7ef      	b.n	8001454 <Merge2Strings+0x8>
		strout[i] = str2in[j];
 8001474:	5485      	strb	r5, [r0, r2]
	for (j=0; str2in[j]!='\0'; j++,i++)
 8001476:	e7f1      	b.n	800145c <Merge2Strings+0x10>

08001478 <Merge3Strings>:
char * Merge3Strings(char * str1in, char * str2in,char * str3in, char * strout)
{
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	4604      	mov	r4, r0
 800147c:	460f      	mov	r7, r1
 800147e:	4618      	mov	r0, r3
	int8_t i, j,k;
	for (i=0; str1in[i]!='\0'; i++)
 8001480:	2500      	movs	r5, #0
 8001482:	b269      	sxtb	r1, r5
 8001484:	5c63      	ldrb	r3, [r4, r1]
 8001486:	1c6e      	adds	r6, r5, #1
 8001488:	b983      	cbnz	r3, 80014ac <Merge3Strings+0x34>
 800148a:	b2de      	uxtb	r6, r3
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 800148c:	5cf9      	ldrb	r1, [r7, r3]
 800148e:	1974      	adds	r4, r6, r5
 8001490:	fa5f fc84 	uxtb.w	ip, r4
 8001494:	b264      	sxtb	r4, r4
 8001496:	b961      	cbnz	r1, 80014b2 <Merge3Strings+0x3a>
	{
		strout[i] = str2in[j];
	}
	for (k=0; str3in[k]!='\0'; k++,i++)
 8001498:	b24b      	sxtb	r3, r1
 800149a:	5cd4      	ldrb	r4, [r2, r3]
 800149c:	eb0c 0301 	add.w	r3, ip, r1
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	18c5      	adds	r5, r0, r3
 80014a4:	3101      	adds	r1, #1
 80014a6:	b944      	cbnz	r4, 80014ba <Merge3Strings+0x42>
	{
		strout[i] = str3in[k];
	}
	strout[i] = '\0';
 80014a8:	702c      	strb	r4, [r5, #0]
	return strout;
}
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strout[i] = str1in[i];
 80014ac:	4635      	mov	r5, r6
 80014ae:	5443      	strb	r3, [r0, r1]
	for (i=0; str1in[i]!='\0'; i++)
 80014b0:	e7e7      	b.n	8001482 <Merge3Strings+0xa>
		strout[i] = str2in[j];
 80014b2:	1c73      	adds	r3, r6, #1
 80014b4:	5501      	strb	r1, [r0, r4]
	for (j=0; str2in[j]!='\0'; j++,i++)
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	e7e7      	b.n	800148a <Merge3Strings+0x12>
		strout[i] = str3in[k];
 80014ba:	54c4      	strb	r4, [r0, r3]
	for (k=0; str3in[k]!='\0'; k++,i++)
 80014bc:	e7ec      	b.n	8001498 <Merge3Strings+0x20>

080014be <ClockStringWithSec>:

char *ClockStringWithSec(uint32_t time, char *OutStr)
{
 80014be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c2:	4607      	mov	r7, r0
	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 80014c4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 80014c8:	b086      	sub	sp, #24
 80014ca:	460c      	mov	r4, r1
	itoaP(time/3600,s);
 80014cc:	fbb7 f0f0 	udiv	r0, r7, r0
 80014d0:	a901      	add	r1, sp, #4
 80014d2:	f7ff ff09 	bl	80012e8 <itoaP>
	i=0;
	if (strlen1(s)<2)
 80014d6:	a801      	add	r0, sp, #4
 80014d8:	f7ff ffb0 	bl	800143c <strlen1>
 80014dc:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 80014de:	bf96      	itet	ls
 80014e0:	2201      	movls	r2, #1
	i=0;
 80014e2:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 80014e4:	2330      	movls	r3, #48	; 0x30
	i=0;
 80014e6:	4615      	mov	r5, r2
		OutStr[i] = '0';
 80014e8:	bf98      	it	ls
 80014ea:	7023      	strbls	r3, [r4, #0]
		i++;
 80014ec:	b2ee      	uxtb	r6, r5
	}

	for (k=0; s[k]!='\0';k++, i++)
 80014ee:	1ab3      	subs	r3, r6, r2
 80014f0:	a906      	add	r1, sp, #24
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	440b      	add	r3, r1
 80014f6:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80014fa:	1963      	adds	r3, r4, r5
 80014fc:	1c75      	adds	r5, r6, #1
 80014fe:	b26d      	sxtb	r5, r5
 8001500:	2900      	cmp	r1, #0
 8001502:	d149      	bne.n	8001598 <ClockStringWithSec+0xda>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 8001504:	223a      	movs	r2, #58	; 0x3a
 8001506:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 8001508:	233c      	movs	r3, #60	; 0x3c
 800150a:	fbb7 f2f3 	udiv	r2, r7, r3
 800150e:	fbb2 f0f3 	udiv	r0, r2, r3
 8001512:	a901      	add	r1, sp, #4
 8001514:	fb03 2010 	mls	r0, r3, r0, r2
 8001518:	f7ff fee6 	bl	80012e8 <itoaP>
	if (strlen1(s)<2)
 800151c:	a801      	add	r0, sp, #4
 800151e:	f7ff ff8d 	bl	800143c <strlen1>
 8001522:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 8001524:	bf9f      	itttt	ls
 8001526:	2330      	movls	r3, #48	; 0x30
 8001528:	5563      	strbls	r3, [r4, r5]
		i++;
 800152a:	1cb5      	addls	r5, r6, #2
 800152c:	b26d      	sxtbls	r5, r5
	i=0;
 800152e:	462e      	mov	r6, r5
 8001530:	fa5f f886 	uxtb.w	r8, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 8001534:	eba8 0305 	sub.w	r3, r8, r5
 8001538:	aa06      	add	r2, sp, #24
 800153a:	b25b      	sxtb	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001542:	19a3      	adds	r3, r4, r6
 8001544:	f108 0601 	add.w	r6, r8, #1
 8001548:	b276      	sxtb	r6, r6
 800154a:	bb3a      	cbnz	r2, 800159c <ClockStringWithSec+0xde>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = ':';
 800154c:	223a      	movs	r2, #58	; 0x3a
 800154e:	701a      	strb	r2, [r3, #0]
	i++;

	itoaP(time%60,s);
 8001550:	233c      	movs	r3, #60	; 0x3c
 8001552:	fbb7 f0f3 	udiv	r0, r7, r3
 8001556:	a901      	add	r1, sp, #4
 8001558:	fb03 7010 	mls	r0, r3, r0, r7
 800155c:	f7ff fec4 	bl	80012e8 <itoaP>
	if (strlen1(s)<2)
 8001560:	a801      	add	r0, sp, #4
 8001562:	f7ff ff6b 	bl	800143c <strlen1>
 8001566:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 8001568:	bf9c      	itt	ls
 800156a:	2330      	movls	r3, #48	; 0x30
 800156c:	55a3      	strbls	r3, [r4, r6]
	i=0;
 800156e:	f04f 0300 	mov.w	r3, #0
		i++;
 8001572:	bf9c      	itt	ls
 8001574:	f108 0602 	addls.w	r6, r8, #2
 8001578:	b276      	sxtbls	r6, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 800157a:	b25a      	sxtb	r2, r3
 800157c:	a906      	add	r1, sp, #24
 800157e:	440a      	add	r2, r1
 8001580:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8001584:	199a      	adds	r2, r3, r6
 8001586:	b252      	sxtb	r2, r2
 8001588:	18a0      	adds	r0, r4, r2
 800158a:	3301      	adds	r3, #1
 800158c:	b941      	cbnz	r1, 80015a0 <ClockStringWithSec+0xe2>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = '\0';
 800158e:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 8001590:	4620      	mov	r0, r4
 8001592:	b006      	add	sp, #24
 8001594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		OutStr[i] = s[k];
 8001598:	7019      	strb	r1, [r3, #0]
	for (k=0; s[k]!='\0';k++, i++)
 800159a:	e7a7      	b.n	80014ec <ClockStringWithSec+0x2e>
		OutStr[i] = s[j];
 800159c:	701a      	strb	r2, [r3, #0]
	for (j=0; s[j]!='\0'; i++,j++)
 800159e:	e7c7      	b.n	8001530 <ClockStringWithSec+0x72>
		OutStr[i] = s[j];
 80015a0:	54a1      	strb	r1, [r4, r2]
	for (j=0; s[j]!='\0'; i++,j++)
 80015a2:	e7ea      	b.n	800157a <ClockStringWithSec+0xbc>

080015a4 <ClockStringNoSec>:

char *ClockStringNoSec(uint32_t time, char *OutStr)
{
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4606      	mov	r6, r0

	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 80015a8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 80015ac:	b087      	sub	sp, #28
 80015ae:	460c      	mov	r4, r1
	itoaP(time/3600,s);
 80015b0:	fbb6 f0f0 	udiv	r0, r6, r0
 80015b4:	a901      	add	r1, sp, #4
 80015b6:	f7ff fe97 	bl	80012e8 <itoaP>
	i=0;
	if (strlen1(s)<2)
 80015ba:	a801      	add	r0, sp, #4
 80015bc:	f7ff ff3e 	bl	800143c <strlen1>
 80015c0:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 80015c2:	bf96      	itet	ls
 80015c4:	2201      	movls	r2, #1
	i=0;
 80015c6:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 80015c8:	2330      	movls	r3, #48	; 0x30
	i=0;
 80015ca:	4615      	mov	r5, r2
		OutStr[i] = '0';
 80015cc:	bf98      	it	ls
 80015ce:	7023      	strbls	r3, [r4, #0]
		i++;
 80015d0:	b2ef      	uxtb	r7, r5
	}

	for (k=0; s[k]!='\0';k++, i++)
 80015d2:	1abb      	subs	r3, r7, r2
 80015d4:	a906      	add	r1, sp, #24
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	440b      	add	r3, r1
 80015da:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80015de:	1963      	adds	r3, r4, r5
 80015e0:	1c7d      	adds	r5, r7, #1
 80015e2:	b26d      	sxtb	r5, r5
 80015e4:	bb29      	cbnz	r1, 8001632 <ClockStringNoSec+0x8e>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 80015e6:	223a      	movs	r2, #58	; 0x3a
 80015e8:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 80015ea:	233c      	movs	r3, #60	; 0x3c
 80015ec:	fbb6 f6f3 	udiv	r6, r6, r3
 80015f0:	fbb6 f0f3 	udiv	r0, r6, r3
 80015f4:	a901      	add	r1, sp, #4
 80015f6:	fb03 6010 	mls	r0, r3, r0, r6
 80015fa:	f7ff fe75 	bl	80012e8 <itoaP>
	if (strlen1(s)<2)
 80015fe:	a801      	add	r0, sp, #4
 8001600:	f7ff ff1c 	bl	800143c <strlen1>
 8001604:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 8001606:	bf9c      	itt	ls
 8001608:	2330      	movls	r3, #48	; 0x30
 800160a:	5563      	strbls	r3, [r4, r5]
	i=0;
 800160c:	f04f 0300 	mov.w	r3, #0
		i++;
 8001610:	bf9c      	itt	ls
 8001612:	1cbd      	addls	r5, r7, #2
 8001614:	b26d      	sxtbls	r5, r5
	}
	for (j=0; s[j]!='\0'; i++,j++)
 8001616:	b25a      	sxtb	r2, r3
 8001618:	a906      	add	r1, sp, #24
 800161a:	440a      	add	r2, r1
 800161c:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8001620:	195a      	adds	r2, r3, r5
 8001622:	b252      	sxtb	r2, r2
 8001624:	18a0      	adds	r0, r4, r2
 8001626:	3301      	adds	r3, #1
 8001628:	b929      	cbnz	r1, 8001636 <ClockStringNoSec+0x92>
	{
		OutStr[i] = s[j];
	}


	OutStr[i] = '\0';
 800162a:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 800162c:	4620      	mov	r0, r4
 800162e:	b007      	add	sp, #28
 8001630:	bdf0      	pop	{r4, r5, r6, r7, pc}
		OutStr[i] = s[k];
 8001632:	7019      	strb	r1, [r3, #0]
	for (k=0; s[k]!='\0';k++, i++)
 8001634:	e7cc      	b.n	80015d0 <ClockStringNoSec+0x2c>
		OutStr[i] = s[j];
 8001636:	54a1      	strb	r1, [r4, r2]
	for (j=0; s[j]!='\0'; i++,j++)
 8001638:	e7ed      	b.n	8001616 <ClockStringNoSec+0x72>
	...

0800163c <middle_of_3Imax1>:

int32_t middle_of_3Imax1(int32_t value)
{
   static int32_t InputValueI1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI1[2] = InputValueI1[1];
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <middle_of_3Imax1+0x34>)
 800163e:	684b      	ldr	r3, [r1, #4]
   InputValueI1[1] = InputValueI1[0];
 8001640:	680a      	ldr	r2, [r1, #0]
   InputValueI1[2] = InputValueI1[1];
 8001642:	608b      	str	r3, [r1, #8]
   InputValueI1[0] = value;
   a = InputValueI1[2];
   b = InputValueI1[1];
   c = InputValueI1[0];
   if ((a <= b) && (a <= c)){
 8001644:	4293      	cmp	r3, r2
   InputValueI1[0] = value;
 8001646:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 800164a:	dc05      	bgt.n	8001658 <middle_of_3Imax1+0x1c>
 800164c:	4283      	cmp	r3, r0
 800164e:	dc09      	bgt.n	8001664 <middle_of_3Imax1+0x28>
      middle = (b <= c) ? b : c;
 8001650:	4290      	cmp	r0, r2
 8001652:	bfa8      	it	ge
 8001654:	4610      	movge	r0, r2
 8001656:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 8001658:	4282      	cmp	r2, r0
 800165a:	dc03      	bgt.n	8001664 <middle_of_3Imax1+0x28>
         middle = (a <= c) ? a : c;
 800165c:	4298      	cmp	r0, r3
 800165e:	bfa8      	it	ge
 8001660:	4618      	movge	r0, r3
 8001662:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001664:	4293      	cmp	r3, r2
 8001666:	bfa8      	it	ge
 8001668:	4613      	movge	r3, r2
 800166a:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000710 	.word	0x20000710

08001674 <middle_of_3Imax2>:

int32_t middle_of_3Imax2(int32_t value)
{
   static int32_t InputValueI2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI2[2] = InputValueI2[1];
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <middle_of_3Imax2+0x34>)
 8001676:	684b      	ldr	r3, [r1, #4]
   InputValueI2[1] = InputValueI2[0];
 8001678:	680a      	ldr	r2, [r1, #0]
   InputValueI2[2] = InputValueI2[1];
 800167a:	608b      	str	r3, [r1, #8]
   InputValueI2[0] = value;
   a = InputValueI2[2];
   b = InputValueI2[1];
   c = InputValueI2[0];
   if ((a <= b) && (a <= c)){
 800167c:	4293      	cmp	r3, r2
   InputValueI2[0] = value;
 800167e:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 8001682:	dc05      	bgt.n	8001690 <middle_of_3Imax2+0x1c>
 8001684:	4283      	cmp	r3, r0
 8001686:	dc09      	bgt.n	800169c <middle_of_3Imax2+0x28>
      middle = (b <= c) ? b : c;
 8001688:	4290      	cmp	r0, r2
 800168a:	bfa8      	it	ge
 800168c:	4610      	movge	r0, r2
 800168e:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 8001690:	4282      	cmp	r2, r0
 8001692:	dc03      	bgt.n	800169c <middle_of_3Imax2+0x28>
         middle = (a <= c) ? a : c;
 8001694:	4298      	cmp	r0, r3
 8001696:	bfa8      	it	ge
 8001698:	4618      	movge	r0, r3
 800169a:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 800169c:	4293      	cmp	r3, r2
 800169e:	bfa8      	it	ge
 80016a0:	4613      	movge	r3, r2
 80016a2:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	2000071c 	.word	0x2000071c

080016ac <middle_of_3Umax1>:

int32_t middle_of_3Umax1(int32_t value)
{
   static int32_t InputValueU1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU1[2] = InputValueU1[1];
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <middle_of_3Umax1+0x34>)
 80016ae:	684b      	ldr	r3, [r1, #4]
   InputValueU1[1] = InputValueU1[0];
 80016b0:	680a      	ldr	r2, [r1, #0]
   InputValueU1[2] = InputValueU1[1];
 80016b2:	608b      	str	r3, [r1, #8]
   InputValueU1[0] = value;
   a = InputValueU1[2];
   b = InputValueU1[1];
   c = InputValueU1[0];
   if ((a <= b) && (a <= c)){
 80016b4:	4293      	cmp	r3, r2
   InputValueU1[0] = value;
 80016b6:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 80016ba:	dc05      	bgt.n	80016c8 <middle_of_3Umax1+0x1c>
 80016bc:	4283      	cmp	r3, r0
 80016be:	dc09      	bgt.n	80016d4 <middle_of_3Umax1+0x28>
      middle = (b <= c) ? b : c;
 80016c0:	4290      	cmp	r0, r2
 80016c2:	bfa8      	it	ge
 80016c4:	4610      	movge	r0, r2
 80016c6:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80016c8:	4282      	cmp	r2, r0
 80016ca:	dc03      	bgt.n	80016d4 <middle_of_3Umax1+0x28>
         middle = (a <= c) ? a : c;
 80016cc:	4298      	cmp	r0, r3
 80016ce:	bfa8      	it	ge
 80016d0:	4618      	movge	r0, r3
 80016d2:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80016d4:	4293      	cmp	r3, r2
 80016d6:	bfa8      	it	ge
 80016d8:	4613      	movge	r3, r2
 80016da:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000728 	.word	0x20000728

080016e4 <middle_of_3Umax2>:

int32_t middle_of_3Umax2(int32_t value)
{
   static int32_t InputValueU2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU2[2] = InputValueU2[1];
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <middle_of_3Umax2+0x34>)
 80016e6:	684b      	ldr	r3, [r1, #4]
   InputValueU2[1] = InputValueU2[0];
 80016e8:	680a      	ldr	r2, [r1, #0]
   InputValueU2[2] = InputValueU2[1];
 80016ea:	608b      	str	r3, [r1, #8]
   InputValueU2[0] = value;
   a = InputValueU2[2];
   b = InputValueU2[1];
   c = InputValueU2[0];
   if ((a <= b) && (a <= c)){
 80016ec:	4293      	cmp	r3, r2
   InputValueU2[0] = value;
 80016ee:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 80016f2:	dc05      	bgt.n	8001700 <middle_of_3Umax2+0x1c>
 80016f4:	4283      	cmp	r3, r0
 80016f6:	dc09      	bgt.n	800170c <middle_of_3Umax2+0x28>
      middle = (b <= c) ? b : c;
 80016f8:	4290      	cmp	r0, r2
 80016fa:	bfa8      	it	ge
 80016fc:	4610      	movge	r0, r2
 80016fe:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 8001700:	4282      	cmp	r2, r0
 8001702:	dc03      	bgt.n	800170c <middle_of_3Umax2+0x28>
         middle = (a <= c) ? a : c;
 8001704:	4298      	cmp	r0, r3
 8001706:	bfa8      	it	ge
 8001708:	4618      	movge	r0, r3
 800170a:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 800170c:	4293      	cmp	r3, r2
 800170e:	bfa8      	it	ge
 8001710:	4613      	movge	r3, r2
 8001712:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000734 	.word	0x20000734

0800171c <middle_of_3Umax3>:
int32_t middle_of_3Umax3(int32_t value)
{
   static int32_t InputValueU3[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU3[2] = InputValueU3[1];
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <middle_of_3Umax3+0x34>)
 800171e:	684b      	ldr	r3, [r1, #4]
   InputValueU3[1] = InputValueU3[0];
 8001720:	680a      	ldr	r2, [r1, #0]
   InputValueU3[2] = InputValueU3[1];
 8001722:	608b      	str	r3, [r1, #8]
   InputValueU3[0] = value;
   a = InputValueU3[2];
   b = InputValueU3[1];
   c = InputValueU3[0];
   if ((a <= b) && (a <= c)){
 8001724:	4293      	cmp	r3, r2
   InputValueU3[0] = value;
 8001726:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 800172a:	dc05      	bgt.n	8001738 <middle_of_3Umax3+0x1c>
 800172c:	4283      	cmp	r3, r0
 800172e:	dc09      	bgt.n	8001744 <middle_of_3Umax3+0x28>
      middle = (b <= c) ? b : c;
 8001730:	4290      	cmp	r0, r2
 8001732:	bfa8      	it	ge
 8001734:	4610      	movge	r0, r2
 8001736:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 8001738:	4282      	cmp	r2, r0
 800173a:	dc03      	bgt.n	8001744 <middle_of_3Umax3+0x28>
         middle = (a <= c) ? a : c;
 800173c:	4298      	cmp	r0, r3
 800173e:	bfa8      	it	ge
 8001740:	4618      	movge	r0, r3
 8001742:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001744:	4293      	cmp	r3, r2
 8001746:	bfa8      	it	ge
 8001748:	4613      	movge	r3, r2
 800174a:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000740 	.word	0x20000740

08001754 <RunningAverageI1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI1 = 0;
	filteredlValueI1 += (newValue - filteredlValueI1) * k;
	return filteredlValueI1/10;
}
 8001754:	4770      	bx	lr

08001756 <RunningAverageI2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI2 = 0;
	filteredlValueI2 += (newValue - filteredlValueI2) * k;
	return filteredlValueI2/10;
}
 8001756:	4770      	bx	lr

08001758 <RunningAverageU1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU1 = 0;
	filteredlValueU1 += (newValue - filteredlValueU1) * k;
	return filteredlValueU1/10;
}
 8001758:	4770      	bx	lr

0800175a <RunningAverageU2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU2 = 0;
	filteredlValueU2 += (newValue - filteredlValueU2) * k;
	return filteredlValueU2/10;
}
 800175a:	4770      	bx	lr

0800175c <Menu_GetCurrentMenu>:


Menu_Item_t* Menu_GetCurrentMenu(void)
{
 return CurrentMenuItem;
}
 800175c:	4b01      	ldr	r3, [pc, #4]	; (8001764 <Menu_GetCurrentMenu+0x8>)
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	2000024c 	.word	0x2000024c

08001768 <Menu_Navigate>:

void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <Menu_Navigate+0x28>)
{
 800176a:	b510      	push	{r4, lr}
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 800176c:	4298      	cmp	r0, r3
 800176e:	d00d      	beq.n	800178c <Menu_Navigate+0x24>
 8001770:	b160      	cbz	r0, 800178c <Menu_Navigate+0x24>
  return;

 CurrentMenuItem = NewMenu;

 if (MenuWriteFunc)
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <Menu_Navigate+0x2c>)
 CurrentMenuItem = NewMenu;
 8001774:	4c08      	ldr	r4, [pc, #32]	; (8001798 <Menu_Navigate+0x30>)
 if (MenuWriteFunc)
 8001776:	6812      	ldr	r2, [r2, #0]
 CurrentMenuItem = NewMenu;
 8001778:	6020      	str	r0, [r4, #0]
 if (MenuWriteFunc)
 800177a:	b10a      	cbz	r2, 8001780 <Menu_Navigate+0x18>
  MenuWriteFunc(CurrentMenuItem->Text);
 800177c:	3018      	adds	r0, #24
 800177e:	4790      	blx	r2

 void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	691b      	ldr	r3, [r3, #16]

 if (EnterCallback)
 8001784:	b113      	cbz	r3, 800178c <Menu_Navigate+0x24>
  EnterCallback();
}
 8001786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EnterCallback();
 800178a:	4718      	bx	r3
}
 800178c:	bd10      	pop	{r4, pc}
 800178e:	bf00      	nop
 8001790:	08005e64 	.word	0x08005e64
 8001794:	20000770 	.word	0x20000770
 8001798:	2000024c 	.word	0x2000024c

0800179c <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)( char* Text))
{
 MenuWriteFunc = WriteFunc;
 800179c:	4b02      	ldr	r3, [pc, #8]	; (80017a8 <Menu_SetGenericWriteCallback+0xc>)
 800179e:	6018      	str	r0, [r3, #0]
 Menu_Navigate(CurrentMenuItem);
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <Menu_SetGenericWriteCallback+0x10>)
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	f7ff bfe0 	b.w	8001768 <Menu_Navigate>
 80017a8:	20000770 	.word	0x20000770
 80017ac:	2000024c 	.word	0x2000024c

080017b0 <Menu_SelectItem>:
}

void Menu_SelectItem(Key_Pressed_t key)
{
 if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <Menu_SelectItem+0x14>)
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <Menu_SelectItem+0x18>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d003      	beq.n	80017c2 <Menu_SelectItem+0x12>
 80017ba:	b113      	cbz	r3, 80017c2 <Menu_SelectItem+0x12>
  return;

 void (*SelectCallback)(Key_Pressed_t) = CurrentMenuItem->SelectCallback;
 80017bc:	695b      	ldr	r3, [r3, #20]

 if (SelectCallback)
 80017be:	b103      	cbz	r3, 80017c2 <Menu_SelectItem+0x12>
  SelectCallback(key);
 80017c0:	4718      	bx	r3
}
 80017c2:	4770      	bx	lr
 80017c4:	2000024c 	.word	0x2000024c
 80017c8:	08005e64 	.word	0x08005e64

080017cc <strobe>:
uint8_t pos_x = 0;
uint8_t pos_y = 0;

void strobe(void)
{
	LCD_PORT->BSRR=LCD_EN_BS;
 80017cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
{
 80017d0:	b510      	push	{r4, lr}
	LCD_PORT->BSRR=LCD_EN_BS;
 80017d2:	4c06      	ldr	r4, [pc, #24]	; (80017ec <strobe+0x20>)
	delay_us(2);
 80017d4:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BS;
 80017d6:	6123      	str	r3, [r4, #16]
	delay_us(2);
 80017d8:	f7ff fbf6 	bl	8000fc8 <delay_us>
	LCD_PORT->BSRR=LCD_EN_BC;
 80017dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	delay_us(2);
 80017e0:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BC;
 80017e2:	6123      	str	r3, [r4, #16]
}
 80017e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(2);
 80017e8:	f7ff bbee 	b.w	8000fc8 <delay_us>
 80017ec:	40010c00 	.word	0x40010c00

080017f0 <lcd_set_4bit_mode>:
			}
		}
	}
}

void lcd_set_4bit_mode(void) {
 80017f0:	b570      	push	{r4, r5, r6, lr}


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80017f2:	f04f 457c 	mov.w	r5, #4227858432	; 0xfc000000
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80017f6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80017fa:	4c0d      	ldr	r4, [pc, #52]	; (8001830 <lcd_set_4bit_mode+0x40>)
 80017fc:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80017fe:	6126      	str	r6, [r4, #16]

	//LCD_PORT->BSRR=LCD_EN_BS;
	//delay_ms(1);
	//LCD_PORT->BSRR=LCD_EN_BC;

	strobe();
 8001800:	f7ff ffe4 	bl	80017cc <strobe>
	delay_ms(1);
 8001804:	2001      	movs	r0, #1
 8001806:	f7ff fc17 	bl	8001038 <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 800180a:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 800180c:	6126      	str	r6, [r4, #16]

	strobe();
 800180e:	f7ff ffdd 	bl	80017cc <strobe>
	delay_ms(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff fc10 	bl	8001038 <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
	LCD_PORT->BSRR=(LCD_DB7_BS);
 8001818:	f44f 6380 	mov.w	r3, #1024	; 0x400
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 800181c:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB7_BS);
 800181e:	6123      	str	r3, [r4, #16]

	strobe();
 8001820:	f7ff ffd4 	bl	80017cc <strobe>
	delay_ms(1);

}
 8001824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	delay_ms(1);
 8001828:	2001      	movs	r0, #1
 800182a:	f7ff bc05 	b.w	8001038 <delay_ms>
 800182e:	bf00      	nop
 8001830:	40010c00 	.word	0x40010c00

08001834 <lcd_send>:

void lcd_send(uint8_t byte, dat_or_comm dc)  {

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001834:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <lcd_send+0x98>)
void lcd_send(uint8_t byte, dat_or_comm dc)  {
 800183a:	b570      	push	{r4, r5, r6, lr}
 800183c:	4604      	mov	r4, r0

	if (dc) {
 800183e:	460d      	mov	r5, r1
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001840:	611a      	str	r2, [r3, #16]
	if (dc) {
 8001842:	b111      	cbz	r1, 800184a <lcd_send+0x16>
		LCD_PORT->BSRR=LCD_CD_BS;
 8001844:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001848:	611a      	str	r2, [r3, #16]
	}

	if (byte & 0x10) {
 800184a:	06e2      	lsls	r2, r4, #27
		LCD_PORT->BSRR=LCD_DB4_BS;
 800184c:	bf44      	itt	mi
 800184e:	f44f 5200 	movmi.w	r2, #8192	; 0x2000
 8001852:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x20) {
 8001854:	f014 0f20 	tst.w	r4, #32
		LCD_PORT->BSRR=LCD_DB5_BS;
 8001858:	bf18      	it	ne
 800185a:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 800185e:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <lcd_send+0x98>)
 8001860:	bf18      	it	ne
 8001862:	611a      	strne	r2, [r3, #16]
	}
	if (byte & 0x40) {
 8001864:	0666      	lsls	r6, r4, #25
		LCD_PORT->BSRR=LCD_DB6_BS;
 8001866:	bf44      	itt	mi
 8001868:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 800186c:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x80) {
 800186e:	f014 0f80 	tst.w	r4, #128	; 0x80
		LCD_PORT->BSRR=LCD_DB7_BS;
 8001872:	bf18      	it	ne
 8001874:	f44f 6380 	movne.w	r3, #1024	; 0x400
 8001878:	4e14      	ldr	r6, [pc, #80]	; (80018cc <lcd_send+0x98>)
 800187a:	bf18      	it	ne
 800187c:	6133      	strne	r3, [r6, #16]
	}

	strobe();
 800187e:	f7ff ffa5 	bl	80017cc <strobe>


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 8001882:	f04f 5370 	mov.w	r3, #1006632960	; 0x3c000000

	if (byte & 0x01) {
 8001886:	07e0      	lsls	r0, r4, #31
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 8001888:	6133      	str	r3, [r6, #16]
		LCD_PORT->BSRR=LCD_DB4_BS;
 800188a:	bf44      	itt	mi
 800188c:	f44f 5300 	movmi.w	r3, #8192	; 0x2000
 8001890:	6133      	strmi	r3, [r6, #16]
	}
	if (byte & 0x02) {
 8001892:	07a1      	lsls	r1, r4, #30
		LCD_PORT->BSRR=LCD_DB5_BS;
 8001894:	bf42      	ittt	mi
 8001896:	f44f 5280 	movmi.w	r2, #4096	; 0x1000
 800189a:	4b0c      	ldrmi	r3, [pc, #48]	; (80018cc <lcd_send+0x98>)
 800189c:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x04) {
 800189e:	0762      	lsls	r2, r4, #29
		LCD_PORT->BSRR=LCD_DB6_BS;
 80018a0:	bf42      	ittt	mi
 80018a2:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 80018a6:	4b09      	ldrmi	r3, [pc, #36]	; (80018cc <lcd_send+0x98>)
 80018a8:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x08) {
 80018aa:	0723      	lsls	r3, r4, #28
		LCD_PORT->BSRR=LCD_DB7_BS;
 80018ac:	bf42      	ittt	mi
 80018ae:	f44f 6280 	movmi.w	r2, #1024	; 0x400
 80018b2:	4b06      	ldrmi	r3, [pc, #24]	; (80018cc <lcd_send+0x98>)
 80018b4:	611a      	strmi	r2, [r3, #16]
	}



	strobe();
 80018b6:	f7ff ff89 	bl	80017cc <strobe>
	delay_ms(2);
 80018ba:	2002      	movs	r0, #2
 80018bc:	f7ff fbbc 	bl	8001038 <delay_ms>
	if (dc) {
 80018c0:	b11d      	cbz	r5, 80018ca <lcd_send+0x96>
			LCD_PORT->BSRR=LCD_CD_BC;
 80018c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018c6:	4b01      	ldr	r3, [pc, #4]	; (80018cc <lcd_send+0x98>)
 80018c8:	611a      	str	r2, [r3, #16]
		}

}
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	40010c00 	.word	0x40010c00

080018d0 <lcd_set_user_char>:
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80018d0:	00c0      	lsls	r0, r0, #3
 80018d2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 80018d6:	b538      	push	{r3, r4, r5, lr}
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80018d8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 80018dc:	460c      	mov	r4, r1
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80018de:	2100      	movs	r1, #0
 80018e0:	f7ff ffa8 	bl	8001834 <lcd_send>
	for (i=0;i<=7;i++) {
 80018e4:	1e65      	subs	r5, r4, #1
 80018e6:	3407      	adds	r4, #7
		lcd_send(char_data[i],DATA);
 80018e8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80018ec:	2101      	movs	r1, #1
 80018ee:	f7ff ffa1 	bl	8001834 <lcd_send>
	for (i=0;i<=7;i++) {
 80018f2:	42a5      	cmp	r5, r4
 80018f4:	d1f8      	bne.n	80018e8 <lcd_set_user_char+0x18>
}
 80018f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_send((1<<7), COMMAND);
 80018fa:	2100      	movs	r1, #0
 80018fc:	2080      	movs	r0, #128	; 0x80
 80018fe:	f7ff bf99 	b.w	8001834 <lcd_send>
	...

08001904 <SetSymbols>:
{
 8001904:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sym[4]=0b00000;
 8001906:	4c1f      	ldr	r4, [pc, #124]	; (8001984 <SetSymbols+0x80>)
 8001908:	4d1f      	ldr	r5, [pc, #124]	; (8001988 <SetSymbols+0x84>)
	lcd_set_user_char(0,sym);//charge
 800190a:	4669      	mov	r1, sp
 800190c:	2000      	movs	r0, #0
	sym[4]=0b00000;
 800190e:	e9cd 4500 	strd	r4, r5, [sp]
	sym[4]=0b00000;
 8001912:	4e1e      	ldr	r6, [pc, #120]	; (800198c <SetSymbols+0x88>)
	lcd_set_user_char(0,sym);//charge
 8001914:	f7ff ffdc 	bl	80018d0 <lcd_set_user_char>
	sym[4]=0b00000;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <SetSymbols+0x8c>)
	lcd_set_user_char(1,sym);//charge
 800191a:	4669      	mov	r1, sp
 800191c:	2001      	movs	r0, #1
	sym[4]=0b00000;
 800191e:	e9cd 3600 	strd	r3, r6, [sp]
	lcd_set_user_char(1,sym);//charge
 8001922:	f7ff ffd5 	bl	80018d0 <lcd_set_user_char>
	sym[0]=0b00000;
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <SetSymbols+0x90>)
	lcd_set_user_char(2,sym);//discharge
 8001928:	4669      	mov	r1, sp
	sym[4]=0b00000;
 800192a:	e9cd 3500 	strd	r3, r5, [sp]
	lcd_set_user_char(2,sym);//discharge
 800192e:	2002      	movs	r0, #2
	sym[0]=0b00100;
 8001930:	4d19      	ldr	r5, [pc, #100]	; (8001998 <SetSymbols+0x94>)
	lcd_set_user_char(2,sym);//discharge
 8001932:	f7ff ffcd 	bl	80018d0 <lcd_set_user_char>
	lcd_set_user_char(3,sym);//discharge
 8001936:	4669      	mov	r1, sp
 8001938:	2003      	movs	r0, #3
	sym[4]=0b00000;
 800193a:	e9cd 5600 	strd	r5, r6, [sp]
	lcd_set_user_char(3,sym);//discharge
 800193e:	f7ff ffc7 	bl	80018d0 <lcd_set_user_char>
	lcd_set_user_char(4,sym);//training
 8001942:	4669      	mov	r1, sp
 8001944:	2004      	movs	r0, #4
	sym[4]=0b00100;
 8001946:	e9cd 5400 	strd	r5, r4, [sp]
	lcd_set_user_char(4,sym);//training
 800194a:	f7ff ffc1 	bl	80018d0 <lcd_set_user_char>
	sym[4]=0b01010;
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <SetSymbols+0x98>)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <SetSymbols+0x9c>)
	lcd_set_user_char(5,sym);//swing
 8001952:	4669      	mov	r1, sp
 8001954:	2005      	movs	r0, #5
	sym[4]=0b01010;
 8001956:	e9cd 2300 	strd	r2, r3, [sp]
	lcd_set_user_char(5,sym);//swing
 800195a:	f7ff ffb9 	bl	80018d0 <lcd_set_user_char>
	sym[4]=0b00101;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <SetSymbols+0xa0>)
 8001960:	4911      	ldr	r1, [pc, #68]	; (80019a8 <SetSymbols+0xa4>)
	lcd_set_user_char(6,sym);//Л
 8001962:	2006      	movs	r0, #6
	sym[4]=0b00101;
 8001964:	e9cd 1300 	strd	r1, r3, [sp]
	lcd_set_user_char(6,sym);//Л
 8001968:	4669      	mov	r1, sp
 800196a:	f7ff ffb1 	bl	80018d0 <lcd_set_user_char>
	sym[4]=0b00001;
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <SetSymbols+0xa8>)
 8001970:	480f      	ldr	r0, [pc, #60]	; (80019b0 <SetSymbols+0xac>)
	lcd_set_user_char(7,sym);//Ч
 8001972:	4669      	mov	r1, sp
	sym[4]=0b00001;
 8001974:	e9cd 0300 	strd	r0, r3, [sp]
	lcd_set_user_char(7,sym);//Ч
 8001978:	2007      	movs	r0, #7
 800197a:	f7ff ffa9 	bl	80018d0 <lcd_set_user_char>
}
 800197e:	b002      	add	sp, #8
 8001980:	bd70      	pop	{r4, r5, r6, pc}
 8001982:	bf00      	nop
 8001984:	040e1504 	.word	0x040e1504
 8001988:	1f1f0400 	.word	0x1f1f0400
 800198c:	1f040000 	.word	0x1f040000
 8001990:	00040e15 	.word	0x00040e15
 8001994:	150e0400 	.word	0x150e0400
 8001998:	04150e04 	.word	0x04150e04
 800199c:	0a070702 	.word	0x0a070702
 80019a0:	081c1c0a 	.word	0x081c1c0a
 80019a4:	00091505 	.word	0x00091505
 80019a8:	0505050f 	.word	0x0505050f
 80019ac:	00010101 	.word	0x00010101
 80019b0:	1f111111 	.word	0x1f111111

080019b4 <lcd_set_xy>:
	pos_x = x;
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <lcd_set_xy+0x1c>)
 80019b6:	7010      	strb	r0, [r2, #0]
	pos_y = y;
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <lcd_set_xy+0x20>)
 80019ba:	7011      	strb	r1, [r2, #0]
	if (y==0) {
 80019bc:	b919      	cbnz	r1, 80019c6 <lcd_set_xy+0x12>
		lcd_send( ((1<<7) | (x)),COMMAND);
 80019be:	f040 0080 	orr.w	r0, r0, #128	; 0x80
		lcd_send( ((3<<6) | (x)),COMMAND);
 80019c2:	f7ff bf37 	b.w	8001834 <lcd_send>
 80019c6:	2100      	movs	r1, #0
 80019c8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80019cc:	e7f9      	b.n	80019c2 <lcd_set_xy+0xe>
 80019ce:	bf00      	nop
 80019d0:	20000774 	.word	0x20000774
 80019d4:	20000775 	.word	0x20000775

080019d8 <lcd_out>:
void lcd_out(char * txt,uint8_t TypeOfLCD) {
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	4605      	mov	r5, r0
 80019dc:	460e      	mov	r6, r1
	while(*txt)
 80019de:	4604      	mov	r4, r0
 80019e0:	7820      	ldrb	r0, [r4, #0]
 80019e2:	b900      	cbnz	r0, 80019e6 <lcd_out+0xe>
}
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
		lcd_send(*txt,DATA);
 80019e6:	2101      	movs	r1, #1
 80019e8:	f7ff ff24 	bl	8001834 <lcd_send>
		if ((TypeOfLCD ==1)&&(i==7) )
 80019ec:	2e01      	cmp	r6, #1
 80019ee:	d107      	bne.n	8001a00 <lcd_out+0x28>
 80019f0:	1b63      	subs	r3, r4, r5
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b07      	cmp	r3, #7
 80019f6:	d103      	bne.n	8001a00 <lcd_out+0x28>
			lcd_set_xy(0,1);
 80019f8:	4631      	mov	r1, r6
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff ffda 	bl	80019b4 <lcd_set_xy>
		txt++;
 8001a00:	3401      	adds	r4, #1
		i++;
 8001a02:	e7ed      	b.n	80019e0 <lcd_out+0x8>

08001a04 <LcdOutbyNumber>:
	lcd_send(num,DATA);
 8001a04:	2101      	movs	r1, #1
 8001a06:	b2c0      	uxtb	r0, r0
 8001a08:	f7ff bf14 	b.w	8001834 <lcd_send>

08001a0c <LcdOut>:
{
 8001a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a10:	460d      	mov	r5, r1
			lcd_send(russ[*txt-192],DATA);
 8001a12:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001a8c <LcdOut+0x80>
		pos_x++;
 8001a16:	4e1b      	ldr	r6, [pc, #108]	; (8001a84 <LcdOut+0x78>)
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001a18:	4f1b      	ldr	r7, [pc, #108]	; (8001a88 <LcdOut+0x7c>)
 8001a1a:	1e44      	subs	r4, r0, #1
	while(*txt)
 8001a1c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001a20:	b908      	cbnz	r0, 8001a26 <LcdOut+0x1a>
}
 8001a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(*txt==178)//І
 8001a26:	28b2      	cmp	r0, #178	; 0xb2
 8001a28:	d119      	bne.n	8001a5e <LcdOut+0x52>
			lcd_send(73,DATA);
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2049      	movs	r0, #73	; 0x49
			lcd_send(russ[*txt-192],DATA);
 8001a2e:	f7ff ff01 	bl	8001834 <lcd_send>
		pos_x++;
 8001a32:	7833      	ldrb	r3, [r6, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001a34:	f897 9000 	ldrb.w	r9, [r7]
		pos_x++;
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	7033      	strb	r3, [r6, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001a3e:	f1b9 0f00 	cmp.w	r9, #0
 8001a42:	d1eb      	bne.n	8001a1c <LcdOut+0x10>
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d1e9      	bne.n	8001a1c <LcdOut+0x10>
 8001a48:	2d02      	cmp	r5, #2
 8001a4a:	d1e7      	bne.n	8001a1c <LcdOut+0x10>
			lcd_set_xy(0,1);
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4648      	mov	r0, r9
 8001a50:	f7ff ffb0 	bl	80019b4 <lcd_set_xy>
			pos_y = 1;
 8001a54:	2301      	movs	r3, #1
			pos_x = 0;
 8001a56:	f886 9000 	strb.w	r9, [r6]
			pos_y = 1;
 8001a5a:	703b      	strb	r3, [r7, #0]
 8001a5c:	e7de      	b.n	8001a1c <LcdOut+0x10>
		}else if(*txt==175)//Ї
 8001a5e:	28af      	cmp	r0, #175	; 0xaf
 8001a60:	d102      	bne.n	8001a68 <LcdOut+0x5c>
			lcd_send(3,DATA);
 8001a62:	2101      	movs	r1, #1
 8001a64:	2003      	movs	r0, #3
 8001a66:	e7e2      	b.n	8001a2e <LcdOut+0x22>
		}else if(*txt==170)//Є
 8001a68:	28aa      	cmp	r0, #170	; 0xaa
 8001a6a:	d102      	bne.n	8001a72 <LcdOut+0x66>
			lcd_send(2,DATA);
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2002      	movs	r0, #2
 8001a70:	e7dd      	b.n	8001a2e <LcdOut+0x22>
		}else if(*txt<192)
 8001a72:	28bf      	cmp	r0, #191	; 0xbf
			lcd_send(russ[*txt-192],DATA);
 8001a74:	bf89      	itett	hi
 8001a76:	4440      	addhi	r0, r8
			lcd_send(*txt,DATA);
 8001a78:	2101      	movls	r1, #1
			lcd_send(russ[*txt-192],DATA);
 8001a7a:	2101      	movhi	r1, #1
 8001a7c:	f810 0cc0 	ldrbhi.w	r0, [r0, #-192]
 8001a80:	e7d5      	b.n	8001a2e <LcdOut+0x22>
 8001a82:	bf00      	nop
 8001a84:	20000774 	.word	0x20000774
 8001a88:	20000775 	.word	0x20000775
 8001a8c:	20000250 	.word	0x20000250

08001a90 <lcd_clear>:
	lcd_send(0x01,COMMAND);
 8001a90:	2100      	movs	r1, #0
 8001a92:	2001      	movs	r0, #1
 8001a94:	f7ff bece 	b.w	8001834 <lcd_send>

08001a98 <lcd_init>:
void lcd_init() {
 8001a98:	b508      	push	{r3, lr}
	delay_ms(100);
 8001a9a:	2064      	movs	r0, #100	; 0x64
 8001a9c:	f7ff facc 	bl	8001038 <delay_ms>
	lcd_set_4bit_mode();
 8001aa0:	f7ff fea6 	bl	80017f0 <lcd_set_4bit_mode>
				lcd_send(0x0E,COMMAND);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	200e      	movs	r0, #14
 8001aa8:	f7ff fec4 	bl	8001834 <lcd_send>
}
 8001aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_clear();
 8001ab0:	f7ff bfee 	b.w	8001a90 <lcd_clear>

08001ab4 <PrintToLCD>:


void PrintToLCD(char* str )
{
	LcdOut(str,2);
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	f7ff bfa9 	b.w	8001a0c <LcdOut>

08001aba <PrintToLCD_xy>:
	//Send_String_to_UART(str);
}

void PrintToLCD_xy(char* str ,uint8_t x, uint8_t y)
{
 8001aba:	b510      	push	{r4, lr}
 8001abc:	4604      	mov	r4, r0
 8001abe:	4608      	mov	r0, r1
	lcd_set_xy(x,y);
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	f7ff ff77 	bl	80019b4 <lcd_set_xy>

	LcdOut(str,2);
 8001ac6:	4620      	mov	r0, r4
	//Send_String_to_UART(str);
}
 8001ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LcdOut(str,2);
 8001acc:	2102      	movs	r1, #2
 8001ace:	f7ff bf9d 	b.w	8001a0c <LcdOut>

08001ad2 <InitLCD>:

{
	PrintToLCD(itoa_koma(x,k));
}
void InitLCD()
{
 8001ad2:	b508      	push	{r3, lr}



	lcd_init();
 8001ad4:	f7ff ffe0 	bl	8001a98 <lcd_init>
	lcd_clear();
 8001ad8:	f7ff ffda 	bl	8001a90 <lcd_clear>
	lcd_set_state(LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
}
 8001adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				lcd_send(0x0C,COMMAND);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	200c      	movs	r0, #12
 8001ae4:	f7ff bea6 	b.w	8001834 <lcd_send>

08001ae8 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <LL_APB2_GRP1_EnableClock+0x18>)
{
 8001aea:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	4302      	orrs	r2, r0
 8001af0:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4018      	ands	r0, r3
 8001af6:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001af8:	9b01      	ldr	r3, [sp, #4]
}
 8001afa:	b002      	add	sp, #8
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000

08001b04 <MenuLog_Enter>:
			ClockOnLCD_noSec(DischargeTimeSec);
		}
}
void MenuLog_Enter()
{
	i_LogItems = 0;
 8001b04:	2200      	movs	r2, #0
 8001b06:	4b01      	ldr	r3, [pc, #4]	; (8001b0c <MenuLog_Enter+0x8>)
 8001b08:	801a      	strh	r2, [r3, #0]
}
 8001b0a:	4770      	bx	lr
 8001b0c:	200007de 	.word	0x200007de

08001b10 <MenuCalibrationWriteToFlash_Enter>:
			break;
	}
}

void MenuCalibrationWriteToFlash_Enter(Key_Pressed_t key)
{
 8001b10:	b508      	push	{r3, lr}
	CalibrationWriteToFlash_CRC();
 8001b12:	f7fe ff29 	bl	8000968 <CalibrationWriteToFlash_CRC>
	WriteInLOG("Calibration");
}
 8001b16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	WriteInLOG("Calibration");
 8001b1a:	4801      	ldr	r0, [pc, #4]	; (8001b20 <MenuCalibrationWriteToFlash_Enter+0x10>)
 8001b1c:	f7ff b8c6 	b.w	8000cac <WriteInLOG>
 8001b20:	08005e7c 	.word	0x08005e7c

08001b24 <MenuSettingsBatteryType_Enter>:
{
 8001b24:	b510      	push	{r4, lr}
	if(CountShowBT == 0)
 8001b26:	4c3b      	ldr	r4, [pc, #236]	; (8001c14 <MenuSettingsBatteryType_Enter+0xf0>)
 8001b28:	f994 1000 	ldrsb.w	r1, [r4]
 8001b2c:	b961      	cbnz	r1, 8001b48 <MenuSettingsBatteryType_Enter+0x24>
		lcd_set_xy(0,0);
 8001b2e:	4608      	mov	r0, r1
 8001b30:	f7ff ff40 	bl	80019b4 <lcd_set_xy>
		PrintToLCD(" 10.8V  14.6V   ");
 8001b34:	4838      	ldr	r0, [pc, #224]	; (8001c18 <MenuSettingsBatteryType_Enter+0xf4>)
 8001b36:	f7ff ffbd 	bl	8001ab4 <PrintToLCD>
		SettingsData.LowVoltage = 1080;
 8001b3a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001b40:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1460;
 8001b42:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001b46:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 1)
 8001b48:	f994 3000 	ldrsb.w	r3, [r4]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10d      	bne.n	8001b6c <MenuSettingsBatteryType_Enter+0x48>
		lcd_set_xy(0,0);
 8001b50:	2100      	movs	r1, #0
 8001b52:	4608      	mov	r0, r1
 8001b54:	f7ff ff2e 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("  3.0V   4.2V   ");
 8001b58:	4831      	ldr	r0, [pc, #196]	; (8001c20 <MenuSettingsBatteryType_Enter+0xfc>)
 8001b5a:	f7ff ffab 	bl	8001ab4 <PrintToLCD>
		SettingsData.LowVoltage = 300;
 8001b5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b62:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001b64:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 420;
 8001b66:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001b6a:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 2)
 8001b6c:	f994 3000 	ldrsb.w	r3, [r4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d10d      	bne.n	8001b90 <MenuSettingsBatteryType_Enter+0x6c>
		lcd_set_xy(0,0);
 8001b74:	2100      	movs	r1, #0
 8001b76:	4608      	mov	r0, r1
 8001b78:	f7ff ff1c 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("  2.8V   3.7V   ");
 8001b7c:	4829      	ldr	r0, [pc, #164]	; (8001c24 <MenuSettingsBatteryType_Enter+0x100>)
 8001b7e:	f7ff ff99 	bl	8001ab4 <PrintToLCD>
		SettingsData.LowVoltage = 280;
 8001b82:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001b88:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 370;
 8001b8a:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001b8e:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 3)
 8001b90:	f994 3000 	ldrsb.w	r3, [r4]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d10c      	bne.n	8001bb2 <MenuSettingsBatteryType_Enter+0x8e>
		lcd_set_xy(0,0);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4608      	mov	r0, r1
 8001b9c:	f7ff ff0a 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("  1.6V   2.8V   ");
 8001ba0:	4821      	ldr	r0, [pc, #132]	; (8001c28 <MenuSettingsBatteryType_Enter+0x104>)
 8001ba2:	f7ff ff87 	bl	8001ab4 <PrintToLCD>
		SettingsData.LowVoltage = 160;
 8001ba6:	22a0      	movs	r2, #160	; 0xa0
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001baa:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 280;
 8001bac:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001bb0:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 4)
 8001bb2:	f994 3000 	ldrsb.w	r3, [r4]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d10d      	bne.n	8001bd6 <MenuSettingsBatteryType_Enter+0xb2>
		lcd_set_xy(0,0);
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	f7ff fef9 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("   8V  13.6V    ");
 8001bc2:	481a      	ldr	r0, [pc, #104]	; (8001c2c <MenuSettingsBatteryType_Enter+0x108>)
 8001bc4:	f7ff ff76 	bl	8001ab4 <PrintToLCD>
		SettingsData.LowVoltage = 800;
 8001bc8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001bce:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1360;
 8001bd0:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8001bd4:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 5)
 8001bd6:	f994 3000 	ldrsb.w	r3, [r4]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d10c      	bne.n	8001bf8 <MenuSettingsBatteryType_Enter+0xd4>
		lcd_set_xy(0,0);
 8001bde:	2100      	movs	r1, #0
 8001be0:	4608      	mov	r0, r1
 8001be2:	f7ff fee7 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("  1V    20V     ");
 8001be6:	4812      	ldr	r0, [pc, #72]	; (8001c30 <MenuSettingsBatteryType_Enter+0x10c>)
 8001be8:	f7ff ff64 	bl	8001ab4 <PrintToLCD>
		SettingsData.LowVoltage = 100;
 8001bec:	2264      	movs	r2, #100	; 0x64
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001bf0:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 2000;
 8001bf2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bf6:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 6)
 8001bf8:	f994 3000 	ldrsb.w	r3, [r4]
 8001bfc:	2b06      	cmp	r3, #6
		CountShowBT = 0;
 8001bfe:	bf04      	itt	eq
 8001c00:	2300      	moveq	r3, #0
 8001c02:	7023      	strbeq	r3, [r4, #0]
	SettingsWriteToFlash_CRC();
 8001c04:	f7fe fee6 	bl	80009d4 <SettingsWriteToFlash_CRC>
}
 8001c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay_ms(600);
 8001c0c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001c10:	f7ff ba12 	b.w	8001038 <delay_ms>
 8001c14:	2000078f 	.word	0x2000078f
 8001c18:	08005e88 	.word	0x08005e88
 8001c1c:	20000154 	.word	0x20000154
 8001c20:	08005e99 	.word	0x08005e99
 8001c24:	08005eaa 	.word	0x08005eaa
 8001c28:	08005ebb 	.word	0x08005ebb
 8001c2c:	08005ecc 	.word	0x08005ecc
 8001c30:	08005edd 	.word	0x08005edd

08001c34 <MenuSettingsWriteToFlash_Enter>:

void MenuSettingsWriteToFlash_Enter(Key_Pressed_t key)
{
	SettingsWriteToFlash_CRC();
 8001c34:	f7fe bece 	b.w	80009d4 <SettingsWriteToFlash_CRC>

08001c38 <MenuOption_Enter>:
	}

}

void MenuOption_Enter(Key_Pressed_t key)
{
 8001c38:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	2007      	movs	r0, #7
 8001c3e:	f7ff feb9 	bl	80019b4 <lcd_set_xy>
	lcd_send(255,DATA);
 8001c42:	2101      	movs	r1, #1
 8001c44:	20ff      	movs	r0, #255	; 0xff
 8001c46:	f7ff fdf5 	bl	8001834 <lcd_send>
	SettingsWriteToFlash_CRC();
 8001c4a:	f7fe fec3 	bl	80009d4 <SettingsWriteToFlash_CRC>
	SelectedOptionValue = SettingsData.Option1;
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <MenuOption_Enter+0x28>)
	delay_ms(200);
 8001c50:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue = SettingsData.Option1;
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <MenuOption_Enter+0x2c>)
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001c5c:	f7ff b9ec 	b.w	8001038 <delay_ms>
 8001c60:	20000154 	.word	0x20000154
 8001c64:	20000a1c 	.word	0x20000a1c

08001c68 <MenuOption_Enter1>:

void MenuOption_Enter1(Key_Pressed_t key)
{
 8001c68:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2007      	movs	r0, #7
 8001c6e:	f7ff fea1 	bl	80019b4 <lcd_set_xy>
	lcd_send(255,DATA);
 8001c72:	2101      	movs	r1, #1
 8001c74:	20ff      	movs	r0, #255	; 0xff
 8001c76:	f7ff fddd 	bl	8001834 <lcd_send>
	SettingsWriteToFlash_CRC();
 8001c7a:	f7fe feab 	bl	80009d4 <SettingsWriteToFlash_CRC>
	SelectedOptionValue1 = SettingsData.Option2;
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <MenuOption_Enter1+0x28>)
	delay_ms(200);
 8001c80:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue1 = SettingsData.Option2;
 8001c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <MenuOption_Enter1+0x2c>)
 8001c86:	601a      	str	r2, [r3, #0]
}
 8001c88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001c8c:	f7ff b9d4 	b.w	8001038 <delay_ms>
 8001c90:	20000154 	.word	0x20000154
 8001c94:	20000a14 	.word	0x20000a14

08001c98 <Generic_Write>:
	if (Text) PrintToLCD_xy(Text,0,0);
 8001c98:	b118      	cbz	r0, 8001ca2 <Generic_Write+0xa>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	f7ff bf0c 	b.w	8001aba <PrintToLCD_xy>
}
 8001ca2:	4770      	bx	lr

08001ca4 <MenuDischarge_Enter>:
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001ca4:	f649 23af 	movw	r3, #39599	; 0x9aaf
{
 8001ca8:	b510      	push	{r4, lr}
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001caa:	4c0e      	ldr	r4, [pc, #56]	; (8001ce4 <MenuDischarge_Enter+0x40>)
{
 8001cac:	b090      	sub	sp, #64	; 0x40
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001cae:	6822      	ldr	r2, [r4, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d915      	bls.n	8001ce0 <MenuDischarge_Enter+0x3c>
		ClockStringNoSec(DischargeTimeSec,s_clock);
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MenuDischarge_Enter+0x44>)
 8001cb6:	a90b      	add	r1, sp, #44	; 0x2c
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	f7ff fc73 	bl	80015a4 <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 8001cbe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001cc2:	6820      	ldr	r0, [r4, #0]
 8001cc4:	a901      	add	r1, sp, #4
 8001cc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cca:	f7ff fb0d 	bl	80012e8 <itoaP>
 8001cce:	4907      	ldr	r1, [pc, #28]	; (8001cec <MenuDischarge_Enter+0x48>)
 8001cd0:	ab06      	add	r3, sp, #24
 8001cd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8001cd4:	f7ff fbd0 	bl	8001478 <Merge3Strings>
		WriteInLOGc(strout,DISCHARGE_l);
 8001cd8:	2102      	movs	r1, #2
 8001cda:	a806      	add	r0, sp, #24
 8001cdc:	f7ff f8ac 	bl	8000e38 <WriteInLOGc>
}
 8001ce0:	b010      	add	sp, #64	; 0x40
 8001ce2:	bd10      	pop	{r4, pc}
 8001ce4:	2000077c 	.word	0x2000077c
 8001ce8:	20000794 	.word	0x20000794
 8001cec:	08005eee 	.word	0x08005eee

08001cf0 <MenuCharge_Enter>:
{
 8001cf0:	b510      	push	{r4, lr}
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001cf2:	4c16      	ldr	r4, [pc, #88]	; (8001d4c <MenuCharge_Enter+0x5c>)
 8001cf4:	4816      	ldr	r0, [pc, #88]	; (8001d50 <MenuCharge_Enter+0x60>)
{
 8001cf6:	b090      	sub	sp, #64	; 0x40
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001cf8:	f003 faa6 	bl	8005248 <printToBufferWithoutEndUART1>
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6821      	ldr	r1, [r4, #0]
 8001d00:	4814      	ldr	r0, [pc, #80]	; (8001d54 <MenuCharge_Enter+0x64>)
 8001d02:	f003 fadf 	bl	80052c4 <printToBufferUART1D>
	if (BatteryCapacityCharge/3600>10)
 8001d06:	f649 23af 	movw	r3, #39599	; 0x9aaf
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d91b      	bls.n	8001d48 <MenuCharge_Enter+0x58>
		ClockStringNoSec(ChargeTimeSec,s_clock);
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MenuCharge_Enter+0x68>)
 8001d12:	a90b      	add	r1, sp, #44	; 0x2c
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	f7ff fc45 	bl	80015a4 <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityCharge/3600,str),"mAh",s_clock,strout);
 8001d1a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d1e:	6820      	ldr	r0, [r4, #0]
 8001d20:	a901      	add	r1, sp, #4
 8001d22:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d26:	f7ff fadf 	bl	80012e8 <itoaP>
 8001d2a:	ab06      	add	r3, sp, #24
 8001d2c:	aa0b      	add	r2, sp, #44	; 0x2c
 8001d2e:	490b      	ldr	r1, [pc, #44]	; (8001d5c <MenuCharge_Enter+0x6c>)
 8001d30:	f7ff fba2 	bl	8001478 <Merge3Strings>
		WriteInLOGc(strout,CHARGE_H);
 8001d34:	2101      	movs	r1, #1
 8001d36:	a806      	add	r0, sp, #24
 8001d38:	f7ff f87e 	bl	8000e38 <WriteInLOGc>
		logDebug(strout);
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <MenuCharge_Enter+0x60>)
 8001d3e:	f003 fa83 	bl	8005248 <printToBufferWithoutEndUART1>
 8001d42:	a806      	add	r0, sp, #24
 8001d44:	f003 fa1a 	bl	800517c <printToBufferUART1>
}
 8001d48:	b010      	add	sp, #64	; 0x40
 8001d4a:	bd10      	pop	{r4, pc}
 8001d4c:	20000778 	.word	0x20000778
 8001d50:	08005908 	.word	0x08005908
 8001d54:	08005ef2 	.word	0x08005ef2
 8001d58:	20000788 	.word	0x20000788
 8001d5c:	08005eee 	.word	0x08005eee

08001d60 <SelectedOption.part.0>:
void SelectedOption(void)
 8001d60:	b508      	push	{r3, lr}
		lcd_set_xy(7,1);
 8001d62:	2101      	movs	r1, #1
 8001d64:	2007      	movs	r0, #7
 8001d66:	f7ff fe25 	bl	80019b4 <lcd_set_xy>
}
 8001d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcd_send(255,DATA);
 8001d6e:	2101      	movs	r1, #1
 8001d70:	20ff      	movs	r0, #255	; 0xff
 8001d72:	f7ff bd5f 	b.w	8001834 <lcd_send>
	...

08001d78 <LL_ADC_SetChannelSamplingTime.constprop.0>:
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	fa91 f1a1 	rbit	r1, r1
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001d82:	fab1 f381 	clz	r3, r1
 8001d86:	4c10      	ldr	r4, [pc, #64]	; (8001dc8 <LL_ADC_SetChannelSamplingTime.constprop.0+0x50>)
 8001d88:	f000 7100 	and.w	r1, r0, #33554432	; 0x2000000
 8001d8c:	40d9      	lsrs	r1, r3
 8001d8e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
  
  MODIFY_REG(*preg,
 8001d92:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8001d96:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 8001d9a:	fa92 f3a2 	rbit	r3, r2
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	fa92 f2a2 	rbit	r2, r2
 8001da6:	2607      	movs	r6, #7
 8001da8:	fab2 f282 	clz	r2, r2
 8001dac:	fa20 f303 	lsr.w	r3, r0, r3
 8001db0:	fa06 f303 	lsl.w	r3, r6, r3
 8001db4:	40d0      	lsrs	r0, r2
 8001db6:	ea25 0303 	bic.w	r3, r5, r3
 8001dba:	fa06 f000 	lsl.w	r0, r6, r0
 8001dbe:	4318      	orrs	r0, r3
 8001dc0:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
 8001dc6:	bf00      	nop
 8001dc8:	4001240c 	.word	0x4001240c

08001dcc <LL_ADC_REG_SetSequencerRanks.constprop.0>:
 8001dcc:	f44f 7340 	mov.w	r3, #768	; 0x300
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
 8001dd0:	b530      	push	{r4, r5, lr}
 8001dd2:	fa93 f3a3 	rbit	r3, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001dd6:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 8001dda:	241f      	movs	r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001ddc:	4d08      	ldr	r5, [pc, #32]	; (8001e00 <LL_ADC_REG_SetSequencerRanks.constprop.0+0x34>)
 8001dde:	f400 7240 	and.w	r2, r0, #768	; 0x300
 8001de2:	40da      	lsrs	r2, r3
  MODIFY_REG(*preg,
 8001de4:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8001de8:	f000 001f 	and.w	r0, r0, #31
 8001dec:	4084      	lsls	r4, r0
 8001dee:	f001 011f 	and.w	r1, r1, #31
 8001df2:	ea23 0304 	bic.w	r3, r3, r4
 8001df6:	4081      	lsls	r1, r0
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}
 8001dfe:	bd30      	pop	{r4, r5, pc}
 8001e00:	4001242c 	.word	0x4001242c

08001e04 <NVIC_EncodePriority.constprop.0>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001e04:	2000      	movs	r0, #0
 8001e06:	4770      	bx	lr

08001e08 <MenuLoad>:
	EnterInMenu_Status = 1;
 8001e08:	2201      	movs	r2, #1
	lcd_set_xy(0,0);
 8001e0a:	2100      	movs	r1, #0
{
 8001e0c:	b510      	push	{r4, lr}
	EnterInMenu_Status = 1;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <MenuLoad+0x84>)
 8001e10:	4c1f      	ldr	r4, [pc, #124]	; (8001e90 <MenuLoad+0x88>)
 8001e12:	701a      	strb	r2, [r3, #0]
	if (key == KEY_NEXT)
 8001e14:	2802      	cmp	r0, #2
	lcd_set_xy(0,0);
 8001e16:	4608      	mov	r0, r1
		if (On_off == 0)
 8001e18:	bf08      	it	eq
 8001e1a:	7823      	ldrbeq	r3, [r4, #0]
	lcd_set_xy(0,0);
 8001e1c:	f7ff fdca 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <MenuLoad+0x8c>)
 8001e22:	2102      	movs	r1, #2
 8001e24:	8818      	ldrh	r0, [r3, #0]
 8001e26:	b280      	uxth	r0, r0
 8001e28:	f7ff fa9a 	bl	8001360 <itoa_koma>
 8001e2c:	f7ff fe42 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("V ");
 8001e30:	4819      	ldr	r0, [pc, #100]	; (8001e98 <MenuLoad+0x90>)
 8001e32:	f7ff fe3f 	bl	8001ab4 <PrintToLCD>
	PrintToLCD(itoa(Current));
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <MenuLoad+0x94>)
 8001e38:	8818      	ldrh	r0, [r3, #0]
 8001e3a:	b200      	sxth	r0, r0
 8001e3c:	f7ff fa18 	bl	8001270 <itoa>
 8001e40:	f7ff fe38 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("mA    ");
 8001e44:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <MenuLoad+0x98>)
 8001e46:	f7ff fe35 	bl	8001ab4 <PrintToLCD>
	if (On_off ==0)
 8001e4a:	7823      	ldrb	r3, [r4, #0]
			lcd_set_xy(6,1);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2006      	movs	r0, #6
 8001e50:	4c14      	ldr	r4, [pc, #80]	; (8001ea4 <MenuLoad+0x9c>)
	if (On_off ==0)
 8001e52:	b97b      	cbnz	r3, 8001e74 <MenuLoad+0x6c>
			lcd_set_xy(6,1);
 8001e54:	f7ff fdae 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(2,1);
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f7ff fdd2 	bl	8001a04 <LcdOutbyNumber>
			LcdOutbyNumber(2,1);
 8001e60:	2101      	movs	r1, #1
 8001e62:	2002      	movs	r0, #2
					LcdOutbyNumber(3,1);
 8001e64:	f7ff fdce 	bl	8001a04 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8001e68:	7823      	ldrb	r3, [r4, #0]
 8001e6a:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8001e6c:	bf84      	itt	hi
 8001e6e:	2300      	movhi	r3, #0
 8001e70:	7023      	strbhi	r3, [r4, #0]
}
 8001e72:	bd10      	pop	{r4, pc}
			if (Blink_message_counter<=5)
 8001e74:	7823      	ldrb	r3, [r4, #0]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d9ec      	bls.n	8001e54 <MenuLoad+0x4c>
					lcd_set_xy(6,1);
 8001e7a:	f7ff fd9b 	bl	80019b4 <lcd_set_xy>
					LcdOutbyNumber(3,1);
 8001e7e:	2101      	movs	r1, #1
 8001e80:	2003      	movs	r0, #3
 8001e82:	f7ff fdbf 	bl	8001a04 <LcdOutbyNumber>
					LcdOutbyNumber(3,1);
 8001e86:	2101      	movs	r1, #1
 8001e88:	2003      	movs	r0, #3
 8001e8a:	e7eb      	b.n	8001e64 <MenuLoad+0x5c>
 8001e8c:	2000079c 	.word	0x2000079c
 8001e90:	2000079e 	.word	0x2000079e
 8001e94:	2000086c 	.word	0x2000086c
 8001e98:	08005efa 	.word	0x08005efa
 8001e9c:	20000856 	.word	0x20000856
 8001ea0:	08005efd 	.word	0x08005efd
 8001ea4:	20000785 	.word	0x20000785

08001ea8 <MenuTraining_WriteInLOG>:
	s[1] = '\0';
 8001ea8:	2300      	movs	r3, #0
{
 8001eaa:	b510      	push	{r4, lr}
 8001eac:	b096      	sub	sp, #88	; 0x58
 8001eae:	4604      	mov	r4, r0
 8001eb0:	4608      	mov	r0, r1
	ClockStringNoSec(Time,s_clock);
 8001eb2:	a911      	add	r1, sp, #68	; 0x44
	s[0] = c;
 8001eb4:	f88d 2004 	strb.w	r2, [sp, #4]
	s[1] = '\0';
 8001eb8:	f88d 3005 	strb.w	r3, [sp, #5]
	ClockStringNoSec(Time,s_clock);
 8001ebc:	f7ff fb72 	bl	80015a4 <ClockStringNoSec>
	Merge3Strings(itoaP(Capacity/3600,str),"mAh",s_clock,strout);
 8001ec0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001ec4:	a902      	add	r1, sp, #8
 8001ec6:	fbb4 f0f0 	udiv	r0, r4, r0
 8001eca:	f7ff fa0d 	bl	80012e8 <itoaP>
 8001ece:	ab07      	add	r3, sp, #28
 8001ed0:	aa11      	add	r2, sp, #68	; 0x44
 8001ed2:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <MenuTraining_WriteInLOG+0x48>)
 8001ed4:	f7ff fad0 	bl	8001478 <Merge3Strings>
	Merge2Strings(s,strout,strout1);
 8001ed8:	aa0c      	add	r2, sp, #48	; 0x30
 8001eda:	a907      	add	r1, sp, #28
 8001edc:	a801      	add	r0, sp, #4
 8001ede:	f7ff fab5 	bl	800144c <Merge2Strings>
	WriteInLOGc(strout1,TRAINING_);
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	a80c      	add	r0, sp, #48	; 0x30
 8001ee6:	f7fe ffa7 	bl	8000e38 <WriteInLOGc>
}
 8001eea:	b016      	add	sp, #88	; 0x58
 8001eec:	bd10      	pop	{r4, pc}
 8001eee:	bf00      	nop
 8001ef0:	08005eee 	.word	0x08005eee

08001ef4 <MenuLog>:
	if (key == KEY_NEXT)
 8001ef4:	2802      	cmp	r0, #2
{
 8001ef6:	b538      	push	{r3, r4, r5, lr}
 8001ef8:	4c1e      	ldr	r4, [pc, #120]	; (8001f74 <MenuLog+0x80>)
 8001efa:	4d1f      	ldr	r5, [pc, #124]	; (8001f78 <MenuLog+0x84>)
	if (key == KEY_NEXT)
 8001efc:	d12a      	bne.n	8001f54 <MenuLog+0x60>
		i_LogItems++;
 8001efe:	8823      	ldrh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001f00:	682a      	ldr	r2, [r5, #0]
		i_LogItems++;
 8001f02:	3301      	adds	r3, #1
 8001f04:	b21b      	sxth	r3, r3
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001f06:	4293      	cmp	r3, r2
		i_LogItems++;
 8001f08:	8023      	strh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001f0a:	d301      	bcc.n	8001f10 <MenuLog+0x1c>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	8023      	strh	r3, [r4, #0]
	lcd_set_xy(0,0);
 8001f10:	2100      	movs	r1, #0
 8001f12:	4608      	mov	r0, r1
 8001f14:	f7ff fd4e 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(LoggingData.Records[LoggingData.RecordsQuantity - i_LogItems-1]);
 8001f18:	6828      	ldr	r0, [r5, #0]
 8001f1a:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001f1e:	3801      	subs	r0, #1
 8001f20:	1ac0      	subs	r0, r0, r3
 8001f22:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8001f26:	3004      	adds	r0, #4
 8001f28:	4428      	add	r0, r5
 8001f2a:	f7ff fdc3 	bl	8001ab4 <PrintToLCD>
	logDebugD("i_LogItems: ",i_LogItems,0);
 8001f2e:	4813      	ldr	r0, [pc, #76]	; (8001f7c <MenuLog+0x88>)
 8001f30:	f003 f98a 	bl	8005248 <printToBufferWithoutEndUART1>
 8001f34:	f9b4 1000 	ldrsh.w	r1, [r4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4811      	ldr	r0, [pc, #68]	; (8001f80 <MenuLog+0x8c>)
 8001f3c:	f003 f9c2 	bl	80052c4 <printToBufferUART1D>
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8001f40:	480e      	ldr	r0, [pc, #56]	; (8001f7c <MenuLog+0x88>)
 8001f42:	f003 f981 	bl	8005248 <printToBufferWithoutEndUART1>
 8001f46:	6829      	ldr	r1, [r5, #0]
 8001f48:	2200      	movs	r2, #0
}
 8001f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <MenuLog+0x90>)
 8001f50:	f003 b9b8 	b.w	80052c4 <printToBufferUART1D>
	if (key == KEY_BACK)
 8001f54:	2801      	cmp	r0, #1
 8001f56:	d1db      	bne.n	8001f10 <MenuLog+0x1c>
		i_LogItems--;
 8001f58:	8823      	ldrh	r3, [r4, #0]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8001f5e:	2b00      	cmp	r3, #0
		i_LogItems--;
 8001f60:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8001f62:	dad5      	bge.n	8001f10 <MenuLog+0x1c>
 8001f64:	682b      	ldr	r3, [r5, #0]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=0;
 8001f6a:	2b00      	cmp	r3, #0
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8001f6c:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=0;
 8001f6e:	dbcd      	blt.n	8001f0c <MenuLog+0x18>
 8001f70:	e7ce      	b.n	8001f10 <MenuLog+0x1c>
 8001f72:	bf00      	nop
 8001f74:	200007de 	.word	0x200007de
 8001f78:	20000878 	.word	0x20000878
 8001f7c:	08005908 	.word	0x08005908
 8001f80:	08005f04 	.word	0x08005f04
 8001f84:	08005f11 	.word	0x08005f11

08001f88 <MenuCalibration_CURRENT_Out_to_0>:
	lcd_set_xy(0,0);
 8001f88:	2100      	movs	r1, #0
{
 8001f8a:	b510      	push	{r4, lr}
 8001f8c:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8001f8e:	4608      	mov	r0, r1
 8001f90:	f7ff fd10 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <MenuCalibration_CURRENT_Out_to_0+0x38>)
 8001f96:	8818      	ldrh	r0, [r3, #0]
 8001f98:	b200      	sxth	r0, r0
 8001f9a:	f7ff f969 	bl	8001270 <itoa>
 8001f9e:	f7ff fd89 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 8001fa2:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <MenuCalibration_CURRENT_Out_to_0+0x3c>)
 8001fa4:	f7ff fd86 	bl	8001ab4 <PrintToLCD>
	if (key == KEY_NEXT)
 8001fa8:	2c02      	cmp	r4, #2
 8001faa:	d108      	bne.n	8001fbe <MenuCalibration_CURRENT_Out_to_0+0x36>
}
 8001fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent = Current_x50;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <MenuCalibration_CURRENT_Out_to_0+0x40>)
 8001fb2:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <MenuCalibration_CURRENT_Out_to_0+0x44>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	6093      	str	r3, [r2, #8]
		CalibrationWriteToFlash_CRC();
 8001fba:	f7fe bcd5 	b.w	8000968 <CalibrationWriteToFlash_CRC>
}
 8001fbe:	bd10      	pop	{r4, pc}
 8001fc0:	20000856 	.word	0x20000856
 8001fc4:	08005f24 	.word	0x08005f24
 8001fc8:	200007e8 	.word	0x200007e8
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <MenuCalibration_CURRENT_Load_to_0>:
	lcd_set_xy(0,0);
 8001fd0:	2100      	movs	r1, #0
{
 8001fd2:	b510      	push	{r4, lr}
 8001fd4:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	f7ff fcec 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(	itoa(Current));
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <MenuCalibration_CURRENT_Load_to_0+0x38>)
 8001fde:	8818      	ldrh	r0, [r3, #0]
 8001fe0:	b200      	sxth	r0, r0
 8001fe2:	f7ff f945 	bl	8001270 <itoa>
 8001fe6:	f7ff fd65 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 8001fea:	4808      	ldr	r0, [pc, #32]	; (800200c <MenuCalibration_CURRENT_Load_to_0+0x3c>)
 8001fec:	f7ff fd62 	bl	8001ab4 <PrintToLCD>
	if (key == KEY_NEXT)
 8001ff0:	2c02      	cmp	r4, #2
 8001ff2:	d108      	bne.n	8002006 <MenuCalibration_CURRENT_Load_to_0+0x36>
}
 8001ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent1 = Current_x1;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <MenuCalibration_CURRENT_Load_to_0+0x40>)
 8001ffa:	4a06      	ldr	r2, [pc, #24]	; (8002014 <MenuCalibration_CURRENT_Load_to_0+0x44>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	6113      	str	r3, [r2, #16]
		CalibrationWriteToFlash_CRC();
 8002002:	f7fe bcb1 	b.w	8000968 <CalibrationWriteToFlash_CRC>
}
 8002006:	bd10      	pop	{r4, pc}
 8002008:	20000856 	.word	0x20000856
 800200c:	08005f24 	.word	0x08005f24
 8002010:	20000858 	.word	0x20000858
 8002014:	20000004 	.word	0x20000004

08002018 <MenuCalibration_BackToFactory>:
	lcd_set_xy(0,0);
 8002018:	2100      	movs	r1, #0
{
 800201a:	b510      	push	{r4, lr}
 800201c:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 800201e:	4608      	mov	r0, r1
 8002020:	f7ff fcc8 	bl	80019b4 <lcd_set_xy>
	PrintToLCD("Factory-press >>");
 8002024:	481f      	ldr	r0, [pc, #124]	; (80020a4 <MenuCalibration_BackToFactory+0x8c>)
 8002026:	f7ff fd45 	bl	8001ab4 <PrintToLCD>
	if (key == KEY_NEXT)
 800202a:	2c02      	cmp	r4, #2
 800202c:	d130      	bne.n	8002090 <MenuCalibration_BackToFactory+0x78>
		FactoryWriteToFlash_CRC();
 800202e:	f7fe fd2b 	bl	8000a88 <FactoryWriteToFlash_CRC>
		EEpromReadStatus = ReadFromFlash();
 8002032:	f7fe fc57 	bl	80008e4 <ReadFromFlash>
		lcd_set_xy(0,0);
 8002036:	2100      	movs	r1, #0
		EEpromReadStatus = ReadFromFlash();
 8002038:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 800203a:	4608      	mov	r0, r1
 800203c:	f7ff fcba 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("In Proccess ....");
 8002040:	4819      	ldr	r0, [pc, #100]	; (80020a8 <MenuCalibration_BackToFactory+0x90>)
 8002042:	f7ff fd37 	bl	8001ab4 <PrintToLCD>
		delay_ms(2000);
 8002046:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800204a:	f7fe fff5 	bl	8001038 <delay_ms>
		lcd_set_xy(0,0);
 800204e:	2100      	movs	r1, #0
 8002050:	4608      	mov	r0, r1
 8002052:	f7ff fcaf 	bl	80019b4 <lcd_set_xy>
		if (EEpromReadStatus == 1)
 8002056:	2c01      	cmp	r4, #1
 8002058:	d11b      	bne.n	8002092 <MenuCalibration_BackToFactory+0x7a>
			PrintToLCD("Factory are OK  ");
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <MenuCalibration_BackToFactory+0x94>)
 800205c:	f7ff fd2a 	bl	8001ab4 <PrintToLCD>
			WriteInLOG("Factory are OK");
 8002060:	4813      	ldr	r0, [pc, #76]	; (80020b0 <MenuCalibration_BackToFactory+0x98>)
 8002062:	f7fe fe23 	bl	8000cac <WriteInLOG>
			delay_ms(2000);
 8002066:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800206a:	f7fe ffe5 	bl	8001038 <delay_ms>
		    BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MenuCalibration_BackToFactory+0x9c>)
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MenuCalibration_BackToFactory+0xa0>)
 8002074:	601a      	str	r2, [r3, #0]
		    ChargeDurationSec = SettingsData.ChargeTime*3600;
 8002076:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <MenuCalibration_BackToFactory+0xa4>)
 800207c:	6919      	ldr	r1, [r3, #16]
 800207e:	434a      	muls	r2, r1
 8002080:	490f      	ldr	r1, [pc, #60]	; (80020c0 <MenuCalibration_BackToFactory+0xa8>)
 8002082:	600a      	str	r2, [r1, #0]
		    SelectedOptionValue = SettingsData.Option1;
 8002084:	6899      	ldr	r1, [r3, #8]
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <MenuCalibration_BackToFactory+0xac>)
 8002088:	6011      	str	r1, [r2, #0]
		    SelectedOptionValue1 = SettingsData.Option2;
 800208a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MenuCalibration_BackToFactory+0xb0>)
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	bd10      	pop	{r4, pc}
			PrintToLCD("EEprom read FAIL");
 8002092:	480e      	ldr	r0, [pc, #56]	; (80020cc <MenuCalibration_BackToFactory+0xb4>)
 8002094:	f7ff fd0e 	bl	8001ab4 <PrintToLCD>
}
 8002098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			delay_ms(4000);
 800209c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80020a0:	f7fe bfca 	b.w	8001038 <delay_ms>
 80020a4:	08005f33 	.word	0x08005f33
 80020a8:	08005f44 	.word	0x08005f44
 80020ac:	08005f55 	.word	0x08005f55
 80020b0:	08005f66 	.word	0x08005f66
 80020b4:	200000f4 	.word	0x200000f4
 80020b8:	20000780 	.word	0x20000780
 80020bc:	20000154 	.word	0x20000154
 80020c0:	20000a18 	.word	0x20000a18
 80020c4:	20000a1c 	.word	0x20000a1c
 80020c8:	20000a14 	.word	0x20000a14
 80020cc:	08005f75 	.word	0x08005f75

080020d0 <MenuSettingsChargeTime>:
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 80020d0:	2802      	cmp	r0, #2
{
 80020d2:	b510      	push	{r4, lr}
 80020d4:	4c0e      	ldr	r4, [pc, #56]	; (8002110 <MenuSettingsChargeTime+0x40>)
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 80020d6:	d115      	bne.n	8002104 <MenuSettingsChargeTime+0x34>
 80020d8:	6923      	ldr	r3, [r4, #16]
 80020da:	3301      	adds	r3, #1
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 80020dc:	6123      	str	r3, [r4, #16]
	lcd_set_xy(0,0);
 80020de:	2100      	movs	r1, #0
 80020e0:	4608      	mov	r0, r1
 80020e2:	f7ff fc67 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeTime));
 80020e6:	6920      	ldr	r0, [r4, #16]
 80020e8:	f7ff f8c2 	bl	8001270 <itoa>
 80020ec:	f7ff fce2 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("h   ");
 80020f0:	4808      	ldr	r0, [pc, #32]	; (8002114 <MenuSettingsChargeTime+0x44>)
 80020f2:	f7ff fcdf 	bl	8001ab4 <PrintToLCD>
    ChargeDurationSec = SettingsData.ChargeTime*3600;
 80020f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80020fa:	6922      	ldr	r2, [r4, #16]
 80020fc:	4353      	muls	r3, r2
 80020fe:	4a06      	ldr	r2, [pc, #24]	; (8002118 <MenuSettingsChargeTime+0x48>)
 8002100:	6013      	str	r3, [r2, #0]
}
 8002102:	bd10      	pop	{r4, pc}
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 8002104:	2801      	cmp	r0, #1
 8002106:	d1ea      	bne.n	80020de <MenuSettingsChargeTime+0xe>
 8002108:	6923      	ldr	r3, [r4, #16]
 800210a:	3b01      	subs	r3, #1
 800210c:	e7e6      	b.n	80020dc <MenuSettingsChargeTime+0xc>
 800210e:	bf00      	nop
 8002110:	20000154 	.word	0x20000154
 8002114:	08005f86 	.word	0x08005f86
 8002118:	20000a18 	.word	0x20000a18

0800211c <MenuSettingsBatteryType>:
{
 800211c:	b510      	push	{r4, lr}
 800211e:	4c33      	ldr	r4, [pc, #204]	; (80021ec <MenuSettingsBatteryType+0xd0>)
	if (key == KEY_NEXT)
 8002120:	2802      	cmp	r0, #2
 8002122:	f994 3000 	ldrsb.w	r3, [r4]
 8002126:	d10d      	bne.n	8002144 <MenuSettingsBatteryType+0x28>
		CountShowBT++;
 8002128:	3301      	adds	r3, #1
 800212a:	b25b      	sxtb	r3, r3
		if (CountShowBT==MAXITEM_BT) CountShowBT=0;
 800212c:	2b07      	cmp	r3, #7
 800212e:	d10f      	bne.n	8002150 <MenuSettingsBatteryType+0x34>
 8002130:	2300      	movs	r3, #0
 8002132:	7023      	strb	r3, [r4, #0]
		lcd_set_xy(0,0);
 8002134:	2100      	movs	r1, #0
 8002136:	4608      	mov	r0, r1
 8002138:	f7ff fc3c 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("12V Pb Battery  ");
 800213c:	482c      	ldr	r0, [pc, #176]	; (80021f0 <MenuSettingsBatteryType+0xd4>)
 800213e:	f7ff fcb9 	bl	8001ab4 <PrintToLCD>
 8002142:	e00a      	b.n	800215a <MenuSettingsBatteryType+0x3e>
	if (key == KEY_BACK)
 8002144:	2801      	cmp	r0, #1
 8002146:	d104      	bne.n	8002152 <MenuSettingsBatteryType+0x36>
		CountShowBT--;
 8002148:	3b01      	subs	r3, #1
 800214a:	b25b      	sxtb	r3, r3
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 800214c:	2b00      	cmp	r3, #0
 800214e:	db10      	blt.n	8002172 <MenuSettingsBatteryType+0x56>
		CountShowBT++;
 8002150:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 0)
 8002152:	f994 3000 	ldrsb.w	r3, [r4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0ec      	beq.n	8002134 <MenuSettingsBatteryType+0x18>
	if(CountShowBT == 1)
 800215a:	f994 3000 	ldrsb.w	r3, [r4]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d109      	bne.n	8002176 <MenuSettingsBatteryType+0x5a>
		lcd_set_xy(0,0);
 8002162:	2100      	movs	r1, #0
 8002164:	4608      	mov	r0, r1
 8002166:	f7ff fc25 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("Li ion  Battery  ");
 800216a:	4822      	ldr	r0, [pc, #136]	; (80021f4 <MenuSettingsBatteryType+0xd8>)
 800216c:	f7ff fca2 	bl	8001ab4 <PrintToLCD>
 8002170:	e001      	b.n	8002176 <MenuSettingsBatteryType+0x5a>
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 8002172:	2306      	movs	r3, #6
 8002174:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 2)
 8002176:	f994 3000 	ldrsb.w	r3, [r4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d106      	bne.n	800218c <MenuSettingsBatteryType+0x70>
		lcd_set_xy(0,0);
 800217e:	2100      	movs	r1, #0
 8002180:	4608      	mov	r0, r1
 8002182:	f7ff fc17 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("LiFePo4 Battery ");
 8002186:	481c      	ldr	r0, [pc, #112]	; (80021f8 <MenuSettingsBatteryType+0xdc>)
 8002188:	f7ff fc94 	bl	8001ab4 <PrintToLCD>
	if(CountShowBT == 3)
 800218c:	f994 3000 	ldrsb.w	r3, [r4]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d106      	bne.n	80021a2 <MenuSettingsBatteryType+0x86>
		lcd_set_xy(0,0);
 8002194:	2100      	movs	r1, #0
 8002196:	4608      	mov	r0, r1
 8002198:	f7ff fc0c 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("LiTo Battery   ");
 800219c:	4817      	ldr	r0, [pc, #92]	; (80021fc <MenuSettingsBatteryType+0xe0>)
 800219e:	f7ff fc89 	bl	8001ab4 <PrintToLCD>
	if(CountShowBT == 4)
 80021a2:	f994 3000 	ldrsb.w	r3, [r4]
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d106      	bne.n	80021b8 <MenuSettingsBatteryType+0x9c>
		lcd_set_xy(0,0);
 80021aa:	2100      	movs	r1, #0
 80021ac:	4608      	mov	r0, r1
 80021ae:	f7ff fc01 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("NIMh 9.6V Bat.  ");
 80021b2:	4813      	ldr	r0, [pc, #76]	; (8002200 <MenuSettingsBatteryType+0xe4>)
 80021b4:	f7ff fc7e 	bl	8001ab4 <PrintToLCD>
	if(CountShowBT == 5)
 80021b8:	f994 3000 	ldrsb.w	r3, [r4]
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d106      	bne.n	80021ce <MenuSettingsBatteryType+0xb2>
		lcd_set_xy(0,0);
 80021c0:	2100      	movs	r1, #0
 80021c2:	4608      	mov	r0, r1
 80021c4:	f7ff fbf6 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("Min 1V  MAX 20V");
 80021c8:	480e      	ldr	r0, [pc, #56]	; (8002204 <MenuSettingsBatteryType+0xe8>)
 80021ca:	f7ff fc73 	bl	8001ab4 <PrintToLCD>
	if(CountShowBT == 6)
 80021ce:	f994 3000 	ldrsb.w	r3, [r4]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d108      	bne.n	80021e8 <MenuSettingsBatteryType+0xcc>
		lcd_set_xy(0,0);
 80021d6:	2100      	movs	r1, #0
 80021d8:	4608      	mov	r0, r1
 80021da:	f7ff fbeb 	bl	80019b4 <lcd_set_xy>
}
 80021de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PrintToLCD("   OK to Exit  ");
 80021e2:	4809      	ldr	r0, [pc, #36]	; (8002208 <MenuSettingsBatteryType+0xec>)
 80021e4:	f7ff bc66 	b.w	8001ab4 <PrintToLCD>
}
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	bf00      	nop
 80021ec:	2000078f 	.word	0x2000078f
 80021f0:	08005f8b 	.word	0x08005f8b
 80021f4:	08005f9c 	.word	0x08005f9c
 80021f8:	08005fae 	.word	0x08005fae
 80021fc:	08005fbf 	.word	0x08005fbf
 8002200:	08005fcf 	.word	0x08005fcf
 8002204:	08005fe0 	.word	0x08005fe0
 8002208:	08005ff0 	.word	0x08005ff0

0800220c <MenuSettingsLowVolt>:
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 800220c:	2802      	cmp	r0, #2
{
 800220e:	b510      	push	{r4, lr}
 8002210:	4c0d      	ldr	r4, [pc, #52]	; (8002248 <MenuSettingsLowVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 8002212:	d114      	bne.n	800223e <MenuSettingsLowVolt+0x32>
 8002214:	69a3      	ldr	r3, [r4, #24]
 8002216:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 8002218:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 800221a:	2100      	movs	r1, #0
 800221c:	4608      	mov	r0, r1
 800221e:	f7ff fbc9 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002222:	230a      	movs	r3, #10
 8002224:	69a0      	ldr	r0, [r4, #24]
 8002226:	2101      	movs	r1, #1
 8002228:	fbb0 f0f3 	udiv	r0, r0, r3
 800222c:	f7ff f898 	bl	8001360 <itoa_koma>
 8002230:	f7ff fc40 	bl	8001ab4 <PrintToLCD>
}
 8002234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 8002238:	4804      	ldr	r0, [pc, #16]	; (800224c <MenuSettingsLowVolt+0x40>)
 800223a:	f7ff bc3b 	b.w	8001ab4 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 800223e:	2801      	cmp	r0, #1
 8002240:	d1eb      	bne.n	800221a <MenuSettingsLowVolt+0xe>
 8002242:	69a3      	ldr	r3, [r4, #24]
 8002244:	3b0a      	subs	r3, #10
 8002246:	e7e7      	b.n	8002218 <MenuSettingsLowVolt+0xc>
 8002248:	20000154 	.word	0x20000154
 800224c:	08005ea5 	.word	0x08005ea5

08002250 <MenuSettingsMaxVolt>:
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 8002250:	2802      	cmp	r0, #2
{
 8002252:	b510      	push	{r4, lr}
 8002254:	4c0d      	ldr	r4, [pc, #52]	; (800228c <MenuSettingsMaxVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 8002256:	d114      	bne.n	8002282 <MenuSettingsMaxVolt+0x32>
 8002258:	6a23      	ldr	r3, [r4, #32]
 800225a:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 800225c:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 800225e:	2100      	movs	r1, #0
 8002260:	4608      	mov	r0, r1
 8002262:	f7ff fba7 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002266:	230a      	movs	r3, #10
 8002268:	6a20      	ldr	r0, [r4, #32]
 800226a:	2101      	movs	r1, #1
 800226c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002270:	f7ff f876 	bl	8001360 <itoa_koma>
 8002274:	f7ff fc1e 	bl	8001ab4 <PrintToLCD>
}
 8002278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 800227c:	4804      	ldr	r0, [pc, #16]	; (8002290 <MenuSettingsMaxVolt+0x40>)
 800227e:	f7ff bc19 	b.w	8001ab4 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 8002282:	2801      	cmp	r0, #1
 8002284:	d1eb      	bne.n	800225e <MenuSettingsMaxVolt+0xe>
 8002286:	6a23      	ldr	r3, [r4, #32]
 8002288:	3b0a      	subs	r3, #10
 800228a:	e7e7      	b.n	800225c <MenuSettingsMaxVolt+0xc>
 800228c:	20000154 	.word	0x20000154
 8002290:	08005ea5 	.word	0x08005ea5

08002294 <MenuSettingsSwngChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 8002294:	2802      	cmp	r0, #2
{
 8002296:	b510      	push	{r4, lr}
 8002298:	4c0b      	ldr	r4, [pc, #44]	; (80022c8 <MenuSettingsSwngChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 800229a:	d110      	bne.n	80022be <MenuSettingsSwngChrgTime+0x2a>
 800229c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800229e:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 80022a0:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 80022a2:	2100      	movs	r1, #0
 80022a4:	4608      	mov	r0, r1
 80022a6:	f7ff fb85 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 80022aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80022ac:	f7fe ffe0 	bl	8001270 <itoa>
 80022b0:	f7ff fc00 	bl	8001ab4 <PrintToLCD>
}
 80022b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 80022b8:	4804      	ldr	r0, [pc, #16]	; (80022cc <MenuSettingsSwngChrgTime+0x38>)
 80022ba:	f7ff bbfb 	b.w	8001ab4 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 80022be:	2801      	cmp	r0, #1
 80022c0:	d1ef      	bne.n	80022a2 <MenuSettingsSwngChrgTime+0xe>
 80022c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	e7eb      	b.n	80022a0 <MenuSettingsSwngChrgTime+0xc>
 80022c8:	20000154 	.word	0x20000154
 80022cc:	08006000 	.word	0x08006000

080022d0 <MenuSettingsSwngDChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 80022d0:	2802      	cmp	r0, #2
{
 80022d2:	b510      	push	{r4, lr}
 80022d4:	4c0b      	ldr	r4, [pc, #44]	; (8002304 <MenuSettingsSwngDChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 80022d6:	d110      	bne.n	80022fa <MenuSettingsSwngDChrgTime+0x2a>
 80022d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022da:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 80022dc:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 80022de:	2100      	movs	r1, #0
 80022e0:	4608      	mov	r0, r1
 80022e2:	f7ff fb67 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 80022e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80022e8:	f7fe ffc2 	bl	8001270 <itoa>
 80022ec:	f7ff fbe2 	bl	8001ab4 <PrintToLCD>
}
 80022f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 80022f4:	4804      	ldr	r0, [pc, #16]	; (8002308 <MenuSettingsSwngDChrgTime+0x38>)
 80022f6:	f7ff bbdd 	b.w	8001ab4 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 80022fa:	2801      	cmp	r0, #1
 80022fc:	d1ef      	bne.n	80022de <MenuSettingsSwngDChrgTime+0xe>
 80022fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002300:	3b01      	subs	r3, #1
 8002302:	e7eb      	b.n	80022dc <MenuSettingsSwngDChrgTime+0xc>
 8002304:	20000154 	.word	0x20000154
 8002308:	08006000 	.word	0x08006000

0800230c <MenuSettingsChargeAddapt>:
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 800230c:	2802      	cmp	r0, #2
{
 800230e:	b538      	push	{r3, r4, r5, lr}
 8002310:	4c1a      	ldr	r4, [pc, #104]	; (800237c <MenuSettingsChargeAddapt+0x70>)
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 8002312:	d12d      	bne.n	8002370 <MenuSettingsChargeAddapt+0x64>
 8002314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002316:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 8002318:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 800231a:	2100      	movs	r1, #0
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800231c:	250a      	movs	r5, #10
	lcd_set_xy(0,0);
 800231e:	4608      	mov	r0, r1
 8002320:	f7ff fb48 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeAdapt));
 8002324:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002326:	f7fe ffa3 	bl	8001270 <itoa>
 800232a:	f7ff fbc3 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("% ");
 800232e:	4814      	ldr	r0, [pc, #80]	; (8002380 <MenuSettingsChargeAddapt+0x74>)
 8002330:	f7ff fbc0 	bl	8001ab4 <PrintToLCD>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002334:	6a20      	ldr	r0, [r4, #32]
 8002336:	2101      	movs	r1, #1
 8002338:	fbb0 f0f5 	udiv	r0, r0, r5
 800233c:	f7ff f810 	bl	8001360 <itoa_koma>
 8002340:	f7ff fbb8 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("V ");
 8002344:	480f      	ldr	r0, [pc, #60]	; (8002384 <MenuSettingsChargeAddapt+0x78>)
 8002346:	f7ff fbb5 	bl	8001ab4 <PrintToLCD>
	PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage * SettingsData.ChargeAdapt/100))/10,1));
 800234a:	2264      	movs	r2, #100	; 0x64
 800234c:	6a23      	ldr	r3, [r4, #32]
 800234e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002350:	2101      	movs	r1, #1
 8002352:	4358      	muls	r0, r3
 8002354:	fbb0 f0f2 	udiv	r0, r0, r2
 8002358:	1a18      	subs	r0, r3, r0
 800235a:	fbb0 f0f5 	udiv	r0, r0, r5
 800235e:	f7fe ffff 	bl	8001360 <itoa_koma>
 8002362:	f7ff fba7 	bl	8001ab4 <PrintToLCD>
}
 8002366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("V   ");
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <MenuSettingsChargeAddapt+0x7c>)
 800236c:	f7ff bba2 	b.w	8001ab4 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 8002370:	2801      	cmp	r0, #1
 8002372:	d1d2      	bne.n	800231a <MenuSettingsChargeAddapt+0xe>
 8002374:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002376:	3b01      	subs	r3, #1
 8002378:	e7ce      	b.n	8002318 <MenuSettingsChargeAddapt+0xc>
 800237a:	bf00      	nop
 800237c:	20000154 	.word	0x20000154
 8002380:	08006009 	.word	0x08006009
 8002384:	08005efa 	.word	0x08005efa
 8002388:	08005ea5 	.word	0x08005ea5

0800238c <SelectedOption>:
	if (SelectedOptionValue == SettingsData.Option1)
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SelectedOption+0x14>)
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SelectedOption+0x18>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d101      	bne.n	800239c <SelectedOption+0x10>
 8002398:	f7ff bce2 	b.w	8001d60 <SelectedOption.part.0>
}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000154 	.word	0x20000154
 80023a4:	20000a1c 	.word	0x20000a1c

080023a8 <SelectedOption1>:
	if (SelectedOptionValue1 == SettingsData.Option2)
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <SelectedOption1+0x14>)
 80023aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <SelectedOption1+0x18>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d101      	bne.n	80023b8 <SelectedOption1+0x10>
 80023b4:	f7ff bcd4 	b.w	8001d60 <SelectedOption.part.0>
}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000154 	.word	0x20000154
 80023c0:	20000a14 	.word	0x20000a14

080023c4 <MenuSettingsSaveMenuPosWhenOFF>:
	lcd_set_xy(0,0);
 80023c4:	2100      	movs	r1, #0
{
 80023c6:	b510      	push	{r4, lr}
 80023c8:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80023ca:	4608      	mov	r0, r1
 80023cc:	f7ff faf2 	bl	80019b4 <lcd_set_xy>
	if (key == KEY_NEXT)
 80023d0:	2c02      	cmp	r4, #2
 80023d2:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MenuSettingsSaveMenuPosWhenOFF+0x8c>)
 80023d4:	d10d      	bne.n	80023f2 <MenuSettingsSaveMenuPosWhenOFF+0x2e>
		SettingsData.Option1++;
 80023d6:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 80023d8:	2a07      	cmp	r2, #7
		SettingsData.Option1++;
 80023da:	f102 0101 	add.w	r1, r2, #1
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 80023de:	d127      	bne.n	8002430 <MenuSettingsSaveMenuPosWhenOFF+0x6c>
 80023e0:	2201      	movs	r2, #1
 80023e2:	609a      	str	r2, [r3, #8]
			PrintToLCD("PowerSupply     ");
 80023e4:	481b      	ldr	r0, [pc, #108]	; (8002454 <MenuSettingsSaveMenuPosWhenOFF+0x90>)
			PrintToLCD("Swing           ");
 80023e6:	f7ff fb65 	bl	8001ab4 <PrintToLCD>
}
 80023ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption();
 80023ee:	f7ff bfcd 	b.w	800238c <SelectedOption>
	if (key == KEY_BACK)
 80023f2:	2c01      	cmp	r4, #1
 80023f4:	d103      	bne.n	80023fe <MenuSettingsSaveMenuPosWhenOFF+0x3a>
		SettingsData.Option1--;
 80023f6:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 80023f8:	3a01      	subs	r2, #1
 80023fa:	d015      	beq.n	8002428 <MenuSettingsSaveMenuPosWhenOFF+0x64>
		SettingsData.Option1--;
 80023fc:	609a      	str	r2, [r3, #8]
	switch (SettingsData.Option1)
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	3a01      	subs	r2, #1
 8002402:	2a06      	cmp	r2, #6
 8002404:	d820      	bhi.n	8002448 <MenuSettingsSaveMenuPosWhenOFF+0x84>
 8002406:	a101      	add	r1, pc, #4	; (adr r1, 800240c <MenuSettingsSaveMenuPosWhenOFF+0x48>)
 8002408:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800240c:	080023e5 	.word	0x080023e5
 8002410:	08002435 	.word	0x08002435
 8002414:	08002439 	.word	0x08002439
 8002418:	0800243d 	.word	0x0800243d
 800241c:	08002441 	.word	0x08002441
 8002420:	08002445 	.word	0x08002445
 8002424:	0800242d 	.word	0x0800242d
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 8002428:	2207      	movs	r2, #7
 800242a:	609a      	str	r2, [r3, #8]
			PrintToLCD("Swing           ");
 800242c:	480a      	ldr	r0, [pc, #40]	; (8002458 <MenuSettingsSaveMenuPosWhenOFF+0x94>)
 800242e:	e7da      	b.n	80023e6 <MenuSettingsSaveMenuPosWhenOFF+0x22>
		SettingsData.Option1++;
 8002430:	6099      	str	r1, [r3, #8]
 8002432:	e7e4      	b.n	80023fe <MenuSettingsSaveMenuPosWhenOFF+0x3a>
			PrintToLCD("Load Menu       ");
 8002434:	4809      	ldr	r0, [pc, #36]	; (800245c <MenuSettingsSaveMenuPosWhenOFF+0x98>)
 8002436:	e7d6      	b.n	80023e6 <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Charge CC CV    ");
 8002438:	4809      	ldr	r0, [pc, #36]	; (8002460 <MenuSettingsSaveMenuPosWhenOFF+0x9c>)
 800243a:	e7d4      	b.n	80023e6 <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Charge addapt   ");
 800243c:	4809      	ldr	r0, [pc, #36]	; (8002464 <MenuSettingsSaveMenuPosWhenOFF+0xa0>)
 800243e:	e7d2      	b.n	80023e6 <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("DisCharge       ");
 8002440:	4809      	ldr	r0, [pc, #36]	; (8002468 <MenuSettingsSaveMenuPosWhenOFF+0xa4>)
 8002442:	e7d0      	b.n	80023e6 <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Training        ");
 8002444:	4809      	ldr	r0, [pc, #36]	; (800246c <MenuSettingsSaveMenuPosWhenOFF+0xa8>)
 8002446:	e7ce      	b.n	80023e6 <MenuSettingsSaveMenuPosWhenOFF+0x22>
			SettingsData.Option1 =1;
 8002448:	2201      	movs	r2, #1
 800244a:	609a      	str	r2, [r3, #8]
}
 800244c:	bd10      	pop	{r4, pc}
 800244e:	bf00      	nop
 8002450:	20000154 	.word	0x20000154
 8002454:	0800600c 	.word	0x0800600c
 8002458:	08006072 	.word	0x08006072
 800245c:	0800601d 	.word	0x0800601d
 8002460:	0800602e 	.word	0x0800602e
 8002464:	0800603f 	.word	0x0800603f
 8002468:	08006050 	.word	0x08006050
 800246c:	08006061 	.word	0x08006061

08002470 <MenuSettingsOutAfterPowerUp>:
	lcd_set_xy(0,0);
 8002470:	2100      	movs	r1, #0
{
 8002472:	b510      	push	{r4, lr}
 8002474:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002476:	4608      	mov	r0, r1
 8002478:	f7ff fa9c 	bl	80019b4 <lcd_set_xy>
	if (key == KEY_NEXT)
 800247c:	2c02      	cmp	r4, #2
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <MenuSettingsOutAfterPowerUp+0x60>)
 8002480:	d10d      	bne.n	800249e <MenuSettingsOutAfterPowerUp+0x2e>
		SettingsData.Option2++;
 8002482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 8002484:	2a03      	cmp	r2, #3
		SettingsData.Option2++;
 8002486:	f102 0101 	add.w	r1, r2, #1
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 800248a:	d11c      	bne.n	80024c6 <MenuSettingsOutAfterPowerUp+0x56>
 800248c:	2201      	movs	r2, #1
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
			PrintToLCD("OFF             ");
 8002490:	4810      	ldr	r0, [pc, #64]	; (80024d4 <MenuSettingsOutAfterPowerUp+0x64>)
			PrintToLCD("Previous        ");
 8002492:	f7ff fb0f 	bl	8001ab4 <PrintToLCD>
}
 8002496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption1();
 800249a:	f7ff bf85 	b.w	80023a8 <SelectedOption1>
	if (key == KEY_BACK)
 800249e:	2c01      	cmp	r4, #1
 80024a0:	d103      	bne.n	80024aa <MenuSettingsOutAfterPowerUp+0x3a>
		SettingsData.Option2--;
 80024a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 80024a4:	3a01      	subs	r2, #1
 80024a6:	d00a      	beq.n	80024be <MenuSettingsOutAfterPowerUp+0x4e>
		SettingsData.Option2--;
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
	switch (SettingsData.Option2)
 80024aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ac:	2a02      	cmp	r2, #2
 80024ae:	d00c      	beq.n	80024ca <MenuSettingsOutAfterPowerUp+0x5a>
 80024b0:	2a03      	cmp	r2, #3
 80024b2:	d006      	beq.n	80024c2 <MenuSettingsOutAfterPowerUp+0x52>
 80024b4:	2a01      	cmp	r2, #1
 80024b6:	d0eb      	beq.n	8002490 <MenuSettingsOutAfterPowerUp+0x20>
			SettingsData.Option2 =1;
 80024b8:	2201      	movs	r2, #1
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024bc:	bd10      	pop	{r4, pc}
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 80024be:	2203      	movs	r2, #3
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
			PrintToLCD("Previous        ");
 80024c2:	4805      	ldr	r0, [pc, #20]	; (80024d8 <MenuSettingsOutAfterPowerUp+0x68>)
 80024c4:	e7e5      	b.n	8002492 <MenuSettingsOutAfterPowerUp+0x22>
		SettingsData.Option2++;
 80024c6:	6419      	str	r1, [r3, #64]	; 0x40
 80024c8:	e7ef      	b.n	80024aa <MenuSettingsOutAfterPowerUp+0x3a>
			PrintToLCD("ON              ");
 80024ca:	4804      	ldr	r0, [pc, #16]	; (80024dc <MenuSettingsOutAfterPowerUp+0x6c>)
 80024cc:	e7e1      	b.n	8002492 <MenuSettingsOutAfterPowerUp+0x22>
 80024ce:	bf00      	nop
 80024d0:	20000154 	.word	0x20000154
 80024d4:	08006083 	.word	0x08006083
 80024d8:	080060a5 	.word	0x080060a5
 80024dc:	08006094 	.word	0x08006094

080024e0 <BUT_Debrief>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <BUT_Debrief+0x58>)
 80024e2:	4916      	ldr	r1, [pc, #88]	; (800253c <BUT_Debrief+0x5c>)
 80024e4:	689a      	ldr	r2, [r3, #8]
int16_t comp = 0;
void BUT_Debrief(void)
{
	Key_Pressed_t key;

	if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_4))
 80024e6:	f012 0f10 	tst.w	r2, #16
 80024ea:	d00c      	beq.n	8002506 <BUT_Debrief+0x26>
 80024ec:	689a      	ldr	r2, [r3, #8]
		key = KEY_OK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_5))
 80024ee:	0690      	lsls	r0, r2, #26
 80024f0:	d516      	bpl.n	8002520 <BUT_Debrief+0x40>
 80024f2:	689a      	ldr	r2, [r3, #8]
		key = KEY_NEXT;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_6))
 80024f4:	0652      	lsls	r2, r2, #25
 80024f6:	d515      	bpl.n	8002524 <BUT_Debrief+0x44>
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	43db      	mvns	r3, r3
		key = KEY_BACK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_7))
 80024fc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002500:	d112      	bne.n	8002528 <BUT_Debrief+0x48>
			{
			pressedKey = key;
			return;
		}
	}
	else comp=0;
 8002502:	800b      	strh	r3, [r1, #0]
 8002504:	4770      	bx	lr
		key = KEY_OK;
 8002506:	2203      	movs	r2, #3
		if (comp > THRESHOLD2)
 8002508:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800250c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002510:	4283      	cmp	r3, r0
 8002512:	dd0b      	ble.n	800252c <BUT_Debrief+0x4c>
			comp = THRESHOLD2 - 40;
 8002514:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8002518:	800b      	strh	r3, [r1, #0]
			pressedKey = key;
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <BUT_Debrief+0x60>)
 800251c:	701a      	strb	r2, [r3, #0]
			return;
 800251e:	e00a      	b.n	8002536 <BUT_Debrief+0x56>
		key = KEY_NEXT;
 8002520:	2202      	movs	r2, #2
 8002522:	e7f1      	b.n	8002508 <BUT_Debrief+0x28>
		key = KEY_BACK;
 8002524:	2201      	movs	r2, #1
 8002526:	e7ef      	b.n	8002508 <BUT_Debrief+0x28>
		key = KEY_UP;
 8002528:	2204      	movs	r2, #4
 800252a:	e7ed      	b.n	8002508 <BUT_Debrief+0x28>
		else comp++;
 800252c:	3301      	adds	r3, #1
 800252e:	b21b      	sxth	r3, r3
		if (comp == THRESHOLD)
 8002530:	2b14      	cmp	r3, #20
		else comp++;
 8002532:	800b      	strh	r3, [r1, #0]
		if (comp == THRESHOLD)
 8002534:	d0f1      	beq.n	800251a <BUT_Debrief+0x3a>
}
 8002536:	4770      	bx	lr
 8002538:	40010c00 	.word	0x40010c00
 800253c:	200007dc 	.word	0x200007dc
 8002540:	200007e0 	.word	0x200007e0

08002544 <BUT_GetKey>:

Key_Pressed_t BUT_GetKey(void)
{
	if (pressedKey) PowerOffTimesec=0;
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <BUT_GetKey+0x14>)
 8002546:	7818      	ldrb	r0, [r3, #0]
 8002548:	b110      	cbz	r0, 8002550 <BUT_GetKey+0xc>
 800254a:	2100      	movs	r1, #0
 800254c:	4a03      	ldr	r2, [pc, #12]	; (800255c <BUT_GetKey+0x18>)
 800254e:	6011      	str	r1, [r2, #0]
	Key_Pressed_t key = pressedKey;
	pressedKey = 0;
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
	return key;
}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	200007e0 	.word	0x200007e0
 800255c:	200007a0 	.word	0x200007a0

08002560 <Start_Timer_sec>:

void Start_Timer_sec()
{
	Timer_Sec = 0;
 8002560:	2200      	movs	r2, #0
 8002562:	4b03      	ldr	r3, [pc, #12]	; (8002570 <Start_Timer_sec+0x10>)
 8002564:	601a      	str	r2, [r3, #0]
	Status_Timer_Sec = 1;
 8002566:	2201      	movs	r2, #1
 8002568:	4b02      	ldr	r3, [pc, #8]	; (8002574 <Start_Timer_sec+0x14>)
 800256a:	701a      	strb	r2, [r3, #0]
}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	200007cc 	.word	0x200007cc
 8002574:	200007a5 	.word	0x200007a5

08002578 <ClockOnLCD_noSec>:
	if (strlen1(string)<2) lcd_out("0",1);
	lcd_out(string,1);

}
void ClockOnLCD_noSec (uint32_t time)
{
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	4604      	mov	r4, r0
	char *string;
	//(" ",1);
	string = itoa(time/3600);
 800257c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8002580:	fbb4 f0f0 	udiv	r0, r4, r0
 8002584:	f7fe fe74 	bl	8001270 <itoa>
 8002588:	4605      	mov	r5, r0
	if (strlen1(string)<2) lcd_out("0",1);
 800258a:	f7fe ff57 	bl	800143c <strlen1>
 800258e:	2801      	cmp	r0, #1
 8002590:	d803      	bhi.n	800259a <ClockOnLCD_noSec+0x22>
 8002592:	2101      	movs	r1, #1
 8002594:	4811      	ldr	r0, [pc, #68]	; (80025dc <ClockOnLCD_noSec+0x64>)
 8002596:	f7ff fa1f 	bl	80019d8 <lcd_out>
	lcd_out(string,1);
 800259a:	2101      	movs	r1, #1
 800259c:	4628      	mov	r0, r5
 800259e:	f7ff fa1b 	bl	80019d8 <lcd_out>

	lcd_out(":",1);
 80025a2:	2101      	movs	r1, #1
 80025a4:	480e      	ldr	r0, [pc, #56]	; (80025e0 <ClockOnLCD_noSec+0x68>)
 80025a6:	f7ff fa17 	bl	80019d8 <lcd_out>
	string = itoa((time/60)%60);
 80025aa:	233c      	movs	r3, #60	; 0x3c
 80025ac:	fbb4 f4f3 	udiv	r4, r4, r3
 80025b0:	fbb4 f0f3 	udiv	r0, r4, r3
 80025b4:	fb03 4010 	mls	r0, r3, r0, r4
 80025b8:	f7fe fe5a 	bl	8001270 <itoa>
 80025bc:	4604      	mov	r4, r0
	if (strlen1(string)<2) lcd_out("0",1);
 80025be:	f7fe ff3d 	bl	800143c <strlen1>
 80025c2:	2801      	cmp	r0, #1
 80025c4:	d803      	bhi.n	80025ce <ClockOnLCD_noSec+0x56>
 80025c6:	2101      	movs	r1, #1
 80025c8:	4804      	ldr	r0, [pc, #16]	; (80025dc <ClockOnLCD_noSec+0x64>)
 80025ca:	f7ff fa05 	bl	80019d8 <lcd_out>
	lcd_out(string,1);
 80025ce:	4620      	mov	r0, r4


}
 80025d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_out(string,1);
 80025d4:	2101      	movs	r1, #1
 80025d6:	f7ff b9ff 	b.w	80019d8 <lcd_out>
 80025da:	bf00      	nop
 80025dc:	080060b6 	.word	0x080060b6
 80025e0:	080061ad 	.word	0x080061ad

080025e4 <OUT_OFF>:


void OUT_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BR1;//ON-OFF OUT
 80025e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <OUT_OFF+0x20>)
 80025ea:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	GPIOA->BSRR =  GPIO_BSRR_BR8;//led out on/off
 80025ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80025f4:	611a      	str	r2, [r3, #16]
	On_off = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	4a03      	ldr	r2, [pc, #12]	; (8002608 <OUT_OFF+0x24>)
 80025fa:	7013      	strb	r3, [r2, #0]
	Status_Out = 0;
 80025fc:	4a03      	ldr	r2, [pc, #12]	; (800260c <OUT_OFF+0x28>)
 80025fe:	7013      	strb	r3, [r2, #0]
}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40010c00 	.word	0x40010c00
 8002608:	2000079e 	.word	0x2000079e
 800260c:	200007a4 	.word	0x200007a4

08002610 <discharge>:
{
 8002610:	b508      	push	{r3, lr}
	OUT_OFF();
 8002612:	f7ff ffe7 	bl	80025e4 <OUT_OFF>
}
 8002616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 800261a:	2032      	movs	r0, #50	; 0x32
 800261c:	f7fe bd0c 	b.w	8001038 <delay_ms>

08002620 <MenuCalibration_CURRENT_Load>:
{
 8002620:	b538      	push	{r3, r4, r5, lr}
	EnterInMenu_Status=1;
 8002622:	2201      	movs	r2, #1
{
 8002624:	4605      	mov	r5, r0
	EnterInMenu_Status=1;
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <MenuCalibration_CURRENT_Load+0x5c>)
 8002628:	4c15      	ldr	r4, [pc, #84]	; (8002680 <MenuCalibration_CURRENT_Load+0x60>)
 800262a:	701a      	strb	r2, [r3, #0]
	discharge();
 800262c:	f7ff fff0 	bl	8002610 <discharge>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent_x1++;
 8002630:	2d02      	cmp	r5, #2
 8002632:	d11e      	bne.n	8002672 <MenuCalibration_CURRENT_Load+0x52>
 8002634:	6a23      	ldr	r3, [r4, #32]
 8002636:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x1--;
 8002638:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 800263a:	2100      	movs	r1, #0
 800263c:	4608      	mov	r0, r1
 800263e:	f7ff f9b9 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent_x1));
 8002642:	6a20      	ldr	r0, [r4, #32]
 8002644:	f7fe fe14 	bl	8001270 <itoa>
 8002648:	f7ff fa34 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("   ");
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <MenuCalibration_CURRENT_Load+0x64>)
 800264e:	f7ff fa31 	bl	8001ab4 <PrintToLCD>
	lcd_set_xy(0,1);
 8002652:	2101      	movs	r1, #1
 8002654:	2000      	movs	r0, #0
 8002656:	f7ff f9ad 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MenuCalibration_CURRENT_Load+0x68>)
 800265c:	8818      	ldrh	r0, [r3, #0]
 800265e:	b200      	sxth	r0, r0
 8002660:	f7fe fe06 	bl	8001270 <itoa>
 8002664:	f7ff fa26 	bl	8001ab4 <PrintToLCD>
}
 8002668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("mA  ");
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <MenuCalibration_CURRENT_Load+0x6c>)
 800266e:	f7ff ba21 	b.w	8001ab4 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x1--;
 8002672:	2d01      	cmp	r5, #1
 8002674:	d1e1      	bne.n	800263a <MenuCalibration_CURRENT_Load+0x1a>
 8002676:	6a23      	ldr	r3, [r4, #32]
 8002678:	3b01      	subs	r3, #1
 800267a:	e7dd      	b.n	8002638 <MenuCalibration_CURRENT_Load+0x18>
 800267c:	2000079c 	.word	0x2000079c
 8002680:	20000004 	.word	0x20000004
 8002684:	080060a1 	.word	0x080060a1
 8002688:	20000856 	.word	0x20000856
 800268c:	080060b8 	.word	0x080060b8

08002690 <discharge1>:
{
 8002690:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=2)
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <discharge1+0x34>)
 8002694:	f993 2000 	ldrsb.w	r2, [r3]
 8002698:	2a02      	cmp	r2, #2
 800269a:	d011      	beq.n	80026c0 <discharge1+0x30>
		ChargeDischargeState = 2;
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]
		OUT_OFF();
 80026a0:	f7ff ffa0 	bl	80025e4 <OUT_OFF>
		TimerForReadyMeasurement_ms = 0;
 80026a4:	2200      	movs	r2, #0
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <discharge1+0x38>)
		delay_ms(50);
 80026a8:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 80026aa:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 80026ac:	f7fe fcc4 	bl	8001038 <delay_ms>
		logDebug("DIsCharge");
 80026b0:	4806      	ldr	r0, [pc, #24]	; (80026cc <discharge1+0x3c>)
 80026b2:	f002 fdc9 	bl	8005248 <printToBufferWithoutEndUART1>
}
 80026b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("DIsCharge");
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <discharge1+0x40>)
 80026bc:	f002 bd5e 	b.w	800517c <printToBufferUART1>
}
 80026c0:	bd08      	pop	{r3, pc}
 80026c2:	bf00      	nop
 80026c4:	20000786 	.word	0x20000786
 80026c8:	200007c8 	.word	0x200007c8
 80026cc:	08005908 	.word	0x08005908
 80026d0:	080060bd 	.word	0x080060bd

080026d4 <MenuDisCharge>:
	EnterInMenu_Status = 1;
 80026d4:	2101      	movs	r1, #1
{
 80026d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (InitiStatus==0)
 80026da:	4d8a      	ldr	r5, [pc, #552]	; (8002904 <MenuDisCharge+0x230>)
	EnterInMenu_Status = 1;
 80026dc:	4e8a      	ldr	r6, [pc, #552]	; (8002908 <MenuDisCharge+0x234>)
	if (InitiStatus==0)
 80026de:	782b      	ldrb	r3, [r5, #0]
 80026e0:	4a8a      	ldr	r2, [pc, #552]	; (800290c <MenuDisCharge+0x238>)
	EnterInMenu_Status = 1;
 80026e2:	7031      	strb	r1, [r6, #0]
	if (InitiStatus==0)
 80026e4:	b94b      	cbnz	r3, 80026fa <MenuDisCharge+0x26>
		InitiStatus = 1;
 80026e6:	7029      	strb	r1, [r5, #0]
		ChargeStatusForTimer = 0;
 80026e8:	4989      	ldr	r1, [pc, #548]	; (8002910 <MenuDisCharge+0x23c>)
		BatteryLow=0;
 80026ea:	7013      	strb	r3, [r2, #0]
		ChargeStatusForTimer = 0;
 80026ec:	700b      	strb	r3, [r1, #0]
		DisChargeStatusForTimer = 0;
 80026ee:	4989      	ldr	r1, [pc, #548]	; (8002914 <MenuDisCharge+0x240>)
 80026f0:	700b      	strb	r3, [r1, #0]
		BatteryCapacityDischargeCurrent = 0;
 80026f2:	4989      	ldr	r1, [pc, #548]	; (8002918 <MenuDisCharge+0x244>)
 80026f4:	600b      	str	r3, [r1, #0]
		DischargeTimeSec = 0;
 80026f6:	4989      	ldr	r1, [pc, #548]	; (800291c <MenuDisCharge+0x248>)
 80026f8:	600b      	str	r3, [r1, #0]
	U_BatteryTmp = U_OUT;
 80026fa:	4f89      	ldr	r7, [pc, #548]	; (8002920 <MenuDisCharge+0x24c>)
 80026fc:	4989      	ldr	r1, [pc, #548]	; (8002924 <MenuDisCharge+0x250>)
 80026fe:	883b      	ldrh	r3, [r7, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	800b      	strh	r3, [r1, #0]
	if (U_BatteryTmp >=SettingsData.LowVoltage) BatteryLow=0;
 8002704:	4988      	ldr	r1, [pc, #544]	; (8002928 <MenuDisCharge+0x254>)
 8002706:	698c      	ldr	r4, [r1, #24]
 8002708:	4688      	mov	r8, r1
 800270a:	42a3      	cmp	r3, r4
 800270c:	f0c0 80f1 	bcc.w	80028f2 <MenuDisCharge+0x21e>
 8002710:	2300      	movs	r3, #0
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 8002712:	4986      	ldr	r1, [pc, #536]	; (800292c <MenuDisCharge+0x258>)
		BatteryLow = 1;
 8002714:	7013      	strb	r3, [r2, #0]
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 8002716:	4b86      	ldr	r3, [pc, #536]	; (8002930 <MenuDisCharge+0x25c>)
 8002718:	6809      	ldr	r1, [r1, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8002914 <MenuDisCharge+0x240>
 8002720:	1a5b      	subs	r3, r3, r1
 8002722:	2b03      	cmp	r3, #3
 8002724:	d906      	bls.n	8002734 <MenuDisCharge+0x60>
 8002726:	7813      	ldrb	r3, [r2, #0]
 8002728:	b123      	cbz	r3, 8002734 <MenuDisCharge+0x60>
	OUT_OFF();
 800272a:	f7ff ff5b 	bl	80025e4 <OUT_OFF>
		DisChargeStatusForTimer = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	f889 3000 	strb.w	r3, [r9]
	if (key == KEY_NEXT)
 8002734:	2802      	cmp	r0, #2
 8002736:	4c7f      	ldr	r4, [pc, #508]	; (8002934 <MenuDisCharge+0x260>)
 8002738:	d152      	bne.n	80027e0 <MenuDisCharge+0x10c>
    	if (On_off == 0)
 800273a:	4b7f      	ldr	r3, [pc, #508]	; (8002938 <MenuDisCharge+0x264>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d14a      	bne.n	80027d8 <MenuDisCharge+0x104>
    		discharge();
 8002742:	f7ff ff65 	bl	8002610 <discharge>
    		DisChargeStatusForTimer = 1;
 8002746:	2301      	movs	r3, #1
    		DisChargeStatusForTimer = 0;
 8002748:	f889 3000 	strb.w	r3, [r9]
	if(CountShow == 0)
 800274c:	f994 1000 	ldrsb.w	r1, [r4]
 8002750:	bb49      	cbnz	r1, 80027a6 <MenuDisCharge+0xd2>
		lcd_set_xy(0,0);
 8002752:	4608      	mov	r0, r1
 8002754:	f7ff f92e 	bl	80019b4 <lcd_set_xy>
		PrintToLCD(itoa_koma(U_OUT ,2));
 8002758:	8838      	ldrh	r0, [r7, #0]
 800275a:	2102      	movs	r1, #2
 800275c:	b280      	uxth	r0, r0
 800275e:	f7fe fdff 	bl	8001360 <itoa_koma>
 8002762:	f7ff f9a7 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V ");
 8002766:	4875      	ldr	r0, [pc, #468]	; (800293c <MenuDisCharge+0x268>)
 8002768:	f7ff f9a4 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(Current ));
 800276c:	4b74      	ldr	r3, [pc, #464]	; (8002940 <MenuDisCharge+0x26c>)
 800276e:	4f75      	ldr	r7, [pc, #468]	; (8002944 <MenuDisCharge+0x270>)
 8002770:	8818      	ldrh	r0, [r3, #0]
 8002772:	b200      	sxth	r0, r0
 8002774:	f7fe fd7c 	bl	8001270 <itoa>
 8002778:	f7ff f99c 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mA      ");
 800277c:	4872      	ldr	r0, [pc, #456]	; (8002948 <MenuDisCharge+0x274>)
 800277e:	f7ff f999 	bl	8001ab4 <PrintToLCD>
		if (On_off ==0)
 8002782:	4b6d      	ldr	r3, [pc, #436]	; (8002938 <MenuDisCharge+0x264>)
				lcd_set_xy(7,1);
 8002784:	2101      	movs	r1, #1
		if (On_off ==0)
 8002786:	781b      	ldrb	r3, [r3, #0]
				lcd_set_xy(7,1);
 8002788:	2007      	movs	r0, #7
		if (On_off ==0)
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 80a8 	bne.w	80028e0 <MenuDisCharge+0x20c>
				lcd_set_xy(7,1);
 8002790:	f7ff f910 	bl	80019b4 <lcd_set_xy>
				LcdOutbyNumber(2,1);
 8002794:	2101      	movs	r1, #1
 8002796:	2002      	movs	r0, #2
						LcdOutbyNumber(3,1);
 8002798:	f7ff f934 	bl	8001a04 <LcdOutbyNumber>
			if (Blink_message_counter>10)
 800279c:	783b      	ldrb	r3, [r7, #0]
 800279e:	2b0a      	cmp	r3, #10
				Blink_message_counter = 0;
 80027a0:	bf84      	itt	hi
 80027a2:	2300      	movhi	r3, #0
 80027a4:	703b      	strbhi	r3, [r7, #0]
	if(CountShow == 1)
 80027a6:	f994 7000 	ldrsb.w	r7, [r4]
 80027aa:	2f01      	cmp	r7, #1
 80027ac:	d123      	bne.n	80027f6 <MenuDisCharge+0x122>
		lcd_set_xy(0,0);
 80027ae:	2100      	movs	r1, #0
 80027b0:	4608      	mov	r0, r1
 80027b2:	f7ff f8ff 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("OffWhen Vb<");
 80027b6:	4865      	ldr	r0, [pc, #404]	; (800294c <MenuDisCharge+0x278>)
 80027b8:	f7ff f97c 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.LowVoltage/10 ,1));
 80027bc:	230a      	movs	r3, #10
 80027be:	f8d8 0018 	ldr.w	r0, [r8, #24]
 80027c2:	4639      	mov	r1, r7
 80027c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80027c8:	f7fe fdca 	bl	8001360 <itoa_koma>
 80027cc:	f7ff f972 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V   ");
 80027d0:	485f      	ldr	r0, [pc, #380]	; (8002950 <MenuDisCharge+0x27c>)
 80027d2:	f7ff f96f 	bl	8001ab4 <PrintToLCD>
 80027d6:	e00e      	b.n	80027f6 <MenuDisCharge+0x122>
	OUT_OFF();
 80027d8:	f7ff ff04 	bl	80025e4 <OUT_OFF>
    		DisChargeStatusForTimer = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	e7b3      	b.n	8002748 <MenuDisCharge+0x74>
	if (key == KEY_BACK)
 80027e0:	2801      	cmp	r0, #1
 80027e2:	d1b3      	bne.n	800274c <MenuDisCharge+0x78>
		CountShow--;
 80027e4:	7823      	ldrb	r3, [r4, #0]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM2-1;
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	db01      	blt.n	80027f2 <MenuDisCharge+0x11e>
		CountShow--;
 80027ee:	7023      	strb	r3, [r4, #0]
 80027f0:	e7ac      	b.n	800274c <MenuDisCharge+0x78>
		if (CountShow<0) CountShow=MAXITEM2-1;
 80027f2:	2303      	movs	r3, #3
 80027f4:	7023      	strb	r3, [r4, #0]
	if(CountShow == 2)
 80027f6:	f994 3000 	ldrsb.w	r3, [r4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d11b      	bne.n	8002836 <MenuDisCharge+0x162>
		lcd_set_xy(0,0);
 80027fe:	2100      	movs	r1, #0
 8002800:	4608      	mov	r0, r1
 8002802:	f7ff f8d7 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("P ");
 8002806:	4853      	ldr	r0, [pc, #332]	; (8002954 <MenuDisCharge+0x280>)
 8002808:	f7ff f954 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600 ));
 800280c:	4b52      	ldr	r3, [pc, #328]	; (8002958 <MenuDisCharge+0x284>)
 800280e:	6898      	ldr	r0, [r3, #8]
 8002810:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002814:	fbb0 f0f3 	udiv	r0, r0, r3
 8002818:	f7fe fd2a 	bl	8001270 <itoa>
 800281c:	f7ff f94a 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mAh     ");
 8002820:	484e      	ldr	r0, [pc, #312]	; (800295c <MenuDisCharge+0x288>)
 8002822:	f7ff f947 	bl	8001ab4 <PrintToLCD>
		lcd_set_xy(3,1);
 8002826:	2003      	movs	r0, #3
 8002828:	2101      	movs	r1, #1
 800282a:	f7ff f8c3 	bl	80019b4 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec_Previous);
 800282e:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <MenuDisCharge+0x28c>)
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	f7ff fea1 	bl	8002578 <ClockOnLCD_noSec>
	if(CountShow == 3)
 8002836:	f994 7000 	ldrsb.w	r7, [r4]
 800283a:	4c38      	ldr	r4, [pc, #224]	; (800291c <MenuDisCharge+0x248>)
 800283c:	2f03      	cmp	r7, #3
 800283e:	d11a      	bne.n	8002876 <MenuDisCharge+0x1a2>
		lcd_set_xy(0,0);
 8002840:	2100      	movs	r1, #0
 8002842:	4608      	mov	r0, r1
 8002844:	f7ff f8b6 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("N ");
 8002848:	4846      	ldr	r0, [pc, #280]	; (8002964 <MenuDisCharge+0x290>)
 800284a:	f7ff f933 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600 ));
 800284e:	4b32      	ldr	r3, [pc, #200]	; (8002918 <MenuDisCharge+0x244>)
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002856:	fbb0 f0f3 	udiv	r0, r0, r3
 800285a:	f7fe fd09 	bl	8001270 <itoa>
 800285e:	f7ff f929 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mAH     ");
 8002862:	4841      	ldr	r0, [pc, #260]	; (8002968 <MenuDisCharge+0x294>)
 8002864:	f7ff f926 	bl	8001ab4 <PrintToLCD>
		lcd_set_xy(3,1);
 8002868:	4638      	mov	r0, r7
 800286a:	2101      	movs	r1, #1
 800286c:	f7ff f8a2 	bl	80019b4 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec);
 8002870:	6820      	ldr	r0, [r4, #0]
 8002872:	f7ff fe81 	bl	8002578 <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 8002876:	483d      	ldr	r0, [pc, #244]	; (800296c <MenuDisCharge+0x298>)
 8002878:	f002 fce6 	bl	8005248 <printToBufferWithoutEndUART1>
 800287c:	7829      	ldrb	r1, [r5, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	483b      	ldr	r0, [pc, #236]	; (8002970 <MenuDisCharge+0x29c>)
 8002882:	f002 fd1f 	bl	80052c4 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8002886:	4839      	ldr	r0, [pc, #228]	; (800296c <MenuDisCharge+0x298>)
 8002888:	f002 fcde 	bl	8005248 <printToBufferWithoutEndUART1>
 800288c:	7831      	ldrb	r1, [r6, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	4838      	ldr	r0, [pc, #224]	; (8002974 <MenuDisCharge+0x2a0>)
 8002892:	f002 fd17 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8002896:	4835      	ldr	r0, [pc, #212]	; (800296c <MenuDisCharge+0x298>)
 8002898:	f002 fcd6 	bl	8005248 <printToBufferWithoutEndUART1>
 800289c:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <MenuDisCharge+0x23c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	7819      	ldrb	r1, [r3, #0]
 80028a2:	4835      	ldr	r0, [pc, #212]	; (8002978 <MenuDisCharge+0x2a4>)
 80028a4:	f002 fd0e 	bl	80052c4 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 80028a8:	4830      	ldr	r0, [pc, #192]	; (800296c <MenuDisCharge+0x298>)
 80028aa:	f002 fccd 	bl	8005248 <printToBufferWithoutEndUART1>
 80028ae:	4b33      	ldr	r3, [pc, #204]	; (800297c <MenuDisCharge+0x2a8>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	6819      	ldr	r1, [r3, #0]
 80028b4:	4832      	ldr	r0, [pc, #200]	; (8002980 <MenuDisCharge+0x2ac>)
 80028b6:	f002 fd05 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 80028ba:	482c      	ldr	r0, [pc, #176]	; (800296c <MenuDisCharge+0x298>)
 80028bc:	f002 fcc4 	bl	8005248 <printToBufferWithoutEndUART1>
 80028c0:	f899 1000 	ldrb.w	r1, [r9]
 80028c4:	2200      	movs	r2, #0
 80028c6:	482f      	ldr	r0, [pc, #188]	; (8002984 <MenuDisCharge+0x2b0>)
 80028c8:	f002 fcfc 	bl	80052c4 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80028cc:	4827      	ldr	r0, [pc, #156]	; (800296c <MenuDisCharge+0x298>)
 80028ce:	f002 fcbb 	bl	8005248 <printToBufferWithoutEndUART1>
 80028d2:	6821      	ldr	r1, [r4, #0]
 80028d4:	2200      	movs	r2, #0
}
 80028d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80028da:	482b      	ldr	r0, [pc, #172]	; (8002988 <MenuDisCharge+0x2b4>)
 80028dc:	f002 bcf2 	b.w	80052c4 <printToBufferUART1D>
				if (Blink_message_counter<=5)
 80028e0:	783b      	ldrb	r3, [r7, #0]
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	f67f af54 	bls.w	8002790 <MenuDisCharge+0xbc>
						lcd_set_xy(7,1);
 80028e8:	f7ff f864 	bl	80019b4 <lcd_set_xy>
						LcdOutbyNumber(3,1);
 80028ec:	2101      	movs	r1, #1
 80028ee:	2003      	movs	r0, #3
 80028f0:	e752      	b.n	8002798 <MenuDisCharge+0xc4>
		if (BatteryLow == 0) U_Battery_Timer = time_sec;
 80028f2:	7813      	ldrb	r3, [r2, #0]
 80028f4:	b91b      	cbnz	r3, 80028fe <MenuDisCharge+0x22a>
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MenuDisCharge+0x25c>)
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <MenuDisCharge+0x258>)
 80028fc:	6019      	str	r1, [r3, #0]
		BatteryLow = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	e707      	b.n	8002712 <MenuDisCharge+0x3e>
 8002902:	bf00      	nop
 8002904:	2000079d 	.word	0x2000079d
 8002908:	2000079c 	.word	0x2000079c
 800290c:	20000784 	.word	0x20000784
 8002910:	20000787 	.word	0x20000787
 8002914:	20000790 	.word	0x20000790
 8002918:	2000077c 	.word	0x2000077c
 800291c:	20000794 	.word	0x20000794
 8002920:	2000086c 	.word	0x2000086c
 8002924:	200007d0 	.word	0x200007d0
 8002928:	20000154 	.word	0x20000154
 800292c:	200007d4 	.word	0x200007d4
 8002930:	200007e4 	.word	0x200007e4
 8002934:	2000078d 	.word	0x2000078d
 8002938:	2000079e 	.word	0x2000079e
 800293c:	08005efa 	.word	0x08005efa
 8002940:	20000856 	.word	0x20000856
 8002944:	20000785 	.word	0x20000785
 8002948:	080060c7 	.word	0x080060c7
 800294c:	080060d0 	.word	0x080060d0
 8002950:	08005ea5 	.word	0x08005ea5
 8002954:	080060dc 	.word	0x080060dc
 8002958:	200000f4 	.word	0x200000f4
 800295c:	080060df 	.word	0x080060df
 8002960:	20000798 	.word	0x20000798
 8002964:	0800616e 	.word	0x0800616e
 8002968:	080060e8 	.word	0x080060e8
 800296c:	08005908 	.word	0x08005908
 8002970:	080060f1 	.word	0x080060f1
 8002974:	080060ff 	.word	0x080060ff
 8002978:	08006114 	.word	0x08006114
 800297c:	20000788 	.word	0x20000788
 8002980:	08006129 	.word	0x08006129
 8002984:	08006139 	.word	0x08006139
 8002988:	08006151 	.word	0x08006151

0800298c <OUT_ON>:
void OUT_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BS1;//ON-OFF OUT
 800298c:	2202      	movs	r2, #2
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <OUT_ON+0x1c>)
 8002990:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	On_off = 1;
 8002992:	2301      	movs	r3, #1
 8002994:	4a05      	ldr	r2, [pc, #20]	; (80029ac <OUT_ON+0x20>)
 8002996:	7013      	strb	r3, [r2, #0]
	Status_Out = 1;
 8002998:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <OUT_ON+0x24>)
 800299a:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS8;//led out on/off
 800299c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <OUT_ON+0x28>)
 80029a2:	611a      	str	r2, [r3, #16]
}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010c00 	.word	0x40010c00
 80029ac:	2000079e 	.word	0x2000079e
 80029b0:	200007a4 	.word	0x200007a4
 80029b4:	40010800 	.word	0x40010800

080029b8 <OUTStateAfterPowerUpFunction>:
    if (OutStateAfterPowerUp ==2)
 80029b8:	4908      	ldr	r1, [pc, #32]	; (80029dc <OUTStateAfterPowerUpFunction+0x24>)
{
 80029ba:	b508      	push	{r3, lr}
    if (OutStateAfterPowerUp ==2)
 80029bc:	680a      	ldr	r2, [r1, #0]
 80029be:	2a02      	cmp	r2, #2
 80029c0:	d104      	bne.n	80029cc <OUTStateAfterPowerUpFunction+0x14>
    	OUT_ON();
 80029c2:	f7ff ffe3 	bl	800298c <OUT_ON>
    	OutStateAfterPowerUp = 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	600b      	str	r3, [r1, #0]
}
 80029ca:	bd08      	pop	{r3, pc}
    if (OutStateAfterPowerUp ==3)
 80029cc:	2a03      	cmp	r2, #3
 80029ce:	d1fc      	bne.n	80029ca <OUTStateAfterPowerUpFunction+0x12>
    	if (SaveDataWhenPowerOff.OutState==1)
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <OUTStateAfterPowerUpFunction+0x28>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d1f8      	bne.n	80029ca <OUTStateAfterPowerUpFunction+0x12>
 80029d8:	e7f3      	b.n	80029c2 <OUTStateAfterPowerUpFunction+0xa>
 80029da:	bf00      	nop
 80029dc:	20000274 	.word	0x20000274
 80029e0:	200000f4 	.word	0x200000f4

080029e4 <MenuPowerSupply>:
	lcd_set_xy(0,0);
 80029e4:	2100      	movs	r1, #0
	EnterInMenu_Status = 1;
 80029e6:	2201      	movs	r2, #1
{
 80029e8:	b538      	push	{r3, r4, r5, lr}
	EnterInMenu_Status = 1;
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <MenuPowerSupply+0xa0>)
{
 80029ec:	4605      	mov	r5, r0
	lcd_set_xy(0,0);
 80029ee:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 80029f0:	701a      	strb	r2, [r3, #0]
	lcd_set_xy(0,0);
 80029f2:	f7fe ffdf 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <MenuPowerSupply+0xa4>)
 80029f8:	2102      	movs	r1, #2
 80029fa:	8818      	ldrh	r0, [r3, #0]
 80029fc:	b280      	uxth	r0, r0
 80029fe:	f7fe fcaf 	bl	8001360 <itoa_koma>
 8002a02:	f7ff f857 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("V  ");
 8002a06:	4821      	ldr	r0, [pc, #132]	; (8002a8c <MenuPowerSupply+0xa8>)
 8002a08:	f7ff f854 	bl	8001ab4 <PrintToLCD>
	lcd_set_xy(7,0);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2007      	movs	r0, #7
 8002a10:	f7fe ffd0 	bl	80019b4 <lcd_set_xy>
	if (Current < 1000)
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <MenuPowerSupply+0xac>)
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	b212      	sxth	r2, r2
 8002a1a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002a1e:	da1c      	bge.n	8002a5a <MenuPowerSupply+0x76>
		PrintToLCD(itoa(Current));
 8002a20:	8818      	ldrh	r0, [r3, #0]
 8002a22:	b200      	sxth	r0, r0
 8002a24:	f7fe fc24 	bl	8001270 <itoa>
 8002a28:	f7ff f844 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mA    ");
 8002a2c:	4819      	ldr	r0, [pc, #100]	; (8002a94 <MenuPowerSupply+0xb0>)
	if (On_off == 0)
 8002a2e:	4c1a      	ldr	r4, [pc, #104]	; (8002a98 <MenuPowerSupply+0xb4>)
		PrintToLCD("A     ");
 8002a30:	f7ff f840 	bl	8001ab4 <PrintToLCD>
	if (On_off == 0)
 8002a34:	7822      	ldrb	r2, [r4, #0]
		lcd_set_xy(5,1);
 8002a36:	2101      	movs	r1, #1
	if (On_off == 0)
 8002a38:	b9da      	cbnz	r2, 8002a72 <MenuPowerSupply+0x8e>
		lcd_set_xy(5,1);
 8002a3a:	2005      	movs	r0, #5
 8002a3c:	f7fe ffba 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("OFF ");
 8002a40:	4816      	ldr	r0, [pc, #88]	; (8002a9c <MenuPowerSupply+0xb8>)
		PrintToLCD("ON ");
 8002a42:	f7ff f837 	bl	8001ab4 <PrintToLCD>
    if (key == KEY_NEXT)
 8002a46:	2d02      	cmp	r5, #2
 8002a48:	d103      	bne.n	8002a52 <MenuPowerSupply+0x6e>
    	if (On_off == 0)
 8002a4a:	7823      	ldrb	r3, [r4, #0]
 8002a4c:	b9b3      	cbnz	r3, 8002a7c <MenuPowerSupply+0x98>
    		OUT_ON();
 8002a4e:	f7ff ff9d 	bl	800298c <OUT_ON>
}
 8002a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OUTStateAfterPowerUpFunction();
 8002a56:	f7ff bfaf 	b.w	80029b8 <OUTStateAfterPowerUpFunction>
		PrintToLCD(itoa_koma(Current/10,2));
 8002a5a:	200a      	movs	r0, #10
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	2102      	movs	r1, #2
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	fb93 f0f0 	sdiv	r0, r3, r0
 8002a66:	f7fe fc7b 	bl	8001360 <itoa_koma>
 8002a6a:	f7ff f823 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("A     ");
 8002a6e:	480c      	ldr	r0, [pc, #48]	; (8002aa0 <MenuPowerSupply+0xbc>)
 8002a70:	e7dd      	b.n	8002a2e <MenuPowerSupply+0x4a>
		lcd_set_xy(6,1);
 8002a72:	2006      	movs	r0, #6
 8002a74:	f7fe ff9e 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("ON ");
 8002a78:	480a      	ldr	r0, [pc, #40]	; (8002aa4 <MenuPowerSupply+0xc0>)
 8002a7a:	e7e2      	b.n	8002a42 <MenuPowerSupply+0x5e>
    		OUT_OFF();
 8002a7c:	f7ff fdb2 	bl	80025e4 <OUT_OFF>
 8002a80:	e7e7      	b.n	8002a52 <MenuPowerSupply+0x6e>
 8002a82:	bf00      	nop
 8002a84:	2000079c 	.word	0x2000079c
 8002a88:	2000086c 	.word	0x2000086c
 8002a8c:	08006164 	.word	0x08006164
 8002a90:	20000856 	.word	0x20000856
 8002a94:	08005efd 	.word	0x08005efd
 8002a98:	2000079e 	.word	0x2000079e
 8002a9c:	08006168 	.word	0x08006168
 8002aa0:	080061a5 	.word	0x080061a5
 8002aa4:	0800616d 	.word	0x0800616d

08002aa8 <MenuCalibration_CURRENT_Out>:
	EnterInMenu_Status=1;
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <MenuCalibration_CURRENT_Out+0x5c>)
{
 8002aac:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8002aae:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002ab0:	f7ff ff6c 	bl	800298c <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent_x50++;
 8002ab4:	2802      	cmp	r0, #2
 8002ab6:	4c14      	ldr	r4, [pc, #80]	; (8002b08 <MenuCalibration_CURRENT_Out+0x60>)
 8002ab8:	d11e      	bne.n	8002af8 <MenuCalibration_CURRENT_Out+0x50>
 8002aba:	69a3      	ldr	r3, [r4, #24]
 8002abc:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x50--;
 8002abe:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4608      	mov	r0, r1
 8002ac4:	f7fe ff76 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent_x50));
 8002ac8:	69a0      	ldr	r0, [r4, #24]
 8002aca:	f7fe fbd1 	bl	8001270 <itoa>
 8002ace:	f7fe fff1 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("   ");
 8002ad2:	480e      	ldr	r0, [pc, #56]	; (8002b0c <MenuCalibration_CURRENT_Out+0x64>)
 8002ad4:	f7fe ffee 	bl	8001ab4 <PrintToLCD>
	lcd_set_xy(0,1);
 8002ad8:	2101      	movs	r1, #1
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe ff6a 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <MenuCalibration_CURRENT_Out+0x68>)
 8002ae2:	8818      	ldrh	r0, [r3, #0]
 8002ae4:	b200      	sxth	r0, r0
 8002ae6:	f7fe fbc3 	bl	8001270 <itoa>
 8002aea:	f7fe ffe3 	bl	8001ab4 <PrintToLCD>
}
 8002aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("mA  ");
 8002af2:	4808      	ldr	r0, [pc, #32]	; (8002b14 <MenuCalibration_CURRENT_Out+0x6c>)
 8002af4:	f7fe bfde 	b.w	8001ab4 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x50--;
 8002af8:	2801      	cmp	r0, #1
 8002afa:	d1e1      	bne.n	8002ac0 <MenuCalibration_CURRENT_Out+0x18>
 8002afc:	69a3      	ldr	r3, [r4, #24]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	e7dd      	b.n	8002abe <MenuCalibration_CURRENT_Out+0x16>
 8002b02:	bf00      	nop
 8002b04:	2000079c 	.word	0x2000079c
 8002b08:	20000004 	.word	0x20000004
 8002b0c:	080060a1 	.word	0x080060a1
 8002b10:	20000856 	.word	0x20000856
 8002b14:	080060b8 	.word	0x080060b8

08002b18 <MenuCalibration_VoltagePS>:
	EnterInMenu_Status=1;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <MenuCalibration_VoltagePS+0x5c>)
{
 8002b1c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8002b1e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002b20:	f7ff ff34 	bl	800298c <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage++;
 8002b24:	2802      	cmp	r0, #2
 8002b26:	4c14      	ldr	r4, [pc, #80]	; (8002b78 <MenuCalibration_VoltagePS+0x60>)
 8002b28:	d11f      	bne.n	8002b6a <MenuCalibration_VoltagePS+0x52>
 8002b2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b2c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 8002b2e:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 8002b30:	2100      	movs	r1, #0
 8002b32:	4608      	mov	r0, r1
 8002b34:	f7fe ff3e 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage));
 8002b38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b3a:	f7fe fb99 	bl	8001270 <itoa>
 8002b3e:	f7fe ffb9 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("   ");
 8002b42:	480e      	ldr	r0, [pc, #56]	; (8002b7c <MenuCalibration_VoltagePS+0x64>)
 8002b44:	f7fe ffb6 	bl	8001ab4 <PrintToLCD>
	lcd_set_xy(0,1);
 8002b48:	2101      	movs	r1, #1
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fe ff32 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_PS,2));
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <MenuCalibration_VoltagePS+0x68>)
 8002b52:	2102      	movs	r1, #2
 8002b54:	8818      	ldrh	r0, [r3, #0]
 8002b56:	b280      	uxth	r0, r0
 8002b58:	f7fe fc02 	bl	8001360 <itoa_koma>
 8002b5c:	f7fe ffaa 	bl	8001ab4 <PrintToLCD>
}
 8002b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002b64:	4807      	ldr	r0, [pc, #28]	; (8002b84 <MenuCalibration_VoltagePS+0x6c>)
 8002b66:	f7fe bfa5 	b.w	8001ab4 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 8002b6a:	2801      	cmp	r0, #1
 8002b6c:	d1e0      	bne.n	8002b30 <MenuCalibration_VoltagePS+0x18>
 8002b6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	e7dc      	b.n	8002b2e <MenuCalibration_VoltagePS+0x16>
 8002b74:	2000079c 	.word	0x2000079c
 8002b78:	20000004 	.word	0x20000004
 8002b7c:	080060a1 	.word	0x080060a1
 8002b80:	20000874 	.word	0x20000874
 8002b84:	08006164 	.word	0x08006164

08002b88 <MenuCalibration_VoltageOut>:
	EnterInMenu_Status=1;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <MenuCalibration_VoltageOut+0x5c>)
{
 8002b8c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8002b8e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002b90:	f7ff fefc 	bl	800298c <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForU_OUT++;
 8002b94:	2802      	cmp	r0, #2
 8002b96:	4c14      	ldr	r4, [pc, #80]	; (8002be8 <MenuCalibration_VoltageOut+0x60>)
 8002b98:	d11f      	bne.n	8002bda <MenuCalibration_VoltageOut+0x52>
 8002b9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b9c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_OUT--;
 8002b9e:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4608      	mov	r0, r1
 8002ba4:	f7fe ff06 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForU_OUT));
 8002ba8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002baa:	f7fe fb61 	bl	8001270 <itoa>
 8002bae:	f7fe ff81 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("   ");
 8002bb2:	480e      	ldr	r0, [pc, #56]	; (8002bec <MenuCalibration_VoltageOut+0x64>)
 8002bb4:	f7fe ff7e 	bl	8001ab4 <PrintToLCD>
	lcd_set_xy(0,1);
 8002bb8:	2101      	movs	r1, #1
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7fe fefa 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MenuCalibration_VoltageOut+0x68>)
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	8818      	ldrh	r0, [r3, #0]
 8002bc6:	b280      	uxth	r0, r0
 8002bc8:	f7fe fbca 	bl	8001360 <itoa_koma>
 8002bcc:	f7fe ff72 	bl	8001ab4 <PrintToLCD>
}
 8002bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002bd4:	4807      	ldr	r0, [pc, #28]	; (8002bf4 <MenuCalibration_VoltageOut+0x6c>)
 8002bd6:	f7fe bf6d 	b.w	8001ab4 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_OUT--;
 8002bda:	2801      	cmp	r0, #1
 8002bdc:	d1e0      	bne.n	8002ba0 <MenuCalibration_VoltageOut+0x18>
 8002bde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002be0:	3b01      	subs	r3, #1
 8002be2:	e7dc      	b.n	8002b9e <MenuCalibration_VoltageOut+0x16>
 8002be4:	2000079c 	.word	0x2000079c
 8002be8:	20000004 	.word	0x20000004
 8002bec:	080060a1 	.word	0x080060a1
 8002bf0:	2000086c 	.word	0x2000086c
 8002bf4:	08006164 	.word	0x08006164

08002bf8 <MenuCalibration_VoltageIn>:
	EnterInMenu_Status=1;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <MenuCalibration_VoltageIn+0x5c>)
{
 8002bfc:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8002bfe:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002c00:	f7ff fec4 	bl	800298c <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForU_IN++;
 8002c04:	2802      	cmp	r0, #2
 8002c06:	4c14      	ldr	r4, [pc, #80]	; (8002c58 <MenuCalibration_VoltageIn+0x60>)
 8002c08:	d11f      	bne.n	8002c4a <MenuCalibration_VoltageIn+0x52>
 8002c0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c0c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_IN--;
 8002c0e:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 8002c10:	2100      	movs	r1, #0
 8002c12:	4608      	mov	r0, r1
 8002c14:	f7fe fece 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForU_IN));
 8002c18:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c1a:	f7fe fb29 	bl	8001270 <itoa>
 8002c1e:	f7fe ff49 	bl	8001ab4 <PrintToLCD>
	PrintToLCD("   ");
 8002c22:	480e      	ldr	r0, [pc, #56]	; (8002c5c <MenuCalibration_VoltageIn+0x64>)
 8002c24:	f7fe ff46 	bl	8001ab4 <PrintToLCD>
	lcd_set_xy(0,1);
 8002c28:	2101      	movs	r1, #1
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7fe fec2 	bl	80019b4 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_IN,2));
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <MenuCalibration_VoltageIn+0x68>)
 8002c32:	2102      	movs	r1, #2
 8002c34:	8818      	ldrh	r0, [r3, #0]
 8002c36:	b280      	uxth	r0, r0
 8002c38:	f7fe fb92 	bl	8001360 <itoa_koma>
 8002c3c:	f7fe ff3a 	bl	8001ab4 <PrintToLCD>
}
 8002c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002c44:	4807      	ldr	r0, [pc, #28]	; (8002c64 <MenuCalibration_VoltageIn+0x6c>)
 8002c46:	f7fe bf35 	b.w	8001ab4 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_IN--;
 8002c4a:	2801      	cmp	r0, #1
 8002c4c:	d1e0      	bne.n	8002c10 <MenuCalibration_VoltageIn+0x18>
 8002c4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c50:	3b01      	subs	r3, #1
 8002c52:	e7dc      	b.n	8002c0e <MenuCalibration_VoltageIn+0x16>
 8002c54:	2000079c 	.word	0x2000079c
 8002c58:	20000004 	.word	0x20000004
 8002c5c:	080060a1 	.word	0x080060a1
 8002c60:	20000854 	.word	0x20000854
 8002c64:	08006164 	.word	0x08006164

08002c68 <MenuCalibration_Resist_Comp_5V1A>:
		EnterInMenu_Status=1;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <MenuCalibration_Resist_Comp_5V1A+0xac>)
{
 8002c6c:	b570      	push	{r4, r5, r6, lr}
		EnterInMenu_Status=1;
 8002c6e:	701a      	strb	r2, [r3, #0]
		OUT_ON();
 8002c70:	f7ff fe8c 	bl	800298c <OUT_ON>
		if (key == KEY_NEXT) ResistanceComp_Voltage++;
 8002c74:	2802      	cmp	r0, #2
 8002c76:	4e28      	ldr	r6, [pc, #160]	; (8002d18 <MenuCalibration_Resist_Comp_5V1A+0xb0>)
 8002c78:	d142      	bne.n	8002d00 <MenuCalibration_Resist_Comp_5V1A+0x98>
 8002c7a:	8833      	ldrh	r3, [r6, #0]
 8002c7c:	3301      	adds	r3, #1
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8002c7e:	8033      	strh	r3, [r6, #0]
		lcd_set_xy(0,0);
 8002c80:	2100      	movs	r1, #0
 8002c82:	4608      	mov	r0, r1
 8002c84:	f7fe fe96 	bl	80019b4 <lcd_set_xy>
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8002c88:	2102      	movs	r1, #2
 8002c8a:	8830      	ldrh	r0, [r6, #0]
 8002c8c:	f7fe fb68 	bl	8001360 <itoa_koma>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002c90:	4d22      	ldr	r5, [pc, #136]	; (8002d1c <MenuCalibration_Resist_Comp_5V1A+0xb4>)
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002c92:	4c23      	ldr	r4, [pc, #140]	; (8002d20 <MenuCalibration_Resist_Comp_5V1A+0xb8>)
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8002c94:	f7fe ff0e 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V ");
 8002c98:	4822      	ldr	r0, [pc, #136]	; (8002d24 <MenuCalibration_Resist_Comp_5V1A+0xbc>)
 8002c9a:	f7fe ff0b 	bl	8001ab4 <PrintToLCD>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002c9e:	882b      	ldrh	r3, [r5, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002ca0:	8822      	ldrh	r2, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002ca2:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002ca4:	b212      	sxth	r2, r2
 8002ca6:	2a00      	cmp	r2, #0
 8002ca8:	dd2f      	ble.n	8002d0a <MenuCalibration_Resist_Comp_5V1A+0xa2>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002caa:	8832      	ldrh	r2, [r6, #0]
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002cac:	8820      	ldrh	r0, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002cae:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002cb0:	b202      	sxth	r2, r0
 8002cb2:	f242 7010 	movw	r0, #10000	; 0x2710
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002cb6:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002cb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002cbc:	4343      	muls	r3, r0
 8002cbe:	fb93 f0f2 	sdiv	r0, r3, r2
 8002cc2:	4e19      	ldr	r6, [pc, #100]	; (8002d28 <MenuCalibration_Resist_Comp_5V1A+0xc0>)
 8002cc4:	6430      	str	r0, [r6, #64]	; 0x40
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 8002cc6:	f7fe fad3 	bl	8001270 <itoa>
 8002cca:	f7fe fef3 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mOm       ");
 8002cce:	4817      	ldr	r0, [pc, #92]	; (8002d2c <MenuCalibration_Resist_Comp_5V1A+0xc4>)
 8002cd0:	f7fe fef0 	bl	8001ab4 <PrintToLCD>
		Delta = U_PS - U_OUT_ForSetResistance;
 8002cd4:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <MenuCalibration_Resist_Comp_5V1A+0xc8>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	882a      	ldrh	r2, [r5, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002cda:	8821      	ldrh	r1, [r4, #0]
		Delta = U_PS - U_OUT_ForSetResistance;
 8002cdc:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002cde:	b209      	sxth	r1, r1
 8002ce0:	2900      	cmp	r1, #0
		Delta = U_PS - U_OUT_ForSetResistance;
 8002ce2:	b292      	uxth	r2, r2
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002ce4:	dd13      	ble.n	8002d0e <MenuCalibration_Resist_Comp_5V1A+0xa6>
		Delta = U_PS - U_OUT_ForSetResistance;
 8002ce6:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002ce8:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_PS - U_OUT_ForSetResistance;
 8002cec:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002cee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002cf2:	4353      	muls	r3, r2
 8002cf4:	8821      	ldrh	r1, [r4, #0]
 8002cf6:	b209      	sxth	r1, r1
 8002cf8:	fb93 f3f1 	sdiv	r3, r3, r1
 8002cfc:	64b3      	str	r3, [r6, #72]	; 0x48
}
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8002d00:	2801      	cmp	r0, #1
 8002d02:	d1bd      	bne.n	8002c80 <MenuCalibration_Resist_Comp_5V1A+0x18>
 8002d04:	8833      	ldrh	r3, [r6, #0]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	e7b9      	b.n	8002c7e <MenuCalibration_Resist_Comp_5V1A+0x16>
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002d0a:	2046      	movs	r0, #70	; 0x46
 8002d0c:	e7d9      	b.n	8002cc2 <MenuCalibration_Resist_Comp_5V1A+0x5a>
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002d0e:	230a      	movs	r3, #10
 8002d10:	e7f4      	b.n	8002cfc <MenuCalibration_Resist_Comp_5V1A+0x94>
 8002d12:	bf00      	nop
 8002d14:	2000079c 	.word	0x2000079c
 8002d18:	20000278 	.word	0x20000278
 8002d1c:	200002b2 	.word	0x200002b2
 8002d20:	20000856 	.word	0x20000856
 8002d24:	08005efa 	.word	0x08005efa
 8002d28:	20000004 	.word	0x20000004
 8002d2c:	08006171 	.word	0x08006171
 8002d30:	20000874 	.word	0x20000874

08002d34 <MenuBatterySimilation>:
	lcd_set_xy(0,0);
 8002d34:	2100      	movs	r1, #0
{
 8002d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 8002d3a:	2701      	movs	r7, #1
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <MenuBatterySimilation+0xb8>)
	if (On_off == 0)
 8002d3e:	4d2c      	ldr	r5, [pc, #176]	; (8002df0 <MenuBatterySimilation+0xbc>)
{
 8002d40:	4606      	mov	r6, r0
	lcd_set_xy(0,0);
 8002d42:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8002d44:	701f      	strb	r7, [r3, #0]
	lcd_set_xy(0,0);
 8002d46:	f7fe fe35 	bl	80019b4 <lcd_set_xy>
	if (On_off == 0)
 8002d4a:	782b      	ldrb	r3, [r5, #0]
 8002d4c:	4c29      	ldr	r4, [pc, #164]	; (8002df4 <MenuBatterySimilation+0xc0>)
 8002d4e:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002d52:	bb33      	cbnz	r3, 8002da2 <MenuBatterySimilation+0x6e>
		PrintToLCD(itoa_koma(U_PS,2));
 8002d54:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <MenuBatterySimilation+0xc4>)
 8002d56:	2102      	movs	r1, #2
 8002d58:	8818      	ldrh	r0, [r3, #0]
 8002d5a:	b280      	uxth	r0, r0
 8002d5c:	f7fe fb00 	bl	8001360 <itoa_koma>
 8002d60:	f7fe fea8 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V  ");
 8002d64:	4825      	ldr	r0, [pc, #148]	; (8002dfc <MenuBatterySimilation+0xc8>)
 8002d66:	f7fe fea5 	bl	8001ab4 <PrintToLCD>
		lcd_set_xy(7,0);
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	2007      	movs	r0, #7
 8002d6e:	f7fe fe21 	bl	80019b4 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002d72:	8820      	ldrh	r0, [r4, #0]
 8002d74:	b200      	sxth	r0, r0
 8002d76:	f7fe fa7b 	bl	8001270 <itoa>
 8002d7a:	f7fe fe9b 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mA   ");
 8002d7e:	4820      	ldr	r0, [pc, #128]	; (8002e00 <MenuBatterySimilation+0xcc>)
 8002d80:	f7fe fe98 	bl	8001ab4 <PrintToLCD>
		lcd_set_xy(5,1);
 8002d84:	2005      	movs	r0, #5
 8002d86:	4639      	mov	r1, r7
 8002d88:	f7fe fe14 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("OFF ");
 8002d8c:	481d      	ldr	r0, [pc, #116]	; (8002e04 <MenuBatterySimilation+0xd0>)
		PrintToLCD("ON ");
 8002d8e:	f7fe fe91 	bl	8001ab4 <PrintToLCD>
    if (key == KEY_NEXT)
 8002d92:	2e02      	cmp	r6, #2
 8002d94:	d127      	bne.n	8002de6 <MenuBatterySimilation+0xb2>
    	if (On_off == 0)
 8002d96:	782b      	ldrb	r3, [r5, #0]
 8002d98:	bb0b      	cbnz	r3, 8002dde <MenuBatterySimilation+0xaa>
}
 8002d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		OUT_ON();
 8002d9e:	f7ff bdf5 	b.w	800298c <OUT_ON>
		PrintToLCD(itoa_koma(U_OUT,2));
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <MenuBatterySimilation+0xd4>)
 8002da4:	2102      	movs	r1, #2
 8002da6:	8818      	ldrh	r0, [r3, #0]
 8002da8:	b280      	uxth	r0, r0
 8002daa:	f7fe fad9 	bl	8001360 <itoa_koma>
 8002dae:	f7fe fe81 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V  ");
 8002db2:	4812      	ldr	r0, [pc, #72]	; (8002dfc <MenuBatterySimilation+0xc8>)
 8002db4:	f7fe fe7e 	bl	8001ab4 <PrintToLCD>
		lcd_set_xy(7,0);
 8002db8:	2100      	movs	r1, #0
 8002dba:	2007      	movs	r0, #7
 8002dbc:	f7fe fdfa 	bl	80019b4 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002dc0:	8820      	ldrh	r0, [r4, #0]
 8002dc2:	b200      	sxth	r0, r0
 8002dc4:	f7fe fa54 	bl	8001270 <itoa>
 8002dc8:	f7fe fe74 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mA    ");
 8002dcc:	480f      	ldr	r0, [pc, #60]	; (8002e0c <MenuBatterySimilation+0xd8>)
 8002dce:	f7fe fe71 	bl	8001ab4 <PrintToLCD>
		lcd_set_xy(6,1);
 8002dd2:	2006      	movs	r0, #6
 8002dd4:	4639      	mov	r1, r7
 8002dd6:	f7fe fded 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("ON ");
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <MenuBatterySimilation+0xdc>)
 8002ddc:	e7d7      	b.n	8002d8e <MenuBatterySimilation+0x5a>
}
 8002dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		OUT_OFF();
 8002de2:	f7ff bbff 	b.w	80025e4 <OUT_OFF>
}
 8002de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dea:	bf00      	nop
 8002dec:	2000079c 	.word	0x2000079c
 8002df0:	2000079e 	.word	0x2000079e
 8002df4:	20000856 	.word	0x20000856
 8002df8:	20000874 	.word	0x20000874
 8002dfc:	08006164 	.word	0x08006164
 8002e00:	0800617c 	.word	0x0800617c
 8002e04:	08006168 	.word	0x08006168
 8002e08:	2000086c 	.word	0x2000086c
 8002e0c:	08005efd 	.word	0x08005efd
 8002e10:	0800616d 	.word	0x0800616d

08002e14 <charge>:
{
 8002e14:	b508      	push	{r3, lr}
	OUT_ON();
 8002e16:	f7ff fdb9 	bl	800298c <OUT_ON>
}
 8002e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 8002e1e:	2032      	movs	r0, #50	; 0x32
 8002e20:	f7fe b90a 	b.w	8001038 <delay_ms>

08002e24 <MenuChargeCC_CV>:
	EnterInMenu_Status = 1;
 8002e24:	2201      	movs	r2, #1
{
 8002e26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 8002e2a:	4e99      	ldr	r6, [pc, #612]	; (8003090 <MenuChargeCC_CV+0x26c>)
	EnterInMenu_Status = 1;
 8002e2c:	4b99      	ldr	r3, [pc, #612]	; (8003094 <MenuChargeCC_CV+0x270>)
	if (InitiStatus==0)
 8002e2e:	7834      	ldrb	r4, [r6, #0]
{
 8002e30:	4682      	mov	sl, r0
 8002e32:	4698      	mov	r8, r3
 8002e34:	4d98      	ldr	r5, [pc, #608]	; (8003098 <MenuChargeCC_CV+0x274>)
 8002e36:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8003108 <MenuChargeCC_CV+0x2e4>
 8002e3a:	4f98      	ldr	r7, [pc, #608]	; (800309c <MenuChargeCC_CV+0x278>)
	EnterInMenu_Status = 1;
 8002e3c:	701a      	strb	r2, [r3, #0]
	if (InitiStatus==0)
 8002e3e:	bb34      	cbnz	r4, 8002e8e <MenuChargeCC_CV+0x6a>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8002e40:	4b97      	ldr	r3, [pc, #604]	; (80030a0 <MenuChargeCC_CV+0x27c>)
 8002e42:	881a      	ldrh	r2, [r3, #0]
 8002e44:	4b97      	ldr	r3, [pc, #604]	; (80030a4 <MenuChargeCC_CV+0x280>)
 8002e46:	b292      	uxth	r2, r2
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	3305      	adds	r3, #5
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d215      	bcs.n	8002e7c <MenuChargeCC_CV+0x58>
			lcd_set_xy(0,0);
 8002e50:	4621      	mov	r1, r4
 8002e52:	4620      	mov	r0, r4
 8002e54:	f7fe fdae 	bl	80019b4 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8002e58:	4893      	ldr	r0, [pc, #588]	; (80030a8 <MenuChargeCC_CV+0x284>)
 8002e5a:	f7fe fe2b 	bl	8001ab4 <PrintToLCD>
			delay_ms(2000);
 8002e5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e62:	f7fe f8e9 	bl	8001038 <delay_ms>
			lcd_set_xy(0,0);
 8002e66:	4621      	mov	r1, r4
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7fe fda3 	bl	80019b4 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8002e6e:	488f      	ldr	r0, [pc, #572]	; (80030ac <MenuChargeCC_CV+0x288>)
 8002e70:	f7fe fe20 	bl	8001ab4 <PrintToLCD>
			delay_ms(3000);
 8002e74:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e78:	f7fe f8de 	bl	8001038 <delay_ms>
		ChargeStatusForTimer = 0;
 8002e7c:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 8002e7e:	4a8c      	ldr	r2, [pc, #560]	; (80030b0 <MenuChargeCC_CV+0x28c>)
		ChargeStatusForTimer = 0;
 8002e80:	702b      	strb	r3, [r5, #0]
		DisChargeStatusForTimer = 0;
 8002e82:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 8002e86:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 8002e88:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 8002e8a:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 8002e8c:	7032      	strb	r2, [r6, #0]
	if ((ChargeTimeSec > ChargeDurationSec)|| (U_OUT> SettingsData.MaxVoltage))
 8002e8e:	4b89      	ldr	r3, [pc, #548]	; (80030b4 <MenuChargeCC_CV+0x290>)
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d806      	bhi.n	8002ea6 <MenuChargeCC_CV+0x82>
 8002e98:	4b87      	ldr	r3, [pc, #540]	; (80030b8 <MenuChargeCC_CV+0x294>)
 8002e9a:	4a82      	ldr	r2, [pc, #520]	; (80030a4 <MenuChargeCC_CV+0x280>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	6a12      	ldr	r2, [r2, #32]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d903      	bls.n	8002eae <MenuChargeCC_CV+0x8a>
	OUT_OFF();
 8002ea6:	f7ff fb9d 	bl	80025e4 <OUT_OFF>
		ChargeStatusForTimer = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	702b      	strb	r3, [r5, #0]
    OUTStateAfterPowerUpFunction();
 8002eae:	f7ff fd83 	bl	80029b8 <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 8002eb2:	f1ba 0f02 	cmp.w	sl, #2
 8002eb6:	4c81      	ldr	r4, [pc, #516]	; (80030bc <MenuChargeCC_CV+0x298>)
 8002eb8:	d16b      	bne.n	8002f92 <MenuChargeCC_CV+0x16e>
		if (On_off == 0)
 8002eba:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <MenuChargeCC_CV+0x29c>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d163      	bne.n	8002f8a <MenuChargeCC_CV+0x166>
			charge();
 8002ec2:	f7ff ffa7 	bl	8002e14 <charge>
			ChargeStatusForTimer = 1;
 8002ec6:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 8002ec8:	702b      	strb	r3, [r5, #0]
	if(CountShow == 0)
 8002eca:	f994 1000 	ldrsb.w	r1, [r4]
 8002ece:	2900      	cmp	r1, #0
 8002ed0:	d136      	bne.n	8002f40 <MenuChargeCC_CV+0x11c>
		lcd_set_xy(0,0);
 8002ed2:	4608      	mov	r0, r1
 8002ed4:	f7fe fd6e 	bl	80019b4 <lcd_set_xy>
		if (On_off ==0)
 8002ed8:	4b79      	ldr	r3, [pc, #484]	; (80030c0 <MenuChargeCC_CV+0x29c>)
 8002eda:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 80030b8 <MenuChargeCC_CV+0x294>
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	469b      	mov	fp, r3
 8002ee2:	2a00      	cmp	r2, #0
 8002ee4:	f040 80b5 	bne.w	8003052 <MenuChargeCC_CV+0x22e>
			PrintToLCD(itoa_koma(U_PS,2));
 8002ee8:	4b6d      	ldr	r3, [pc, #436]	; (80030a0 <MenuChargeCC_CV+0x27c>)
 8002eea:	2102      	movs	r1, #2
 8002eec:	8818      	ldrh	r0, [r3, #0]
 8002eee:	b280      	uxth	r0, r0
 8002ef0:	f7fe fa36 	bl	8001360 <itoa_koma>
 8002ef4:	f7fe fdde 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V ");
 8002ef8:	4872      	ldr	r0, [pc, #456]	; (80030c4 <MenuChargeCC_CV+0x2a0>)
 8002efa:	f7fe fddb 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 8002efe:	f8ba 0000 	ldrh.w	r0, [sl]
 8002f02:	2102      	movs	r1, #2
 8002f04:	b280      	uxth	r0, r0
 8002f06:	f7fe fa2b 	bl	8001360 <itoa_koma>
 8002f0a:	f7fe fdd3 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V     ");
 8002f0e:	486e      	ldr	r0, [pc, #440]	; (80030c8 <MenuChargeCC_CV+0x2a4>)
			PrintToLCD("mA     ");
 8002f10:	f7fe fdd0 	bl	8001ab4 <PrintToLCD>
		if (On_off ==0)
 8002f14:	f89b 3000 	ldrb.w	r3, [fp]
			lcd_set_xy(7,1);
 8002f18:	2101      	movs	r1, #1
 8002f1a:	2007      	movs	r0, #7
 8002f1c:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 800310c <MenuChargeCC_CV+0x2e8>
		if (On_off ==0)
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 80aa 	bne.w	800307a <MenuChargeCC_CV+0x256>
			lcd_set_xy(7,1);
 8002f26:	f7fe fd45 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(0,1);
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 8002f2e:	f7fe fd69 	bl	8001a04 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8002f32:	f89a 3000 	ldrb.w	r3, [sl]
 8002f36:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8002f38:	bf84      	itt	hi
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 8002f40:	f994 a000 	ldrsb.w	sl, [r4]
 8002f44:	f1ba 0f01 	cmp.w	sl, #1
 8002f48:	d12f      	bne.n	8002faa <MenuChargeCC_CV+0x186>
		lcd_set_xy(0,0);
 8002f4a:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8002f4c:	f8df b154 	ldr.w	fp, [pc, #340]	; 80030a4 <MenuChargeCC_CV+0x280>
		lcd_set_xy(0,0);
 8002f50:	4608      	mov	r0, r1
 8002f52:	f7fe fd2f 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("T:");
 8002f56:	485d      	ldr	r0, [pc, #372]	; (80030cc <MenuChargeCC_CV+0x2a8>)
 8002f58:	f7fe fdac 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8002f5c:	f8db 0010 	ldr.w	r0, [fp, #16]
 8002f60:	f7fe f986 	bl	8001270 <itoa>
 8002f64:	f7fe fda6 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("h MaxV:");
 8002f68:	4859      	ldr	r0, [pc, #356]	; (80030d0 <MenuChargeCC_CV+0x2ac>)
 8002f6a:	f7fe fda3 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002f6e:	230a      	movs	r3, #10
 8002f70:	f8db 0020 	ldr.w	r0, [fp, #32]
 8002f74:	4651      	mov	r1, sl
 8002f76:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f7a:	f7fe f9f1 	bl	8001360 <itoa_koma>
 8002f7e:	f7fe fd99 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V   ");
 8002f82:	4854      	ldr	r0, [pc, #336]	; (80030d4 <MenuChargeCC_CV+0x2b0>)
 8002f84:	f7fe fd96 	bl	8001ab4 <PrintToLCD>
 8002f88:	e00f      	b.n	8002faa <MenuChargeCC_CV+0x186>
	OUT_OFF();
 8002f8a:	f7ff fb2b 	bl	80025e4 <OUT_OFF>
			ChargeStatusForTimer = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e79a      	b.n	8002ec8 <MenuChargeCC_CV+0xa4>
	if (key == KEY_BACK)
 8002f92:	f1ba 0f01 	cmp.w	sl, #1
 8002f96:	d198      	bne.n	8002eca <MenuChargeCC_CV+0xa6>
		CountShow--;
 8002f98:	7823      	ldrb	r3, [r4, #0]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM0-1;
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db01      	blt.n	8002fa6 <MenuChargeCC_CV+0x182>
		CountShow--;
 8002fa2:	7023      	strb	r3, [r4, #0]
 8002fa4:	e791      	b.n	8002eca <MenuChargeCC_CV+0xa6>
		if (CountShow<0) CountShow=MAXITEM0-1;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	7023      	strb	r3, [r4, #0]
	if(CountShow == 2)
 8002faa:	f994 3000 	ldrsb.w	r3, [r4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d11a      	bne.n	8002fe8 <MenuChargeCC_CV+0x1c4>
		lcd_set_xy(0,0);
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	f7fe fcfd 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("C ");
 8002fba:	4847      	ldr	r0, [pc, #284]	; (80030d8 <MenuChargeCC_CV+0x2b4>)
 8002fbc:	f7fe fd7a 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <MenuChargeCC_CV+0x28c>)
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002fc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fcc:	f7fe f950 	bl	8001270 <itoa>
 8002fd0:	f7fe fd70 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mAh     ");
 8002fd4:	4841      	ldr	r0, [pc, #260]	; (80030dc <MenuChargeCC_CV+0x2b8>)
 8002fd6:	f7fe fd6d 	bl	8001ab4 <PrintToLCD>
		lcd_set_xy(3,1);
 8002fda:	2003      	movs	r0, #3
 8002fdc:	2101      	movs	r1, #1
 8002fde:	f7fe fce9 	bl	80019b4 <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 8002fe2:	6838      	ldr	r0, [r7, #0]
 8002fe4:	f7ff fac8 	bl	8002578 <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 8002fe8:	483d      	ldr	r0, [pc, #244]	; (80030e0 <MenuChargeCC_CV+0x2bc>)
 8002fea:	f002 f92d 	bl	8005248 <printToBufferWithoutEndUART1>
 8002fee:	7831      	ldrb	r1, [r6, #0]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	483c      	ldr	r0, [pc, #240]	; (80030e4 <MenuChargeCC_CV+0x2c0>)
 8002ff4:	f002 f966 	bl	80052c4 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8002ff8:	4839      	ldr	r0, [pc, #228]	; (80030e0 <MenuChargeCC_CV+0x2bc>)
 8002ffa:	f002 f925 	bl	8005248 <printToBufferWithoutEndUART1>
 8002ffe:	f898 1000 	ldrb.w	r1, [r8]
 8003002:	2200      	movs	r2, #0
 8003004:	4838      	ldr	r0, [pc, #224]	; (80030e8 <MenuChargeCC_CV+0x2c4>)
 8003006:	f002 f95d 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 800300a:	4835      	ldr	r0, [pc, #212]	; (80030e0 <MenuChargeCC_CV+0x2bc>)
 800300c:	f002 f91c 	bl	8005248 <printToBufferWithoutEndUART1>
 8003010:	7829      	ldrb	r1, [r5, #0]
 8003012:	2200      	movs	r2, #0
 8003014:	4835      	ldr	r0, [pc, #212]	; (80030ec <MenuChargeCC_CV+0x2c8>)
 8003016:	f002 f955 	bl	80052c4 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 800301a:	4831      	ldr	r0, [pc, #196]	; (80030e0 <MenuChargeCC_CV+0x2bc>)
 800301c:	f002 f914 	bl	8005248 <printToBufferWithoutEndUART1>
 8003020:	6839      	ldr	r1, [r7, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	4832      	ldr	r0, [pc, #200]	; (80030f0 <MenuChargeCC_CV+0x2cc>)
 8003026:	f002 f94d 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 800302a:	482d      	ldr	r0, [pc, #180]	; (80030e0 <MenuChargeCC_CV+0x2bc>)
 800302c:	f002 f90c 	bl	8005248 <printToBufferWithoutEndUART1>
 8003030:	f899 1000 	ldrb.w	r1, [r9]
 8003034:	2200      	movs	r2, #0
 8003036:	482f      	ldr	r0, [pc, #188]	; (80030f4 <MenuChargeCC_CV+0x2d0>)
 8003038:	f002 f944 	bl	80052c4 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800303c:	4828      	ldr	r0, [pc, #160]	; (80030e0 <MenuChargeCC_CV+0x2bc>)
 800303e:	f002 f903 	bl	8005248 <printToBufferWithoutEndUART1>
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <MenuChargeCC_CV+0x2d4>)
 8003044:	2200      	movs	r2, #0
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	482c      	ldr	r0, [pc, #176]	; (80030fc <MenuChargeCC_CV+0x2d8>)
}
 800304a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800304e:	f002 b939 	b.w	80052c4 <printToBufferUART1D>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003052:	f8ba 0000 	ldrh.w	r0, [sl]
 8003056:	2102      	movs	r1, #2
 8003058:	b280      	uxth	r0, r0
 800305a:	f7fe f981 	bl	8001360 <itoa_koma>
 800305e:	f7fe fd29 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V ");
 8003062:	4818      	ldr	r0, [pc, #96]	; (80030c4 <MenuChargeCC_CV+0x2a0>)
 8003064:	f7fe fd26 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <MenuChargeCC_CV+0x2dc>)
 800306a:	8818      	ldrh	r0, [r3, #0]
 800306c:	b200      	sxth	r0, r0
 800306e:	f7fe f8ff 	bl	8001270 <itoa>
 8003072:	f7fe fd1f 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("mA     ");
 8003076:	4823      	ldr	r0, [pc, #140]	; (8003104 <MenuChargeCC_CV+0x2e0>)
 8003078:	e74a      	b.n	8002f10 <MenuChargeCC_CV+0xec>
			if (Blink_message_counter<=5)
 800307a:	f89a 3000 	ldrb.w	r3, [sl]
 800307e:	2b05      	cmp	r3, #5
 8003080:	f67f af51 	bls.w	8002f26 <MenuChargeCC_CV+0x102>
					lcd_set_xy(7,1);
 8003084:	f7fe fc96 	bl	80019b4 <lcd_set_xy>
					LcdOutbyNumber(1,1);
 8003088:	2101      	movs	r1, #1
 800308a:	4608      	mov	r0, r1
 800308c:	e74f      	b.n	8002f2e <MenuChargeCC_CV+0x10a>
 800308e:	bf00      	nop
 8003090:	2000079d 	.word	0x2000079d
 8003094:	2000079c 	.word	0x2000079c
 8003098:	20000787 	.word	0x20000787
 800309c:	20000788 	.word	0x20000788
 80030a0:	20000874 	.word	0x20000874
 80030a4:	20000154 	.word	0x20000154
 80030a8:	08006182 	.word	0x08006182
 80030ac:	08006193 	.word	0x08006193
 80030b0:	20000778 	.word	0x20000778
 80030b4:	20000a18 	.word	0x20000a18
 80030b8:	2000086c 	.word	0x2000086c
 80030bc:	2000078d 	.word	0x2000078d
 80030c0:	2000079e 	.word	0x2000079e
 80030c4:	08005efa 	.word	0x08005efa
 80030c8:	08005ee7 	.word	0x08005ee7
 80030cc:	080061ac 	.word	0x080061ac
 80030d0:	080061af 	.word	0x080061af
 80030d4:	08005ea5 	.word	0x08005ea5
 80030d8:	080061b7 	.word	0x080061b7
 80030dc:	080060df 	.word	0x080060df
 80030e0:	08005908 	.word	0x08005908
 80030e4:	080060f1 	.word	0x080060f1
 80030e8:	080060ff 	.word	0x080060ff
 80030ec:	08006114 	.word	0x08006114
 80030f0:	08006129 	.word	0x08006129
 80030f4:	08006139 	.word	0x08006139
 80030f8:	20000794 	.word	0x20000794
 80030fc:	08006151 	.word	0x08006151
 8003100:	20000856 	.word	0x20000856
 8003104:	080061a4 	.word	0x080061a4
 8003108:	20000790 	.word	0x20000790
 800310c:	20000785 	.word	0x20000785

08003110 <MenuChargeAdapt>:
	EnterInMenu_Status = 1;
 8003110:	2201      	movs	r2, #1
{
 8003112:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 8003116:	4ebc      	ldr	r6, [pc, #752]	; (8003408 <MenuChargeAdapt+0x2f8>)
	EnterInMenu_Status = 1;
 8003118:	4bbc      	ldr	r3, [pc, #752]	; (800340c <MenuChargeAdapt+0x2fc>)
	if (InitiStatus==0)
 800311a:	7835      	ldrb	r5, [r6, #0]
{
 800311c:	4682      	mov	sl, r0
 800311e:	4698      	mov	r8, r3
 8003120:	4cbb      	ldr	r4, [pc, #748]	; (8003410 <MenuChargeAdapt+0x300>)
 8003122:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8003480 <MenuChargeAdapt+0x370>
 8003126:	4fbb      	ldr	r7, [pc, #748]	; (8003414 <MenuChargeAdapt+0x304>)
	EnterInMenu_Status = 1;
 8003128:	701a      	strb	r2, [r3, #0]
	if (InitiStatus==0)
 800312a:	bb35      	cbnz	r5, 800317a <MenuChargeAdapt+0x6a>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 800312c:	4bba      	ldr	r3, [pc, #744]	; (8003418 <MenuChargeAdapt+0x308>)
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	4bba      	ldr	r3, [pc, #744]	; (800341c <MenuChargeAdapt+0x30c>)
 8003132:	b292      	uxth	r2, r2
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	3305      	adds	r3, #5
 8003138:	429a      	cmp	r2, r3
 800313a:	d215      	bcs.n	8003168 <MenuChargeAdapt+0x58>
			lcd_set_xy(0,0);
 800313c:	4629      	mov	r1, r5
 800313e:	4628      	mov	r0, r5
 8003140:	f7fe fc38 	bl	80019b4 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003144:	48b6      	ldr	r0, [pc, #728]	; (8003420 <MenuChargeAdapt+0x310>)
 8003146:	f7fe fcb5 	bl	8001ab4 <PrintToLCD>
			delay_ms(2000);
 800314a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800314e:	f7fd ff73 	bl	8001038 <delay_ms>
			lcd_set_xy(0,0);
 8003152:	4629      	mov	r1, r5
 8003154:	4628      	mov	r0, r5
 8003156:	f7fe fc2d 	bl	80019b4 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 800315a:	48b2      	ldr	r0, [pc, #712]	; (8003424 <MenuChargeAdapt+0x314>)
 800315c:	f7fe fcaa 	bl	8001ab4 <PrintToLCD>
			delay_ms(3000);
 8003160:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003164:	f7fd ff68 	bl	8001038 <delay_ms>
		ChargeStatusForTimer = 0;
 8003168:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 800316a:	4aaf      	ldr	r2, [pc, #700]	; (8003428 <MenuChargeAdapt+0x318>)
		ChargeStatusForTimer = 0;
 800316c:	7023      	strb	r3, [r4, #0]
		DisChargeStatusForTimer = 0;
 800316e:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 8003172:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 8003174:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 8003176:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 8003178:	7032      	strb	r2, [r6, #0]
	if (ChargeTimeSec > ChargeDurationSec)
 800317a:	4bac      	ldr	r3, [pc, #688]	; (800342c <MenuChargeAdapt+0x31c>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d972      	bls.n	800326a <MenuChargeAdapt+0x15a>
	OUT_OFF();
 8003184:	f7ff fa2e 	bl	80025e4 <OUT_OFF>
			ChargeStatusForTimer = 0;
 8003188:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 800318a:	7023      	strb	r3, [r4, #0]
    OUTStateAfterPowerUpFunction();
 800318c:	f7ff fc14 	bl	80029b8 <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 8003190:	f1ba 0f02 	cmp.w	sl, #2
 8003194:	4da6      	ldr	r5, [pc, #664]	; (8003430 <MenuChargeAdapt+0x320>)
 8003196:	f040 8082 	bne.w	800329e <MenuChargeAdapt+0x18e>
		if (On_off == 0)
 800319a:	4ba6      	ldr	r3, [pc, #664]	; (8003434 <MenuChargeAdapt+0x324>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d179      	bne.n	8003296 <MenuChargeAdapt+0x186>
			charge();
 80031a2:	f7ff fe37 	bl	8002e14 <charge>
			ChargeStatusForTimer = 1;
 80031a6:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 80031a8:	7023      	strb	r3, [r4, #0]
	if(CountShow == 0)
 80031aa:	f995 1000 	ldrsb.w	r1, [r5]
 80031ae:	2900      	cmp	r1, #0
 80031b0:	d136      	bne.n	8003220 <MenuChargeAdapt+0x110>
		lcd_set_xy(0,0);
 80031b2:	4608      	mov	r0, r1
 80031b4:	f7fe fbfe 	bl	80019b4 <lcd_set_xy>
		if (On_off ==0)
 80031b8:	4b9e      	ldr	r3, [pc, #632]	; (8003434 <MenuChargeAdapt+0x324>)
 80031ba:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8003448 <MenuChargeAdapt+0x338>
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	469b      	mov	fp, r3
 80031c2:	2a00      	cmp	r2, #0
 80031c4:	f040 8102 	bne.w	80033cc <MenuChargeAdapt+0x2bc>
			PrintToLCD(itoa_koma(U_PS,2));
 80031c8:	4b93      	ldr	r3, [pc, #588]	; (8003418 <MenuChargeAdapt+0x308>)
 80031ca:	2102      	movs	r1, #2
 80031cc:	8818      	ldrh	r0, [r3, #0]
 80031ce:	b280      	uxth	r0, r0
 80031d0:	f7fe f8c6 	bl	8001360 <itoa_koma>
 80031d4:	f7fe fc6e 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V ");
 80031d8:	4897      	ldr	r0, [pc, #604]	; (8003438 <MenuChargeAdapt+0x328>)
 80031da:	f7fe fc6b 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 80031de:	f8ba 0000 	ldrh.w	r0, [sl]
 80031e2:	2102      	movs	r1, #2
 80031e4:	b280      	uxth	r0, r0
 80031e6:	f7fe f8bb 	bl	8001360 <itoa_koma>
 80031ea:	f7fe fc63 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V   ");
 80031ee:	4893      	ldr	r0, [pc, #588]	; (800343c <MenuChargeAdapt+0x32c>)
			PrintToLCD("mA      ");
 80031f0:	f7fe fc60 	bl	8001ab4 <PrintToLCD>
		if (On_off ==0)
 80031f4:	f89b 3000 	ldrb.w	r3, [fp]
			lcd_set_xy(7,1);
 80031f8:	2101      	movs	r1, #1
 80031fa:	2007      	movs	r0, #7
 80031fc:	f8df a284 	ldr.w	sl, [pc, #644]	; 8003484 <MenuChargeAdapt+0x374>
		if (On_off ==0)
 8003200:	2b00      	cmp	r3, #0
 8003202:	f040 80f7 	bne.w	80033f4 <MenuChargeAdapt+0x2e4>
			lcd_set_xy(7,1);
 8003206:	f7fe fbd5 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(0,1);
 800320a:	2101      	movs	r1, #1
 800320c:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 800320e:	f7fe fbf9 	bl	8001a04 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8003212:	f89a 3000 	ldrb.w	r3, [sl]
 8003216:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8003218:	bf84      	itt	hi
 800321a:	2300      	movhi	r3, #0
 800321c:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 8003220:	f995 a000 	ldrsb.w	sl, [r5]
 8003224:	f1ba 0f01 	cmp.w	sl, #1
 8003228:	d145      	bne.n	80032b6 <MenuChargeAdapt+0x1a6>
		lcd_set_xy(0,0);
 800322a:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 800322c:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 800341c <MenuChargeAdapt+0x30c>
		lcd_set_xy(0,0);
 8003230:	4608      	mov	r0, r1
 8003232:	f7fe fbbf 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("T:");
 8003236:	4882      	ldr	r0, [pc, #520]	; (8003440 <MenuChargeAdapt+0x330>)
 8003238:	f7fe fc3c 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 800323c:	f8db 0010 	ldr.w	r0, [fp, #16]
 8003240:	f7fe f816 	bl	8001270 <itoa>
 8003244:	f7fe fc36 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("h MaxV:");
 8003248:	487e      	ldr	r0, [pc, #504]	; (8003444 <MenuChargeAdapt+0x334>)
 800324a:	f7fe fc33 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800324e:	230a      	movs	r3, #10
 8003250:	f8db 0020 	ldr.w	r0, [fp, #32]
 8003254:	4651      	mov	r1, sl
 8003256:	fbb0 f0f3 	udiv	r0, r0, r3
 800325a:	f7fe f881 	bl	8001360 <itoa_koma>
 800325e:	f7fe fc29 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V   ");
 8003262:	4876      	ldr	r0, [pc, #472]	; (800343c <MenuChargeAdapt+0x32c>)
 8003264:	f7fe fc26 	bl	8001ab4 <PrintToLCD>
 8003268:	e025      	b.n	80032b6 <MenuChargeAdapt+0x1a6>
		if (U_OUT> SettingsData.MaxVoltage)
 800326a:	4977      	ldr	r1, [pc, #476]	; (8003448 <MenuChargeAdapt+0x338>)
 800326c:	486b      	ldr	r0, [pc, #428]	; (800341c <MenuChargeAdapt+0x30c>)
 800326e:	880a      	ldrh	r2, [r1, #0]
 8003270:	6a03      	ldr	r3, [r0, #32]
 8003272:	b292      	uxth	r2, r2
 8003274:	429a      	cmp	r2, r3
 8003276:	d885      	bhi.n	8003184 <MenuChargeAdapt+0x74>
			if (U_OUT< (SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))   )
 8003278:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800327a:	2064      	movs	r0, #100	; 0x64
 800327c:	435a      	muls	r2, r3
 800327e:	fbb2 f2f0 	udiv	r2, r2, r0
 8003282:	8809      	ldrh	r1, [r1, #0]
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	b289      	uxth	r1, r1
 8003288:	4299      	cmp	r1, r3
 800328a:	f4bf af7f 	bcs.w	800318c <MenuChargeAdapt+0x7c>
				charge();
 800328e:	f7ff fdc1 	bl	8002e14 <charge>
				ChargeStatusForTimer = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	e779      	b.n	800318a <MenuChargeAdapt+0x7a>
	OUT_OFF();
 8003296:	f7ff f9a5 	bl	80025e4 <OUT_OFF>
			ChargeStatusForTimer = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	e784      	b.n	80031a8 <MenuChargeAdapt+0x98>
	if (key == KEY_BACK)
 800329e:	f1ba 0f01 	cmp.w	sl, #1
 80032a2:	d182      	bne.n	80031aa <MenuChargeAdapt+0x9a>
		CountShow--;
 80032a4:	782b      	ldrb	r3, [r5, #0]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM1-1;
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db01      	blt.n	80032b2 <MenuChargeAdapt+0x1a2>
		CountShow--;
 80032ae:	702b      	strb	r3, [r5, #0]
 80032b0:	e77b      	b.n	80031aa <MenuChargeAdapt+0x9a>
		if (CountShow<0) CountShow=MAXITEM1-1;
 80032b2:	2303      	movs	r3, #3
 80032b4:	702b      	strb	r3, [r5, #0]
	if(CountShow == 2)
 80032b6:	f995 3000 	ldrsb.w	r3, [r5]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d12f      	bne.n	800331e <MenuChargeAdapt+0x20e>
		lcd_set_xy(0,0);
 80032be:	2100      	movs	r1, #0
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80032c0:	f04f 0a0a 	mov.w	sl, #10
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 80032c4:	f8df b154 	ldr.w	fp, [pc, #340]	; 800341c <MenuChargeAdapt+0x30c>
		lcd_set_xy(0,0);
 80032c8:	4608      	mov	r0, r1
 80032ca:	f7fe fb73 	bl	80019b4 <lcd_set_xy>
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 80032ce:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 80032d2:	f7fd ffcd 	bl	8001270 <itoa>
 80032d6:	f7fe fbed 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("% ");
 80032da:	485c      	ldr	r0, [pc, #368]	; (800344c <MenuChargeAdapt+0x33c>)
 80032dc:	f7fe fbea 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80032e0:	f8db 0020 	ldr.w	r0, [fp, #32]
 80032e4:	2101      	movs	r1, #1
 80032e6:	fbb0 f0fa 	udiv	r0, r0, sl
 80032ea:	f7fe f839 	bl	8001360 <itoa_koma>
 80032ee:	f7fe fbe1 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V ");
 80032f2:	4851      	ldr	r0, [pc, #324]	; (8003438 <MenuChargeAdapt+0x328>)
 80032f4:	f7fe fbde 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))/10,1));
 80032f8:	2264      	movs	r2, #100	; 0x64
 80032fa:	f8db 3020 	ldr.w	r3, [fp, #32]
 80032fe:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 8003302:	2101      	movs	r1, #1
 8003304:	4358      	muls	r0, r3
 8003306:	fbb0 f0f2 	udiv	r0, r0, r2
 800330a:	1a18      	subs	r0, r3, r0
 800330c:	fbb0 f0fa 	udiv	r0, r0, sl
 8003310:	f7fe f826 	bl	8001360 <itoa_koma>
 8003314:	f7fe fbce 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V   ");
 8003318:	4848      	ldr	r0, [pc, #288]	; (800343c <MenuChargeAdapt+0x32c>)
 800331a:	f7fe fbcb 	bl	8001ab4 <PrintToLCD>
	if(CountShow == 3)
 800331e:	f995 5000 	ldrsb.w	r5, [r5]
 8003322:	2d03      	cmp	r5, #3
 8003324:	d11a      	bne.n	800335c <MenuChargeAdapt+0x24c>
		lcd_set_xy(0,0);
 8003326:	2100      	movs	r1, #0
 8003328:	4608      	mov	r0, r1
 800332a:	f7fe fb43 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("C ");
 800332e:	4848      	ldr	r0, [pc, #288]	; (8003450 <MenuChargeAdapt+0x340>)
 8003330:	f7fe fbc0 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8003334:	4b3c      	ldr	r3, [pc, #240]	; (8003428 <MenuChargeAdapt+0x318>)
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800333c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003340:	f7fd ff96 	bl	8001270 <itoa>
 8003344:	f7fe fbb6 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mAH     ");
 8003348:	4842      	ldr	r0, [pc, #264]	; (8003454 <MenuChargeAdapt+0x344>)
 800334a:	f7fe fbb3 	bl	8001ab4 <PrintToLCD>
		lcd_set_xy(3,1);
 800334e:	4628      	mov	r0, r5
 8003350:	2101      	movs	r1, #1
 8003352:	f7fe fb2f 	bl	80019b4 <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 8003356:	6838      	ldr	r0, [r7, #0]
 8003358:	f7ff f90e 	bl	8002578 <ClockOnLCD_noSec>
	delay_ms(MENUDELAY);
 800335c:	2064      	movs	r0, #100	; 0x64
 800335e:	f7fd fe6b 	bl	8001038 <delay_ms>
	logDebugD("Init status: ",InitiStatus,0);
 8003362:	483d      	ldr	r0, [pc, #244]	; (8003458 <MenuChargeAdapt+0x348>)
 8003364:	f001 ff70 	bl	8005248 <printToBufferWithoutEndUART1>
 8003368:	7831      	ldrb	r1, [r6, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	483b      	ldr	r0, [pc, #236]	; (800345c <MenuChargeAdapt+0x34c>)
 800336e:	f001 ffa9 	bl	80052c4 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003372:	4839      	ldr	r0, [pc, #228]	; (8003458 <MenuChargeAdapt+0x348>)
 8003374:	f001 ff68 	bl	8005248 <printToBufferWithoutEndUART1>
 8003378:	f898 1000 	ldrb.w	r1, [r8]
 800337c:	2200      	movs	r2, #0
 800337e:	4838      	ldr	r0, [pc, #224]	; (8003460 <MenuChargeAdapt+0x350>)
 8003380:	f001 ffa0 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003384:	4834      	ldr	r0, [pc, #208]	; (8003458 <MenuChargeAdapt+0x348>)
 8003386:	f001 ff5f 	bl	8005248 <printToBufferWithoutEndUART1>
 800338a:	7821      	ldrb	r1, [r4, #0]
 800338c:	2200      	movs	r2, #0
 800338e:	4835      	ldr	r0, [pc, #212]	; (8003464 <MenuChargeAdapt+0x354>)
 8003390:	f001 ff98 	bl	80052c4 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003394:	4830      	ldr	r0, [pc, #192]	; (8003458 <MenuChargeAdapt+0x348>)
 8003396:	f001 ff57 	bl	8005248 <printToBufferWithoutEndUART1>
 800339a:	6839      	ldr	r1, [r7, #0]
 800339c:	2200      	movs	r2, #0
 800339e:	4832      	ldr	r0, [pc, #200]	; (8003468 <MenuChargeAdapt+0x358>)
 80033a0:	f001 ff90 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 80033a4:	482c      	ldr	r0, [pc, #176]	; (8003458 <MenuChargeAdapt+0x348>)
 80033a6:	f001 ff4f 	bl	8005248 <printToBufferWithoutEndUART1>
 80033aa:	f899 1000 	ldrb.w	r1, [r9]
 80033ae:	2200      	movs	r2, #0
 80033b0:	482e      	ldr	r0, [pc, #184]	; (800346c <MenuChargeAdapt+0x35c>)
 80033b2:	f001 ff87 	bl	80052c4 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80033b6:	4828      	ldr	r0, [pc, #160]	; (8003458 <MenuChargeAdapt+0x348>)
 80033b8:	f001 ff46 	bl	8005248 <printToBufferWithoutEndUART1>
 80033bc:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <MenuChargeAdapt+0x360>)
 80033be:	2200      	movs	r2, #0
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	482c      	ldr	r0, [pc, #176]	; (8003474 <MenuChargeAdapt+0x364>)
}
 80033c4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80033c8:	f001 bf7c 	b.w	80052c4 <printToBufferUART1D>
			PrintToLCD(itoa_koma(U_OUT,2));
 80033cc:	f8ba 0000 	ldrh.w	r0, [sl]
 80033d0:	2102      	movs	r1, #2
 80033d2:	b280      	uxth	r0, r0
 80033d4:	f7fd ffc4 	bl	8001360 <itoa_koma>
 80033d8:	f7fe fb6c 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V ");
 80033dc:	4816      	ldr	r0, [pc, #88]	; (8003438 <MenuChargeAdapt+0x328>)
 80033de:	f7fe fb69 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(Current));
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <MenuChargeAdapt+0x368>)
 80033e4:	8818      	ldrh	r0, [r3, #0]
 80033e6:	b200      	sxth	r0, r0
 80033e8:	f7fd ff42 	bl	8001270 <itoa>
 80033ec:	f7fe fb62 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("mA      ");
 80033f0:	4822      	ldr	r0, [pc, #136]	; (800347c <MenuChargeAdapt+0x36c>)
 80033f2:	e6fd      	b.n	80031f0 <MenuChargeAdapt+0xe0>
			if (Blink_message_counter<=5)
 80033f4:	f89a 3000 	ldrb.w	r3, [sl]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	f67f af04 	bls.w	8003206 <MenuChargeAdapt+0xf6>
					lcd_set_xy(7,1);
 80033fe:	f7fe fad9 	bl	80019b4 <lcd_set_xy>
					LcdOutbyNumber(1,1);
 8003402:	2101      	movs	r1, #1
 8003404:	4608      	mov	r0, r1
 8003406:	e702      	b.n	800320e <MenuChargeAdapt+0xfe>
 8003408:	2000079d 	.word	0x2000079d
 800340c:	2000079c 	.word	0x2000079c
 8003410:	20000787 	.word	0x20000787
 8003414:	20000788 	.word	0x20000788
 8003418:	20000874 	.word	0x20000874
 800341c:	20000154 	.word	0x20000154
 8003420:	08006182 	.word	0x08006182
 8003424:	08006193 	.word	0x08006193
 8003428:	20000778 	.word	0x20000778
 800342c:	20000a18 	.word	0x20000a18
 8003430:	2000078d 	.word	0x2000078d
 8003434:	2000079e 	.word	0x2000079e
 8003438:	08005efa 	.word	0x08005efa
 800343c:	08005ea5 	.word	0x08005ea5
 8003440:	080061ac 	.word	0x080061ac
 8003444:	080061af 	.word	0x080061af
 8003448:	2000086c 	.word	0x2000086c
 800344c:	08006009 	.word	0x08006009
 8003450:	080061b7 	.word	0x080061b7
 8003454:	080060e8 	.word	0x080060e8
 8003458:	08005908 	.word	0x08005908
 800345c:	080060f1 	.word	0x080060f1
 8003460:	080060ff 	.word	0x080060ff
 8003464:	08006114 	.word	0x08006114
 8003468:	08006129 	.word	0x08006129
 800346c:	08006139 	.word	0x08006139
 8003470:	20000794 	.word	0x20000794
 8003474:	08006151 	.word	0x08006151
 8003478:	20000856 	.word	0x20000856
 800347c:	080060c7 	.word	0x080060c7
 8003480:	20000790 	.word	0x20000790
 8003484:	20000785 	.word	0x20000785

08003488 <charge1>:
{
 8003488:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=1)
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <charge1+0x34>)
 800348c:	f993 2000 	ldrsb.w	r2, [r3]
 8003490:	2a01      	cmp	r2, #1
 8003492:	d011      	beq.n	80034b8 <charge1+0x30>
		ChargeDischargeState = 1;
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
		OUT_ON();
 8003498:	f7ff fa78 	bl	800298c <OUT_ON>
		TimerForReadyMeasurement_ms = 0;
 800349c:	2200      	movs	r2, #0
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <charge1+0x38>)
		delay_ms(50);
 80034a0:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 80034a2:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 80034a4:	f7fd fdc8 	bl	8001038 <delay_ms>
		logDebug("Charge");
 80034a8:	4806      	ldr	r0, [pc, #24]	; (80034c4 <charge1+0x3c>)
 80034aa:	f001 fecd 	bl	8005248 <printToBufferWithoutEndUART1>
}
 80034ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("Charge");
 80034b2:	4805      	ldr	r0, [pc, #20]	; (80034c8 <charge1+0x40>)
 80034b4:	f001 be62 	b.w	800517c <printToBufferUART1>
}
 80034b8:	bd08      	pop	{r3, pc}
 80034ba:	bf00      	nop
 80034bc:	20000786 	.word	0x20000786
 80034c0:	200007c8 	.word	0x200007c8
 80034c4:	08005908 	.word	0x08005908
 80034c8:	080060c0 	.word	0x080060c0

080034cc <MenuTraining_new>:
{
 80034cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 80034d0:	4a97      	ldr	r2, [pc, #604]	; (8003730 <MenuTraining_new+0x264>)
{
 80034d2:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 80034d4:	7813      	ldrb	r3, [r2, #0]
 80034d6:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8003788 <MenuTraining_new+0x2bc>
 80034da:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 800378c <MenuTraining_new+0x2c0>
 80034de:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8003790 <MenuTraining_new+0x2c4>
 80034e2:	4f94      	ldr	r7, [pc, #592]	; (8003734 <MenuTraining_new+0x268>)
 80034e4:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8003794 <MenuTraining_new+0x2c8>
 80034e8:	4d93      	ldr	r5, [pc, #588]	; (8003738 <MenuTraining_new+0x26c>)
{
 80034ea:	9000      	str	r0, [sp, #0]
	if (EnterInMenu_Status == 0)
 80034ec:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 80034f0:	9201      	str	r2, [sp, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d13e      	bne.n	8003574 <MenuTraining_new+0xa8>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 80034f6:	4b91      	ldr	r3, [pc, #580]	; (800373c <MenuTraining_new+0x270>)
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	4b91      	ldr	r3, [pc, #580]	; (8003740 <MenuTraining_new+0x274>)
 80034fc:	b292      	uxth	r2, r2
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	3305      	adds	r3, #5
 8003502:	429a      	cmp	r2, r3
 8003504:	d215      	bcs.n	8003532 <MenuTraining_new+0x66>
			lcd_set_xy(0,0);
 8003506:	4621      	mov	r1, r4
 8003508:	4620      	mov	r0, r4
 800350a:	f7fe fa53 	bl	80019b4 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 800350e:	488d      	ldr	r0, [pc, #564]	; (8003744 <MenuTraining_new+0x278>)
 8003510:	f7fe fad0 	bl	8001ab4 <PrintToLCD>
			delay_ms(2000);
 8003514:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003518:	f7fd fd8e 	bl	8001038 <delay_ms>
			lcd_set_xy(0,0);
 800351c:	4621      	mov	r1, r4
 800351e:	4620      	mov	r0, r4
 8003520:	f7fe fa48 	bl	80019b4 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003524:	4888      	ldr	r0, [pc, #544]	; (8003748 <MenuTraining_new+0x27c>)
 8003526:	f7fe fac5 	bl	8001ab4 <PrintToLCD>
			delay_ms(3000);
 800352a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800352e:	f7fd fd83 	bl	8001038 <delay_ms>
		EnterInMenu_Status = 1;
 8003532:	2601      	movs	r6, #1
		ChargeStatusForTimer = 0;
 8003534:	2400      	movs	r4, #0
		EnterInMenu_Status = 1;
 8003536:	9b01      	ldr	r3, [sp, #4]
 8003538:	701e      	strb	r6, [r3, #0]
		DischargeTimeSec_Previous = 0;
 800353a:	4b84      	ldr	r3, [pc, #528]	; (800374c <MenuTraining_new+0x280>)
		ChargeStatusForTimer = 0;
 800353c:	f88a 4000 	strb.w	r4, [sl]
		DisChargeStatusForTimer = 0;
 8003540:	f88b 4000 	strb.w	r4, [fp]
		ChargeTimeSec = 0;
 8003544:	f8c9 4000 	str.w	r4, [r9]
		DischargeTimeSec = 0;
 8003548:	603c      	str	r4, [r7, #0]
		DischargeTimeSec_Previous = 0;
 800354a:	601c      	str	r4, [r3, #0]
		BatteryCapacityCharge = 0;
 800354c:	f8c8 4000 	str.w	r4, [r8]
		BatteryCapacityDischargeCurrent = 0;
 8003550:	602c      	str	r4, [r5, #0]
		ChargeStatusForTimer = 1;
 8003552:	f88a 6000 	strb.w	r6, [sl]
		charge1();
 8003556:	f7ff ff97 	bl	8003488 <charge1>
		ChargeDischargeStatus = CHARGEs;
 800355a:	4b7d      	ldr	r3, [pc, #500]	; (8003750 <MenuTraining_new+0x284>)
		lcd_set_xy(0,0);
 800355c:	4621      	mov	r1, r4
 800355e:	4620      	mov	r0, r4
		ChargeDischargeStatus = CHARGEs;
 8003560:	701e      	strb	r6, [r3, #0]
		lcd_set_xy(0,0);
 8003562:	f7fe fa27 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8003566:	487b      	ldr	r0, [pc, #492]	; (8003754 <MenuTraining_new+0x288>)
 8003568:	f7fe faa4 	bl	8001ab4 <PrintToLCD>
		delay_ms(1000);
 800356c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003570:	f7fd fd62 	bl	8001038 <delay_ms>
	if (Module16(Current)>5)
 8003574:	4c78      	ldr	r4, [pc, #480]	; (8003758 <MenuTraining_new+0x28c>)
 8003576:	8820      	ldrh	r0, [r4, #0]
 8003578:	b200      	sxth	r0, r0
 800357a:	f7fd ff59 	bl	8001430 <Module16>
 800357e:	2805      	cmp	r0, #5
 8003580:	9403      	str	r4, [sp, #12]
 8003582:	f340 81c8 	ble.w	8003916 <MenuTraining_new+0x44a>
		if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8003586:	4a75      	ldr	r2, [pc, #468]	; (800375c <MenuTraining_new+0x290>)
 8003588:	4e6d      	ldr	r6, [pc, #436]	; (8003740 <MenuTraining_new+0x274>)
 800358a:	8813      	ldrh	r3, [r2, #0]
 800358c:	69b1      	ldr	r1, [r6, #24]
 800358e:	b29b      	uxth	r3, r3
 8003590:	428b      	cmp	r3, r1
 8003592:	9202      	str	r2, [sp, #8]
 8003594:	d21f      	bcs.n	80035d6 <MenuTraining_new+0x10a>
 8003596:	4b6e      	ldr	r3, [pc, #440]	; (8003750 <MenuTraining_new+0x284>)
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	2a02      	cmp	r2, #2
 800359c:	d11b      	bne.n	80035d6 <MenuTraining_new+0x10a>
 800359e:	4b70      	ldr	r3, [pc, #448]	; (8003760 <MenuTraining_new+0x294>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035a6:	d916      	bls.n	80035d6 <MenuTraining_new+0x10a>
			DisChargeStatusForTimer = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f88b 3000 	strb.w	r3, [fp]
			if (BatteryCapacityDischargeCurrent/3600 > 100)
 80035ae:	6829      	ldr	r1, [r5, #0]
 80035b0:	4b6c      	ldr	r3, [pc, #432]	; (8003764 <MenuTraining_new+0x298>)
 80035b2:	4299      	cmp	r1, r3
 80035b4:	d903      	bls.n	80035be <MenuTraining_new+0xf2>
				MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 80035b6:	6828      	ldr	r0, [r5, #0]
 80035b8:	6839      	ldr	r1, [r7, #0]
 80035ba:	f7fe fc75 	bl	8001ea8 <MenuTraining_WriteInLOG>
			ChargeTimeSec = 0;
 80035be:	2300      	movs	r3, #0
			ChargeStatusForTimer = 1;
 80035c0:	2401      	movs	r4, #1
			ChargeTimeSec = 0;
 80035c2:	f8c9 3000 	str.w	r3, [r9]
			BatteryCapacityCharge = 0;
 80035c6:	f8c8 3000 	str.w	r3, [r8]
			ChargeStatusForTimer = 1;
 80035ca:	f88a 4000 	strb.w	r4, [sl]
			charge1();
 80035ce:	f7ff ff5b 	bl	8003488 <charge1>
			ChargeDischargeStatus = CHARGEs;
 80035d2:	4b5f      	ldr	r3, [pc, #380]	; (8003750 <MenuTraining_new+0x284>)
 80035d4:	701c      	strb	r4, [r3, #0]
		if ((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))
 80035d6:	9b02      	ldr	r3, [sp, #8]
 80035d8:	6a32      	ldr	r2, [r6, #32]
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4293      	cmp	r3, r2
 80035e0:	d908      	bls.n	80035f4 <MenuTraining_new+0x128>
 80035e2:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <MenuTraining_new+0x284>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d104      	bne.n	80035f4 <MenuTraining_new+0x128>
 80035ea:	4b5d      	ldr	r3, [pc, #372]	; (8003760 <MenuTraining_new+0x294>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035f2:	d809      	bhi.n	8003608 <MenuTraining_new+0x13c>
 80035f4:	4b5c      	ldr	r3, [pc, #368]	; (8003768 <MenuTraining_new+0x29c>)
 80035f6:	f8d9 2000 	ldr.w	r2, [r9]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d923      	bls.n	8003648 <MenuTraining_new+0x17c>
 8003600:	4b53      	ldr	r3, [pc, #332]	; (8003750 <MenuTraining_new+0x284>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d11f      	bne.n	8003648 <MenuTraining_new+0x17c>
			ChargeStatusForTimer = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	f88a 3000 	strb.w	r3, [sl]
			if (BatteryCapacityCharge/3600 > 100)
 800360e:	f8d8 2000 	ldr.w	r2, [r8]
 8003612:	4b54      	ldr	r3, [pc, #336]	; (8003764 <MenuTraining_new+0x298>)
 8003614:	429a      	cmp	r2, r3
 8003616:	d906      	bls.n	8003626 <MenuTraining_new+0x15a>
				MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003618:	f8d8 0000 	ldr.w	r0, [r8]
 800361c:	2201      	movs	r2, #1
 800361e:	f8d9 1000 	ldr.w	r1, [r9]
 8003622:	f7fe fc41 	bl	8001ea8 <MenuTraining_WriteInLOG>
			DischargeTimeSec_Previous = DischargeTimeSec;
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	4b48      	ldr	r3, [pc, #288]	; (800374c <MenuTraining_new+0x280>)
 800362a:	601a      	str	r2, [r3, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 800362c:	682a      	ldr	r2, [r5, #0]
 800362e:	4b4f      	ldr	r3, [pc, #316]	; (800376c <MenuTraining_new+0x2a0>)
 8003630:	609a      	str	r2, [r3, #8]
			DischargeTimeSec = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
			BatteryCapacityDischargeCurrent = 0;
 8003636:	602b      	str	r3, [r5, #0]
			DisChargeStatusForTimer = 1;
 8003638:	2301      	movs	r3, #1
 800363a:	f88b 3000 	strb.w	r3, [fp]
			discharge1();
 800363e:	f7ff f827 	bl	8002690 <discharge1>
			ChargeDischargeStatus = DISCHARGEs;
 8003642:	2202      	movs	r2, #2
 8003644:	4b42      	ldr	r3, [pc, #264]	; (8003750 <MenuTraining_new+0x284>)
 8003646:	701a      	strb	r2, [r3, #0]
		if (key == KEY_NEXT)
 8003648:	9a00      	ldr	r2, [sp, #0]
 800364a:	4c49      	ldr	r4, [pc, #292]	; (8003770 <MenuTraining_new+0x2a4>)
 800364c:	2a02      	cmp	r2, #2
 800364e:	f994 3000 	ldrsb.w	r3, [r4]
 8003652:	d134      	bne.n	80036be <MenuTraining_new+0x1f2>
			CountShow++;
 8003654:	3301      	adds	r3, #1
 8003656:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_TRAINING) CountShow=0;
 8003658:	2b05      	cmp	r3, #5
 800365a:	d137      	bne.n	80036cc <MenuTraining_new+0x200>
 800365c:	2300      	movs	r3, #0
 800365e:	7023      	strb	r3, [r4, #0]
			lcd_set_xy(0,0);
 8003660:	2100      	movs	r1, #0
 8003662:	4608      	mov	r0, r1
 8003664:	f7fe f9a6 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003668:	9b02      	ldr	r3, [sp, #8]
 800366a:	2102      	movs	r1, #2
 800366c:	8818      	ldrh	r0, [r3, #0]
 800366e:	b280      	uxth	r0, r0
 8003670:	f7fd fe76 	bl	8001360 <itoa_koma>
 8003674:	f7fe fa1e 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V ");
 8003678:	483e      	ldr	r0, [pc, #248]	; (8003774 <MenuTraining_new+0x2a8>)
 800367a:	f7fe fa1b 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(Current));
 800367e:	9b03      	ldr	r3, [sp, #12]
 8003680:	8818      	ldrh	r0, [r3, #0]
 8003682:	b200      	sxth	r0, r0
 8003684:	f7fd fdf4 	bl	8001270 <itoa>
 8003688:	f7fe fa14 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("mA     ");
 800368c:	483a      	ldr	r0, [pc, #232]	; (8003778 <MenuTraining_new+0x2ac>)
 800368e:	f7fe fa11 	bl	8001ab4 <PrintToLCD>
			lcd_set_xy(6,1);
 8003692:	2101      	movs	r1, #1
 8003694:	2006      	movs	r0, #6
 8003696:	f7fe f98d 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 800369a:	2101      	movs	r1, #1
 800369c:	2004      	movs	r0, #4
 800369e:	f7fe f9b1 	bl	8001a04 <LcdOutbyNumber>
			if (Status_Out ==1)
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <MenuTraining_new+0x2b0>)
 80036a4:	7819      	ldrb	r1, [r3, #0]
 80036a6:	2901      	cmp	r1, #1
 80036a8:	f040 812e 	bne.w	8003908 <MenuTraining_new+0x43c>
				lcd_set_xy(7,1);
 80036ac:	2007      	movs	r0, #7
 80036ae:	9100      	str	r1, [sp, #0]
 80036b0:	f7fe f980 	bl	80019b4 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 80036b4:	2000      	movs	r0, #0
 80036b6:	9900      	ldr	r1, [sp, #0]
				LcdOutbyNumber(2,1);//discharge
 80036b8:	f7fe f9a4 	bl	8001a04 <LcdOutbyNumber>
 80036bc:	e00b      	b.n	80036d6 <MenuTraining_new+0x20a>
		if (key == KEY_BACK)
 80036be:	9a00      	ldr	r2, [sp, #0]
 80036c0:	2a01      	cmp	r2, #1
 80036c2:	d104      	bne.n	80036ce <MenuTraining_new+0x202>
			CountShow--;
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db65      	blt.n	8003798 <MenuTraining_new+0x2cc>
			CountShow++;
 80036cc:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 80036ce:	f994 3000 	ldrsb.w	r3, [r4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0c4      	beq.n	8003660 <MenuTraining_new+0x194>
		if(CountShow == 1)
 80036d6:	f994 3000 	ldrsb.w	r3, [r4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d15e      	bne.n	800379c <MenuTraining_new+0x2d0>
			lcd_set_xy(0,0);
 80036de:	2100      	movs	r1, #0
 80036e0:	4608      	mov	r0, r1
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	f7fe f966 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 80036e8:	6930      	ldr	r0, [r6, #16]
 80036ea:	f7fd fdc1 	bl	8001270 <itoa>
 80036ee:	f7fe f9e1 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("h ");
 80036f2:	4823      	ldr	r0, [pc, #140]	; (8003780 <MenuTraining_new+0x2b4>)
 80036f4:	f7fe f9de 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 80036f8:	220a      	movs	r2, #10
 80036fa:	9b00      	ldr	r3, [sp, #0]
 80036fc:	69b0      	ldr	r0, [r6, #24]
 80036fe:	4619      	mov	r1, r3
 8003700:	fbb0 f0f2 	udiv	r0, r0, r2
 8003704:	f7fd fe2c 	bl	8001360 <itoa_koma>
 8003708:	f7fe f9d4 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V ");
 800370c:	4819      	ldr	r0, [pc, #100]	; (8003774 <MenuTraining_new+0x2a8>)
 800370e:	f7fe f9d1 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003712:	220a      	movs	r2, #10
 8003714:	9b00      	ldr	r3, [sp, #0]
 8003716:	6a30      	ldr	r0, [r6, #32]
 8003718:	4619      	mov	r1, r3
 800371a:	fbb0 f0f2 	udiv	r0, r0, r2
 800371e:	f7fd fe1f 	bl	8001360 <itoa_koma>
 8003722:	f7fe f9c7 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V     ");
 8003726:	4817      	ldr	r0, [pc, #92]	; (8003784 <MenuTraining_new+0x2b8>)
 8003728:	f7fe f9c4 	bl	8001ab4 <PrintToLCD>
 800372c:	e036      	b.n	800379c <MenuTraining_new+0x2d0>
 800372e:	bf00      	nop
 8003730:	2000079c 	.word	0x2000079c
 8003734:	20000794 	.word	0x20000794
 8003738:	2000077c 	.word	0x2000077c
 800373c:	20000874 	.word	0x20000874
 8003740:	20000154 	.word	0x20000154
 8003744:	08006182 	.word	0x08006182
 8003748:	08006193 	.word	0x08006193
 800374c:	20000798 	.word	0x20000798
 8003750:	20000270 	.word	0x20000270
 8003754:	080061ba 	.word	0x080061ba
 8003758:	20000856 	.word	0x20000856
 800375c:	2000086c 	.word	0x2000086c
 8003760:	200007c8 	.word	0x200007c8
 8003764:	00058c4f 	.word	0x00058c4f
 8003768:	20000a18 	.word	0x20000a18
 800376c:	200000f4 	.word	0x200000f4
 8003770:	2000078d 	.word	0x2000078d
 8003774:	08005efa 	.word	0x08005efa
 8003778:	080061a4 	.word	0x080061a4
 800377c:	200007a4 	.word	0x200007a4
 8003780:	08005a80 	.word	0x08005a80
 8003784:	08005ee7 	.word	0x08005ee7
 8003788:	20000787 	.word	0x20000787
 800378c:	20000790 	.word	0x20000790
 8003790:	20000788 	.word	0x20000788
 8003794:	20000778 	.word	0x20000778
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 8003798:	2304      	movs	r3, #4
 800379a:	7023      	strb	r3, [r4, #0]
		if(CountShow == 2)
 800379c:	f994 6000 	ldrsb.w	r6, [r4]
 80037a0:	2e02      	cmp	r6, #2
 80037a2:	d121      	bne.n	80037e8 <MenuTraining_new+0x31c>
			lcd_set_xy(0,0);
 80037a4:	2100      	movs	r1, #0
 80037a6:	4608      	mov	r0, r1
 80037a8:	f7fe f904 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 80037ac:	2101      	movs	r1, #1
 80037ae:	4630      	mov	r0, r6
 80037b0:	f7fe f928 	bl	8001a04 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80037b4:	2100      	movs	r1, #0
 80037b6:	2001      	movs	r0, #1
 80037b8:	f7fe f8fc 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(" ");
 80037bc:	485c      	ldr	r0, [pc, #368]	; (8003930 <MenuTraining_new+0x464>)
 80037be:	f7fe f979 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 80037c2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80037c6:	6828      	ldr	r0, [r5, #0]
 80037c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80037cc:	f7fd fd50 	bl	8001270 <itoa>
 80037d0:	f7fe f970 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("mAH      ");
 80037d4:	4857      	ldr	r0, [pc, #348]	; (8003934 <MenuTraining_new+0x468>)
 80037d6:	f7fe f96d 	bl	8001ab4 <PrintToLCD>
			lcd_set_xy(3,1);
 80037da:	2003      	movs	r0, #3
 80037dc:	2101      	movs	r1, #1
 80037de:	f7fe f8e9 	bl	80019b4 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 80037e2:	6838      	ldr	r0, [r7, #0]
 80037e4:	f7fe fec8 	bl	8002578 <ClockOnLCD_noSec>
		if(CountShow == 3)
 80037e8:	f994 6000 	ldrsb.w	r6, [r4]
 80037ec:	2e03      	cmp	r6, #3
 80037ee:	d123      	bne.n	8003838 <MenuTraining_new+0x36c>
			lcd_set_xy(0,0);
 80037f0:	2100      	movs	r1, #0
 80037f2:	4608      	mov	r0, r1
 80037f4:	f7fe f8de 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 80037f8:	2101      	movs	r1, #1
 80037fa:	2000      	movs	r0, #0
 80037fc:	f7fe f902 	bl	8001a04 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8003800:	2100      	movs	r1, #0
 8003802:	2001      	movs	r0, #1
 8003804:	f7fe f8d6 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(" ");
 8003808:	4849      	ldr	r0, [pc, #292]	; (8003930 <MenuTraining_new+0x464>)
 800380a:	f7fe f953 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 800380e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003812:	f8d8 0000 	ldr.w	r0, [r8]
 8003816:	fbb0 f0f3 	udiv	r0, r0, r3
 800381a:	f7fd fd29 	bl	8001270 <itoa>
 800381e:	f7fe f949 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("mAH      ");
 8003822:	4844      	ldr	r0, [pc, #272]	; (8003934 <MenuTraining_new+0x468>)
 8003824:	f7fe f946 	bl	8001ab4 <PrintToLCD>
			lcd_set_xy(3,1);
 8003828:	4630      	mov	r0, r6
 800382a:	2101      	movs	r1, #1
 800382c:	f7fe f8c2 	bl	80019b4 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 8003830:	f8d9 0000 	ldr.w	r0, [r9]
 8003834:	f7fe fea0 	bl	8002578 <ClockOnLCD_noSec>
		if(CountShow == 4)
 8003838:	f994 3000 	ldrsb.w	r3, [r4]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d123      	bne.n	8003888 <MenuTraining_new+0x3bc>
			lcd_set_xy(0,0);
 8003840:	2100      	movs	r1, #0
 8003842:	4608      	mov	r0, r1
 8003844:	f7fe f8b6 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8003848:	2101      	movs	r1, #1
 800384a:	2002      	movs	r0, #2
 800384c:	f7fe f8da 	bl	8001a04 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8003850:	2100      	movs	r1, #0
 8003852:	2001      	movs	r0, #1
 8003854:	f7fe f8ae 	bl	80019b4 <lcd_set_xy>
			PrintToLCD("P ");
 8003858:	4837      	ldr	r0, [pc, #220]	; (8003938 <MenuTraining_new+0x46c>)
 800385a:	f7fe f92b 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600));
 800385e:	4b37      	ldr	r3, [pc, #220]	; (800393c <MenuTraining_new+0x470>)
 8003860:	6898      	ldr	r0, [r3, #8]
 8003862:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003866:	fbb0 f0f3 	udiv	r0, r0, r3
 800386a:	f7fd fd01 	bl	8001270 <itoa>
 800386e:	f7fe f921 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("mAH     ");
 8003872:	4833      	ldr	r0, [pc, #204]	; (8003940 <MenuTraining_new+0x474>)
 8003874:	f7fe f91e 	bl	8001ab4 <PrintToLCD>
			lcd_set_xy(3,1);
 8003878:	2003      	movs	r0, #3
 800387a:	2101      	movs	r1, #1
 800387c:	f7fe f89a 	bl	80019b4 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8003880:	4b30      	ldr	r3, [pc, #192]	; (8003944 <MenuTraining_new+0x478>)
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	f7fe fe78 	bl	8002578 <ClockOnLCD_noSec>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003888:	482f      	ldr	r0, [pc, #188]	; (8003948 <MenuTraining_new+0x47c>)
 800388a:	f001 fcdd 	bl	8005248 <printToBufferWithoutEndUART1>
 800388e:	9b01      	ldr	r3, [sp, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	7819      	ldrb	r1, [r3, #0]
 8003894:	482d      	ldr	r0, [pc, #180]	; (800394c <MenuTraining_new+0x480>)
 8003896:	f001 fd15 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 800389a:	482b      	ldr	r0, [pc, #172]	; (8003948 <MenuTraining_new+0x47c>)
 800389c:	f001 fcd4 	bl	8005248 <printToBufferWithoutEndUART1>
 80038a0:	f89a 1000 	ldrb.w	r1, [sl]
 80038a4:	2200      	movs	r2, #0
 80038a6:	482a      	ldr	r0, [pc, #168]	; (8003950 <MenuTraining_new+0x484>)
 80038a8:	f001 fd0c 	bl	80052c4 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 80038ac:	4826      	ldr	r0, [pc, #152]	; (8003948 <MenuTraining_new+0x47c>)
 80038ae:	f001 fccb 	bl	8005248 <printToBufferWithoutEndUART1>
 80038b2:	f8d9 1000 	ldr.w	r1, [r9]
 80038b6:	2200      	movs	r2, #0
 80038b8:	4826      	ldr	r0, [pc, #152]	; (8003954 <MenuTraining_new+0x488>)
 80038ba:	f001 fd03 	bl	80052c4 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 80038be:	4822      	ldr	r0, [pc, #136]	; (8003948 <MenuTraining_new+0x47c>)
 80038c0:	f001 fcc2 	bl	8005248 <printToBufferWithoutEndUART1>
 80038c4:	f8d8 1000 	ldr.w	r1, [r8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	4823      	ldr	r0, [pc, #140]	; (8003958 <MenuTraining_new+0x48c>)
 80038cc:	f001 fcfa 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 80038d0:	481d      	ldr	r0, [pc, #116]	; (8003948 <MenuTraining_new+0x47c>)
 80038d2:	f001 fcb9 	bl	8005248 <printToBufferWithoutEndUART1>
 80038d6:	f89b 1000 	ldrb.w	r1, [fp]
 80038da:	2200      	movs	r2, #0
 80038dc:	481f      	ldr	r0, [pc, #124]	; (800395c <MenuTraining_new+0x490>)
 80038de:	f001 fcf1 	bl	80052c4 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80038e2:	4819      	ldr	r0, [pc, #100]	; (8003948 <MenuTraining_new+0x47c>)
 80038e4:	f001 fcb0 	bl	8005248 <printToBufferWithoutEndUART1>
 80038e8:	6839      	ldr	r1, [r7, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	481c      	ldr	r0, [pc, #112]	; (8003960 <MenuTraining_new+0x494>)
 80038ee:	f001 fce9 	bl	80052c4 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80038f2:	4815      	ldr	r0, [pc, #84]	; (8003948 <MenuTraining_new+0x47c>)
 80038f4:	f001 fca8 	bl	8005248 <printToBufferWithoutEndUART1>
 80038f8:	2200      	movs	r2, #0
 80038fa:	6829      	ldr	r1, [r5, #0]
 80038fc:	4819      	ldr	r0, [pc, #100]	; (8003964 <MenuTraining_new+0x498>)
}
 80038fe:	b005      	add	sp, #20
 8003900:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8003904:	f001 bcde 	b.w	80052c4 <printToBufferUART1D>
				lcd_set_xy(7,1);
 8003908:	2101      	movs	r1, #1
 800390a:	2007      	movs	r0, #7
 800390c:	f7fe f852 	bl	80019b4 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 8003910:	2101      	movs	r1, #1
 8003912:	2002      	movs	r0, #2
 8003914:	e6d0      	b.n	80036b8 <MenuTraining_new+0x1ec>
		if (TimerForReadyMeasurement_ms>1000)
 8003916:	4b14      	ldr	r3, [pc, #80]	; (8003968 <MenuTraining_new+0x49c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800391e:	d9b3      	bls.n	8003888 <MenuTraining_new+0x3bc>
			lcd_set_xy(0,0);
 8003920:	2100      	movs	r1, #0
 8003922:	4608      	mov	r0, r1
 8003924:	f7fe f846 	bl	80019b4 <lcd_set_xy>
			PrintToLCD("NO/BAD Battery  ");
 8003928:	4810      	ldr	r0, [pc, #64]	; (800396c <MenuTraining_new+0x4a0>)
 800392a:	f7fe f8c3 	bl	8001ab4 <PrintToLCD>
 800392e:	e7ab      	b.n	8003888 <MenuTraining_new+0x3bc>
 8003930:	080060a3 	.word	0x080060a3
 8003934:	080061cb 	.word	0x080061cb
 8003938:	080060dc 	.word	0x080060dc
 800393c:	200000f4 	.word	0x200000f4
 8003940:	080060e8 	.word	0x080060e8
 8003944:	20000798 	.word	0x20000798
 8003948:	08005908 	.word	0x08005908
 800394c:	080060ff 	.word	0x080060ff
 8003950:	08006114 	.word	0x08006114
 8003954:	08006129 	.word	0x08006129
 8003958:	080061e6 	.word	0x080061e6
 800395c:	08006139 	.word	0x08006139
 8003960:	08006151 	.word	0x08006151
 8003964:	080061fe 	.word	0x080061fe
 8003968:	200007c8 	.word	0x200007c8
 800396c:	080061d5 	.word	0x080061d5

08003970 <MenuSwing>:
   	lcd_set_xy(0,0);
 8003970:	2100      	movs	r1, #0
{
 8003972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003974:	4606      	mov	r6, r0
   	lcd_set_xy(0,0);
 8003976:	4608      	mov	r0, r1
 8003978:	f7fe f81c 	bl	80019b4 <lcd_set_xy>
       	EnterInMenu_Status = 1;
 800397c:	2201      	movs	r2, #1
 800397e:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <MenuSwing+0x1b8>)
 8003980:	701a      	strb	r2, [r3, #0]
       	if (InitiStatus==0)
 8003982:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <MenuSwing+0x1bc>)
 8003984:	7819      	ldrb	r1, [r3, #0]
 8003986:	b911      	cbnz	r1, 800398e <MenuSwing+0x1e>
       		InitiStatus=1;
 8003988:	701a      	strb	r2, [r3, #0]
       		Start_Timer_sec();
 800398a:	f7fe fde9 	bl	8002560 <Start_Timer_sec>
       if (Timer_Sec<=SettingsData.Swing_Chrg_time)
 800398e:	4d68      	ldr	r5, [pc, #416]	; (8003b30 <MenuSwing+0x1c0>)
 8003990:	4c68      	ldr	r4, [pc, #416]	; (8003b34 <MenuSwing+0x1c4>)
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003996:	429a      	cmp	r2, r3
 8003998:	d312      	bcc.n	80039c0 <MenuSwing+0x50>
    	   charge1();
 800399a:	f7ff fd75 	bl	8003488 <charge1>
           if (U_OUT>SettingsData.MaxVoltage && TimerForReadyMeasurement_ms>400)
 800399e:	4b66      	ldr	r3, [pc, #408]	; (8003b38 <MenuSwing+0x1c8>)
 80039a0:	6a22      	ldr	r2, [r4, #32]
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d90a      	bls.n	80039c0 <MenuSwing+0x50>
 80039aa:	4b64      	ldr	r3, [pc, #400]	; (8003b3c <MenuSwing+0x1cc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80039b2:	d905      	bls.n	80039c0 <MenuSwing+0x50>
        	   ReStart_Timer_sec();
 80039b4:	f7fe fdd4 	bl	8002560 <Start_Timer_sec>
               Timer_Sec  = Timer_Sec+ SettingsData.Swing_Chrg_time;
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80039bc:	4413      	add	r3, r2
 80039be:	602b      	str	r3, [r5, #0]
       if (Timer_Sec > SettingsData.Swing_Chrg_time)
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d20e      	bcs.n	80039e6 <MenuSwing+0x76>
           discharge1();
 80039c8:	f7fe fe62 	bl	8002690 <discharge1>
           if (U_OUT<SettingsData.LowVoltage && TimerForReadyMeasurement_ms>400)
 80039cc:	4b5a      	ldr	r3, [pc, #360]	; (8003b38 <MenuSwing+0x1c8>)
 80039ce:	69a2      	ldr	r2, [r4, #24]
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d206      	bcs.n	80039e6 <MenuSwing+0x76>
 80039d8:	4b58      	ldr	r3, [pc, #352]	; (8003b3c <MenuSwing+0x1cc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80039e0:	d901      	bls.n	80039e6 <MenuSwing+0x76>
        	   ReStart_Timer_sec();
 80039e2:	f7fe fdbd 	bl	8002560 <Start_Timer_sec>
       if (Timer_Sec > (SettingsData.Swing_Chrg_time+SettingsData.Swing_DChrg_time))
 80039e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80039ea:	682a      	ldr	r2, [r5, #0]
 80039ec:	440b      	add	r3, r1
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d201      	bcs.n	80039f6 <MenuSwing+0x86>
    	   ReStart_Timer_sec();
 80039f2:	f7fe fdb5 	bl	8002560 <Start_Timer_sec>
		if (key == KEY_NEXT)
 80039f6:	4d52      	ldr	r5, [pc, #328]	; (8003b40 <MenuSwing+0x1d0>)
 80039f8:	2e02      	cmp	r6, #2
 80039fa:	f995 3000 	ldrsb.w	r3, [r5]
 80039fe:	d133      	bne.n	8003a68 <MenuSwing+0xf8>
			CountShow++;
 8003a00:	3301      	adds	r3, #1
 8003a02:	b25b      	sxtb	r3, r3
			if (CountShow==MAXITEM6) CountShow=0;
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d135      	bne.n	8003a74 <MenuSwing+0x104>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	702b      	strb	r3, [r5, #0]
			lcd_set_xy(0,0);
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4608      	mov	r0, r1
 8003a10:	f7fd ffd0 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003a14:	4b48      	ldr	r3, [pc, #288]	; (8003b38 <MenuSwing+0x1c8>)
 8003a16:	2102      	movs	r1, #2
 8003a18:	8818      	ldrh	r0, [r3, #0]
 8003a1a:	b280      	uxth	r0, r0
 8003a1c:	f7fd fca0 	bl	8001360 <itoa_koma>
 8003a20:	f7fe f848 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V ");
 8003a24:	4847      	ldr	r0, [pc, #284]	; (8003b44 <MenuSwing+0x1d4>)
 8003a26:	f7fe f845 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <MenuSwing+0x1d8>)
 8003a2c:	8818      	ldrh	r0, [r3, #0]
 8003a2e:	b200      	sxth	r0, r0
 8003a30:	f7fd fc1e 	bl	8001270 <itoa>
 8003a34:	f7fe f83e 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("mA     ");
 8003a38:	4844      	ldr	r0, [pc, #272]	; (8003b4c <MenuSwing+0x1dc>)
 8003a3a:	f7fe f83b 	bl	8001ab4 <PrintToLCD>
			lcd_set_xy(6,1);
 8003a3e:	2101      	movs	r1, #1
 8003a40:	2006      	movs	r0, #6
 8003a42:	f7fd ffb7 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(5,1);
 8003a46:	2101      	movs	r1, #1
 8003a48:	2005      	movs	r0, #5
 8003a4a:	f7fd ffdb 	bl	8001a04 <LcdOutbyNumber>
			if (Status_Out ==1)
 8003a4e:	4b40      	ldr	r3, [pc, #256]	; (8003b50 <MenuSwing+0x1e0>)
 8003a50:	781e      	ldrb	r6, [r3, #0]
 8003a52:	2e01      	cmp	r6, #1
 8003a54:	d15f      	bne.n	8003b16 <MenuSwing+0x1a6>
				lcd_set_xy(7,1);
 8003a56:	4631      	mov	r1, r6
 8003a58:	2007      	movs	r0, #7
 8003a5a:	f7fd ffab 	bl	80019b4 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8003a5e:	4631      	mov	r1, r6
 8003a60:	2000      	movs	r0, #0
				LcdOutbyNumber(2,1);//discharge
 8003a62:	f7fd ffcf 	bl	8001a04 <LcdOutbyNumber>
 8003a66:	e00a      	b.n	8003a7e <MenuSwing+0x10e>
		if (key == KEY_BACK)
 8003a68:	2e01      	cmp	r6, #1
 8003a6a:	d104      	bne.n	8003a76 <MenuSwing+0x106>
			CountShow--;
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAXITEM6-1;
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	db2c      	blt.n	8003ace <MenuSwing+0x15e>
			CountShow++;
 8003a74:	702b      	strb	r3, [r5, #0]
		if(CountShow == 0)
 8003a76:	f995 3000 	ldrsb.w	r3, [r5]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0c6      	beq.n	8003a0c <MenuSwing+0x9c>
		if(CountShow == 1)
 8003a7e:	f995 6000 	ldrsb.w	r6, [r5]
 8003a82:	2e01      	cmp	r6, #1
 8003a84:	d125      	bne.n	8003ad2 <MenuSwing+0x162>
			lcd_set_xy(0,0);
 8003a86:	2100      	movs	r1, #0
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003a88:	270a      	movs	r7, #10
			lcd_set_xy(0,0);
 8003a8a:	4608      	mov	r0, r1
 8003a8c:	f7fd ff92 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8003a90:	6920      	ldr	r0, [r4, #16]
 8003a92:	f7fd fbed 	bl	8001270 <itoa>
 8003a96:	f7fe f80d 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("h ");
 8003a9a:	482e      	ldr	r0, [pc, #184]	; (8003b54 <MenuSwing+0x1e4>)
 8003a9c:	f7fe f80a 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003aa0:	69a0      	ldr	r0, [r4, #24]
 8003aa2:	4631      	mov	r1, r6
 8003aa4:	fbb0 f0f7 	udiv	r0, r0, r7
 8003aa8:	f7fd fc5a 	bl	8001360 <itoa_koma>
 8003aac:	f7fe f802 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V ");
 8003ab0:	4824      	ldr	r0, [pc, #144]	; (8003b44 <MenuSwing+0x1d4>)
 8003ab2:	f7fd ffff 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003ab6:	6a20      	ldr	r0, [r4, #32]
 8003ab8:	4631      	mov	r1, r6
 8003aba:	fbb0 f0f7 	udiv	r0, r0, r7
 8003abe:	f7fd fc4f 	bl	8001360 <itoa_koma>
 8003ac2:	f7fd fff7 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V     ");
 8003ac6:	4824      	ldr	r0, [pc, #144]	; (8003b58 <MenuSwing+0x1e8>)
 8003ac8:	f7fd fff4 	bl	8001ab4 <PrintToLCD>
 8003acc:	e001      	b.n	8003ad2 <MenuSwing+0x162>
			if (CountShow<0) CountShow=MAXITEM6-1;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	702b      	strb	r3, [r5, #0]
		if(CountShow == 2)
 8003ad2:	f995 3000 	ldrsb.w	r3, [r5]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d124      	bne.n	8003b24 <MenuSwing+0x1b4>
			lcd_set_xy(0,0);
 8003ada:	2100      	movs	r1, #0
 8003adc:	4608      	mov	r0, r1
 8003ade:	f7fd ff69 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 8003ae2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003ae4:	f7fd fbc4 	bl	8001270 <itoa>
 8003ae8:	f7fd ffe4 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("s ");
 8003aec:	481b      	ldr	r0, [pc, #108]	; (8003b5c <MenuSwing+0x1ec>)
 8003aee:	f7fd ffe1 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 8003af2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003af4:	f7fd fbbc 	bl	8001270 <itoa>
 8003af8:	f7fd ffdc 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("s      ");
 8003afc:	4818      	ldr	r0, [pc, #96]	; (8003b60 <MenuSwing+0x1f0>)
 8003afe:	f7fd ffd9 	bl	8001ab4 <PrintToLCD>
			lcd_set_xy(3,1);
 8003b02:	2003      	movs	r0, #3
 8003b04:	2101      	movs	r1, #1
 8003b06:	f7fd ff55 	bl	80019b4 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 8003b0a:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <MenuSwing+0x1f4>)
 8003b0c:	6818      	ldr	r0, [r3, #0]
}
 8003b0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			ClockOnLCD_noSec(DischargeTimeSec);
 8003b12:	f7fe bd31 	b.w	8002578 <ClockOnLCD_noSec>
				lcd_set_xy(7,1);
 8003b16:	2101      	movs	r1, #1
 8003b18:	2007      	movs	r0, #7
 8003b1a:	f7fd ff4b 	bl	80019b4 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 8003b1e:	2101      	movs	r1, #1
 8003b20:	2002      	movs	r0, #2
 8003b22:	e79e      	b.n	8003a62 <MenuSwing+0xf2>
}
 8003b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b26:	bf00      	nop
 8003b28:	2000079c 	.word	0x2000079c
 8003b2c:	2000079d 	.word	0x2000079d
 8003b30:	200007cc 	.word	0x200007cc
 8003b34:	20000154 	.word	0x20000154
 8003b38:	2000086c 	.word	0x2000086c
 8003b3c:	200007c8 	.word	0x200007c8
 8003b40:	2000078d 	.word	0x2000078d
 8003b44:	08005efa 	.word	0x08005efa
 8003b48:	20000856 	.word	0x20000856
 8003b4c:	080061a4 	.word	0x080061a4
 8003b50:	200007a4 	.word	0x200007a4
 8003b54:	08005a80 	.word	0x08005a80
 8003b58:	08005ee7 	.word	0x08005ee7
 8003b5c:	08006234 	.word	0x08006234
 8003b60:	08006220 	.word	0x08006220
 8003b64:	20000794 	.word	0x20000794

08003b68 <MenuCheckingCapacity>:
{
 8003b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8003b6c:	4aa0      	ldr	r2, [pc, #640]	; (8003df0 <MenuCheckingCapacity+0x288>)
{
 8003b6e:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 8003b70:	7813      	ldrb	r3, [r2, #0]
{
 8003b72:	4683      	mov	fp, r0
 8003b74:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 8003e4c <MenuCheckingCapacity+0x2e4>
 8003b78:	4e9e      	ldr	r6, [pc, #632]	; (8003df4 <MenuCheckingCapacity+0x28c>)
 8003b7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003e50 <MenuCheckingCapacity+0x2e8>
 8003b7e:	4d9e      	ldr	r5, [pc, #632]	; (8003df8 <MenuCheckingCapacity+0x290>)
 8003b80:	4f9e      	ldr	r7, [pc, #632]	; (8003dfc <MenuCheckingCapacity+0x294>)
 8003b82:	4c9f      	ldr	r4, [pc, #636]	; (8003e00 <MenuCheckingCapacity+0x298>)
	if (EnterInMenu_Status == 0)
 8003b84:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8003b88:	9201      	str	r2, [sp, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 8162 	bne.w	8003e54 <MenuCheckingCapacity+0x2ec>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003b90:	4b9c      	ldr	r3, [pc, #624]	; (8003e04 <MenuCheckingCapacity+0x29c>)
 8003b92:	881a      	ldrh	r2, [r3, #0]
 8003b94:	4b9c      	ldr	r3, [pc, #624]	; (8003e08 <MenuCheckingCapacity+0x2a0>)
 8003b96:	b292      	uxth	r2, r2
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	3305      	adds	r3, #5
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d215      	bcs.n	8003bcc <MenuCheckingCapacity+0x64>
			lcd_set_xy(0,0);
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	f7fd ff06 	bl	80019b4 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003ba8:	4898      	ldr	r0, [pc, #608]	; (8003e0c <MenuCheckingCapacity+0x2a4>)
 8003baa:	f7fd ff83 	bl	8001ab4 <PrintToLCD>
			delay_ms(2000);
 8003bae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003bb2:	f7fd fa41 	bl	8001038 <delay_ms>
			lcd_set_xy(0,0);
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	4640      	mov	r0, r8
 8003bba:	f7fd fefb 	bl	80019b4 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003bbe:	4894      	ldr	r0, [pc, #592]	; (8003e10 <MenuCheckingCapacity+0x2a8>)
 8003bc0:	f7fd ff78 	bl	8001ab4 <PrintToLCD>
			delay_ms(3000);
 8003bc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003bc8:	f7fd fa36 	bl	8001038 <delay_ms>
		EnterInMenu_Status = 1;
 8003bcc:	2301      	movs	r3, #1
		ChargeStatusForTimer = 0;
 8003bce:	f04f 0800 	mov.w	r8, #0
		EnterInMenu_Status = 1;
 8003bd2:	9a01      	ldr	r2, [sp, #4]
 8003bd4:	7013      	strb	r3, [r2, #0]
		DisChargeStatusForTimer = 0;
 8003bd6:	4a8f      	ldr	r2, [pc, #572]	; (8003e14 <MenuCheckingCapacity+0x2ac>)
		ChargeStatusForTimer = 0;
 8003bd8:	f88a 8000 	strb.w	r8, [sl]
		DisChargeStatusForTimer = 0;
 8003bdc:	f882 8000 	strb.w	r8, [r2]
		DischargeTimeSec_Previous = 0;
 8003be0:	4a8d      	ldr	r2, [pc, #564]	; (8003e18 <MenuCheckingCapacity+0x2b0>)
		ChargeTimeSec = 0;
 8003be2:	f8c6 8000 	str.w	r8, [r6]
		DischargeTimeSec = 0;
 8003be6:	f8c9 8000 	str.w	r8, [r9]
		DischargeTimeSec_Previous = 0;
 8003bea:	f8c2 8000 	str.w	r8, [r2]
		BatteryCapacityCharge = 0;
 8003bee:	f8c5 8000 	str.w	r8, [r5]
		BatteryCapacityDischargeCurrent = 0;
 8003bf2:	f8c7 8000 	str.w	r8, [r7]
		ChargeStatusForTimer = 1;
 8003bf6:	f88a 3000 	strb.w	r3, [sl]
		charge1();
 8003bfa:	f7ff fc45 	bl	8003488 <charge1>
		ChargeDischargeStatus = CHARGEs;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4a86      	ldr	r2, [pc, #536]	; (8003e1c <MenuCheckingCapacity+0x2b4>)
		lcd_set_xy(0,0);
 8003c02:	4641      	mov	r1, r8
 8003c04:	4640      	mov	r0, r8
		ChargeDischargeStatus = CHARGEs;
 8003c06:	7013      	strb	r3, [r2, #0]
		lcd_set_xy(0,0);
 8003c08:	f7fd fed4 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8003c0c:	4884      	ldr	r0, [pc, #528]	; (8003e20 <MenuCheckingCapacity+0x2b8>)
 8003c0e:	f7fd ff51 	bl	8001ab4 <PrintToLCD>
		delay_ms(1000);
 8003c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c16:	f7fd fa0f 	bl	8001038 <delay_ms>
		CheckingCapacityCounter = 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	7023      	strb	r3, [r4, #0]
		if (Module16(Current)>5)
 8003c1e:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8003e48 <MenuCheckingCapacity+0x2e0>
 8003c22:	f8b8 0000 	ldrh.w	r0, [r8]
 8003c26:	b200      	sxth	r0, r0
 8003c28:	f7fd fc02 	bl	8001430 <Module16>
 8003c2c:	2805      	cmp	r0, #5
 8003c2e:	f8cd 8008 	str.w	r8, [sp, #8]
 8003c32:	f340 8195 	ble.w	8003f60 <MenuCheckingCapacity+0x3f8>
			if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8003c36:	4b7b      	ldr	r3, [pc, #492]	; (8003e24 <MenuCheckingCapacity+0x2bc>)
 8003c38:	4a73      	ldr	r2, [pc, #460]	; (8003e08 <MenuCheckingCapacity+0x2a0>)
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	6991      	ldr	r1, [r2, #24]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	428b      	cmp	r3, r1
 8003c42:	4690      	mov	r8, r2
 8003c44:	d229      	bcs.n	8003c9a <MenuCheckingCapacity+0x132>
 8003c46:	4b75      	ldr	r3, [pc, #468]	; (8003e1c <MenuCheckingCapacity+0x2b4>)
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	2a02      	cmp	r2, #2
 8003c4c:	d125      	bne.n	8003c9a <MenuCheckingCapacity+0x132>
 8003c4e:	4b76      	ldr	r3, [pc, #472]	; (8003e28 <MenuCheckingCapacity+0x2c0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c56:	d920      	bls.n	8003c9a <MenuCheckingCapacity+0x132>
				DisChargeStatusForTimer = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	496e      	ldr	r1, [pc, #440]	; (8003e14 <MenuCheckingCapacity+0x2ac>)
 8003c5c:	700b      	strb	r3, [r1, #0]
				if (BatteryCapacityDischargeCurrent/3600 > 100)
 8003c5e:	6839      	ldr	r1, [r7, #0]
 8003c60:	4b72      	ldr	r3, [pc, #456]	; (8003e2c <MenuCheckingCapacity+0x2c4>)
 8003c62:	4299      	cmp	r1, r3
 8003c64:	d904      	bls.n	8003c70 <MenuCheckingCapacity+0x108>
					MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8003c66:	6838      	ldr	r0, [r7, #0]
 8003c68:	f8d9 1000 	ldr.w	r1, [r9]
 8003c6c:	f7fe f91c 	bl	8001ea8 <MenuTraining_WriteInLOG>
				DischargeTimeSec_Previous = DischargeTimeSec;
 8003c70:	f8d9 2000 	ldr.w	r2, [r9]
 8003c74:	4b68      	ldr	r3, [pc, #416]	; (8003e18 <MenuCheckingCapacity+0x2b0>)
 8003c76:	601a      	str	r2, [r3, #0]
				SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	4b6d      	ldr	r3, [pc, #436]	; (8003e30 <MenuCheckingCapacity+0x2c8>)
 8003c7c:	609a      	str	r2, [r3, #8]
				BatteryCapacityCharge = 0;
 8003c7e:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 8003c80:	2201      	movs	r2, #1
 8003c82:	f88a 2000 	strb.w	r2, [sl]
				BatteryCapacityCharge = 0;
 8003c86:	602b      	str	r3, [r5, #0]
				ChargeTimeSec = 0;
 8003c88:	6033      	str	r3, [r6, #0]
				charge1();
 8003c8a:	f7ff fbfd 	bl	8003488 <charge1>
				ChargeDischargeStatus = CHARGEs;
 8003c8e:	2201      	movs	r2, #1
				CheckingCapacityCounter ++;
 8003c90:	7823      	ldrb	r3, [r4, #0]
 8003c92:	3301      	adds	r3, #1
 8003c94:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 8003c96:	4b61      	ldr	r3, [pc, #388]	; (8003e1c <MenuCheckingCapacity+0x2b4>)
 8003c98:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter<3)
 8003c9a:	4a62      	ldr	r2, [pc, #392]	; (8003e24 <MenuCheckingCapacity+0x2bc>)
 8003c9c:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8003ca0:	8813      	ldrh	r3, [r2, #0]
 8003ca2:	9203      	str	r2, [sp, #12]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	428b      	cmp	r3, r1
 8003ca8:	d908      	bls.n	8003cbc <MenuCheckingCapacity+0x154>
 8003caa:	4b5c      	ldr	r3, [pc, #368]	; (8003e1c <MenuCheckingCapacity+0x2b4>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d104      	bne.n	8003cbc <MenuCheckingCapacity+0x154>
 8003cb2:	4b5d      	ldr	r3, [pc, #372]	; (8003e28 <MenuCheckingCapacity+0x2c0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cba:	d808      	bhi.n	8003cce <MenuCheckingCapacity+0x166>
 8003cbc:	4b5d      	ldr	r3, [pc, #372]	; (8003e34 <MenuCheckingCapacity+0x2cc>)
 8003cbe:	6832      	ldr	r2, [r6, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d922      	bls.n	8003d0c <MenuCheckingCapacity+0x1a4>
 8003cc6:	4b55      	ldr	r3, [pc, #340]	; (8003e1c <MenuCheckingCapacity+0x2b4>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d11e      	bne.n	8003d0c <MenuCheckingCapacity+0x1a4>
 8003cce:	f994 3000 	ldrsb.w	r3, [r4]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	dc1a      	bgt.n	8003d0c <MenuCheckingCapacity+0x1a4>
				ChargeStatusForTimer = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f88a 3000 	strb.w	r3, [sl]
				if (BatteryCapacityCharge/3600 > 100)
 8003cdc:	682a      	ldr	r2, [r5, #0]
 8003cde:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <MenuCheckingCapacity+0x2c4>)
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d904      	bls.n	8003cee <MenuCheckingCapacity+0x186>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003ce4:	6828      	ldr	r0, [r5, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	6831      	ldr	r1, [r6, #0]
 8003cea:	f7fe f8dd 	bl	8001ea8 <MenuTraining_WriteInLOG>
				DisChargeStatusForTimer = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4a48      	ldr	r2, [pc, #288]	; (8003e14 <MenuCheckingCapacity+0x2ac>)
 8003cf2:	7013      	strb	r3, [r2, #0]
				BatteryCapacityDischargeCurrent = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	603b      	str	r3, [r7, #0]
				DischargeTimeSec = 0;
 8003cf8:	f8c9 3000 	str.w	r3, [r9]
				discharge1();
 8003cfc:	f7fe fcc8 	bl	8002690 <discharge1>
				ChargeDischargeStatus = DISCHARGEs;
 8003d00:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003d02:	7823      	ldrb	r3, [r4, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = DISCHARGEs;
 8003d08:	4b44      	ldr	r3, [pc, #272]	; (8003e1c <MenuCheckingCapacity+0x2b4>)
 8003d0a:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter>=3)
 8003d0c:	4b45      	ldr	r3, [pc, #276]	; (8003e24 <MenuCheckingCapacity+0x2bc>)
 8003d0e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d908      	bls.n	8003d2c <MenuCheckingCapacity+0x1c4>
 8003d1a:	4b40      	ldr	r3, [pc, #256]	; (8003e1c <MenuCheckingCapacity+0x2b4>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d104      	bne.n	8003d2c <MenuCheckingCapacity+0x1c4>
 8003d22:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <MenuCheckingCapacity+0x2c0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d2a:	d808      	bhi.n	8003d3e <MenuCheckingCapacity+0x1d6>
 8003d2c:	4b41      	ldr	r3, [pc, #260]	; (8003e34 <MenuCheckingCapacity+0x2cc>)
 8003d2e:	6832      	ldr	r2, [r6, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d91d      	bls.n	8003d72 <MenuCheckingCapacity+0x20a>
 8003d36:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <MenuCheckingCapacity+0x2b4>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d119      	bne.n	8003d72 <MenuCheckingCapacity+0x20a>
 8003d3e:	f994 3000 	ldrsb.w	r3, [r4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	dd15      	ble.n	8003d72 <MenuCheckingCapacity+0x20a>
	OUT_OFF();
 8003d46:	f7fe fc4d 	bl	80025e4 <OUT_OFF>
				ChargeStatusForTimer = 0;
 8003d4a:	2300      	movs	r3, #0
				DisChargeStatusForTimer = 0;
 8003d4c:	4a31      	ldr	r2, [pc, #196]	; (8003e14 <MenuCheckingCapacity+0x2ac>)
				ChargeStatusForTimer = 0;
 8003d4e:	f88a 3000 	strb.w	r3, [sl]
				DisChargeStatusForTimer = 0;
 8003d52:	7013      	strb	r3, [r2, #0]
				if (BatteryCapacityCharge/3600 > 100)
 8003d54:	682a      	ldr	r2, [r5, #0]
 8003d56:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <MenuCheckingCapacity+0x2c4>)
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d904      	bls.n	8003d66 <MenuCheckingCapacity+0x1fe>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003d5c:	6828      	ldr	r0, [r5, #0]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	6831      	ldr	r1, [r6, #0]
 8003d62:	f7fe f8a1 	bl	8001ea8 <MenuTraining_WriteInLOG>
				CountShow = 2;
 8003d66:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003d68:	7823      	ldrb	r3, [r4, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	7023      	strb	r3, [r4, #0]
				CountShow = 2;
 8003d6e:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <MenuCheckingCapacity+0x2d0>)
 8003d70:	701a      	strb	r2, [r3, #0]
			if (key == KEY_NEXT)
 8003d72:	4c31      	ldr	r4, [pc, #196]	; (8003e38 <MenuCheckingCapacity+0x2d0>)
 8003d74:	f1bb 0f02 	cmp.w	fp, #2
 8003d78:	f994 3000 	ldrsb.w	r3, [r4]
 8003d7c:	f040 80ad 	bne.w	8003eda <MenuCheckingCapacity+0x372>
				CountShow++;
 8003d80:	3301      	adds	r3, #1
 8003d82:	b25b      	sxtb	r3, r3
				if (CountShow==MAX_SCREENS__MENU_CAPACITY) CountShow=0;
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	f040 80b0 	bne.w	8003eea <MenuCheckingCapacity+0x382>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	7023      	strb	r3, [r4, #0]
				lcd_set_xy(0,0);
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4608      	mov	r0, r1
 8003d92:	f7fd fe0f 	bl	80019b4 <lcd_set_xy>
				PrintToLCD(itoa_koma(U_OUT,2));
 8003d96:	9b03      	ldr	r3, [sp, #12]
 8003d98:	2102      	movs	r1, #2
 8003d9a:	8818      	ldrh	r0, [r3, #0]
 8003d9c:	b280      	uxth	r0, r0
 8003d9e:	f7fd fadf 	bl	8001360 <itoa_koma>
 8003da2:	f7fd fe87 	bl	8001ab4 <PrintToLCD>
				PrintToLCD("V ");
 8003da6:	4825      	ldr	r0, [pc, #148]	; (8003e3c <MenuCheckingCapacity+0x2d4>)
 8003da8:	f7fd fe84 	bl	8001ab4 <PrintToLCD>
				PrintToLCD(itoa(Current));
 8003dac:	9b02      	ldr	r3, [sp, #8]
 8003dae:	8818      	ldrh	r0, [r3, #0]
 8003db0:	b200      	sxth	r0, r0
 8003db2:	f7fd fa5d 	bl	8001270 <itoa>
 8003db6:	f7fd fe7d 	bl	8001ab4 <PrintToLCD>
				PrintToLCD("mA     ");
 8003dba:	4821      	ldr	r0, [pc, #132]	; (8003e40 <MenuCheckingCapacity+0x2d8>)
 8003dbc:	f7fd fe7a 	bl	8001ab4 <PrintToLCD>
				lcd_set_xy(6,1);
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	2006      	movs	r0, #6
 8003dc4:	f7fd fdf6 	bl	80019b4 <lcd_set_xy>
				LcdOutbyNumber(4,1);
 8003dc8:	2101      	movs	r1, #1
 8003dca:	2004      	movs	r0, #4
 8003dcc:	f7fd fe1a 	bl	8001a04 <LcdOutbyNumber>
				if (Status_Out ==1)
 8003dd0:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <MenuCheckingCapacity+0x2dc>)
 8003dd2:	f893 b000 	ldrb.w	fp, [r3]
 8003dd6:	f1bb 0f01 	cmp.w	fp, #1
 8003dda:	f040 80ba 	bne.w	8003f52 <MenuCheckingCapacity+0x3ea>
					lcd_set_xy(7,1);
 8003dde:	4659      	mov	r1, fp
 8003de0:	2007      	movs	r0, #7
 8003de2:	f7fd fde7 	bl	80019b4 <lcd_set_xy>
					LcdOutbyNumber(0,1);//charge
 8003de6:	4659      	mov	r1, fp
 8003de8:	2000      	movs	r0, #0
					LcdOutbyNumber(2,1);//discharge
 8003dea:	f7fd fe0b 	bl	8001a04 <LcdOutbyNumber>
 8003dee:	e082      	b.n	8003ef6 <MenuCheckingCapacity+0x38e>
 8003df0:	2000079c 	.word	0x2000079c
 8003df4:	20000788 	.word	0x20000788
 8003df8:	20000778 	.word	0x20000778
 8003dfc:	2000077c 	.word	0x2000077c
 8003e00:	2000078c 	.word	0x2000078c
 8003e04:	20000874 	.word	0x20000874
 8003e08:	20000154 	.word	0x20000154
 8003e0c:	08006182 	.word	0x08006182
 8003e10:	08006193 	.word	0x08006193
 8003e14:	20000790 	.word	0x20000790
 8003e18:	20000798 	.word	0x20000798
 8003e1c:	20000270 	.word	0x20000270
 8003e20:	080061ba 	.word	0x080061ba
 8003e24:	2000086c 	.word	0x2000086c
 8003e28:	200007c8 	.word	0x200007c8
 8003e2c:	00058c4f 	.word	0x00058c4f
 8003e30:	200000f4 	.word	0x200000f4
 8003e34:	20000a18 	.word	0x20000a18
 8003e38:	2000078d 	.word	0x2000078d
 8003e3c:	08005efa 	.word	0x08005efa
 8003e40:	080061a4 	.word	0x080061a4
 8003e44:	200007a4 	.word	0x200007a4
 8003e48:	20000856 	.word	0x20000856
 8003e4c:	20000787 	.word	0x20000787
 8003e50:	20000794 	.word	0x20000794
	if (CheckingCapacityCounter<=3)
 8003e54:	f994 3000 	ldrsb.w	r3, [r4]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	f77f aee0 	ble.w	8003c1e <MenuCheckingCapacity+0xb6>
		if (key == KEY_NEXT)
 8003e5e:	4cab      	ldr	r4, [pc, #684]	; (800410c <MenuCheckingCapacity+0x5a4>)
 8003e60:	2802      	cmp	r0, #2
 8003e62:	f994 3000 	ldrsb.w	r3, [r4]
 8003e66:	f040 80c6 	bne.w	8003ff6 <MenuCheckingCapacity+0x48e>
			CountShow++;
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_CAPACITY1) CountShow=0;
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	f040 80c7 	bne.w	8004002 <MenuCheckingCapacity+0x49a>
 8003e74:	2300      	movs	r3, #0
 8003e76:	7023      	strb	r3, [r4, #0]
			lcd_set_xy(0,0);
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	f7fd fd9a 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003e80:	4ba3      	ldr	r3, [pc, #652]	; (8004110 <MenuCheckingCapacity+0x5a8>)
 8003e82:	2102      	movs	r1, #2
 8003e84:	8818      	ldrh	r0, [r3, #0]
 8003e86:	b280      	uxth	r0, r0
 8003e88:	f7fd fa6a 	bl	8001360 <itoa_koma>
 8003e8c:	f7fd fe12 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V ");
 8003e90:	48a0      	ldr	r0, [pc, #640]	; (8004114 <MenuCheckingCapacity+0x5ac>)
 8003e92:	f7fd fe0f 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003e96:	4ba0      	ldr	r3, [pc, #640]	; (8004118 <MenuCheckingCapacity+0x5b0>)
 8003e98:	8818      	ldrh	r0, [r3, #0]
 8003e9a:	b200      	sxth	r0, r0
 8003e9c:	f7fd f9e8 	bl	8001270 <itoa>
 8003ea0:	f7fd fe08 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("mA     ");
 8003ea4:	489d      	ldr	r0, [pc, #628]	; (800411c <MenuCheckingCapacity+0x5b4>)
 8003ea6:	f7fd fe05 	bl	8001ab4 <PrintToLCD>
			lcd_set_xy(6,1);
 8003eaa:	2101      	movs	r1, #1
 8003eac:	2006      	movs	r0, #6
 8003eae:	f7fd fd81 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	2004      	movs	r0, #4
 8003eb6:	f7fd fda5 	bl	8001a04 <LcdOutbyNumber>
			if (Status_Out ==1)
 8003eba:	4b99      	ldr	r3, [pc, #612]	; (8004120 <MenuCheckingCapacity+0x5b8>)
 8003ebc:	f893 8000 	ldrb.w	r8, [r3]
 8003ec0:	f1b8 0f01 	cmp.w	r8, #1
 8003ec4:	f040 811a 	bne.w	80040fc <MenuCheckingCapacity+0x594>
				lcd_set_xy(7,1);
 8003ec8:	4641      	mov	r1, r8
 8003eca:	2007      	movs	r0, #7
 8003ecc:	f7fd fd72 	bl	80019b4 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	2000      	movs	r0, #0
				LcdOutbyNumber(2,1);//discharge
 8003ed4:	f7fd fd96 	bl	8001a04 <LcdOutbyNumber>
 8003ed8:	e099      	b.n	800400e <MenuCheckingCapacity+0x4a6>
			if (key == KEY_BACK)
 8003eda:	f1bb 0f01 	cmp.w	fp, #1
 8003ede:	d105      	bne.n	8003eec <MenuCheckingCapacity+0x384>
				CountShow--;
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b25b      	sxtb	r3, r3
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f2c0 80b7 	blt.w	8004058 <MenuCheckingCapacity+0x4f0>
				CountShow++;
 8003eea:	7023      	strb	r3, [r4, #0]
			if(CountShow == 0)
 8003eec:	f994 3000 	ldrsb.w	r3, [r4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f43f af4c 	beq.w	8003d8e <MenuCheckingCapacity+0x226>
			if(CountShow == 1)
 8003ef6:	f994 b000 	ldrsb.w	fp, [r4]
 8003efa:	f1bb 0f01 	cmp.w	fp, #1
 8003efe:	f040 80ad 	bne.w	800405c <MenuCheckingCapacity+0x4f4>
				lcd_set_xy(0,0);
 8003f02:	2100      	movs	r1, #0
 8003f04:	4608      	mov	r0, r1
 8003f06:	f7fd fd55 	bl	80019b4 <lcd_set_xy>
				PrintToLCD(itoa(SettingsData.ChargeTime));
 8003f0a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8003f0e:	f7fd f9af 	bl	8001270 <itoa>
 8003f12:	f7fd fdcf 	bl	8001ab4 <PrintToLCD>
				PrintToLCD("h ");
 8003f16:	4883      	ldr	r0, [pc, #524]	; (8004124 <MenuCheckingCapacity+0x5bc>)
 8003f18:	f7fd fdcc 	bl	8001ab4 <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003f1c:	230a      	movs	r3, #10
 8003f1e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003f22:	4659      	mov	r1, fp
 8003f24:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f28:	f7fd fa1a 	bl	8001360 <itoa_koma>
 8003f2c:	f7fd fdc2 	bl	8001ab4 <PrintToLCD>
				PrintToLCD("V ");
 8003f30:	4878      	ldr	r0, [pc, #480]	; (8004114 <MenuCheckingCapacity+0x5ac>)
 8003f32:	f7fd fdbf 	bl	8001ab4 <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003f36:	4659      	mov	r1, fp
 8003f38:	f8d8 0020 	ldr.w	r0, [r8, #32]
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003f3c:	230a      	movs	r3, #10
 8003f3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f42:	f7fd fa0d 	bl	8001360 <itoa_koma>
 8003f46:	f7fd fdb5 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V     ");
 8003f4a:	4877      	ldr	r0, [pc, #476]	; (8004128 <MenuCheckingCapacity+0x5c0>)
 8003f4c:	f7fd fdb2 	bl	8001ab4 <PrintToLCD>
 8003f50:	e084      	b.n	800405c <MenuCheckingCapacity+0x4f4>
					lcd_set_xy(7,1);
 8003f52:	2101      	movs	r1, #1
 8003f54:	2007      	movs	r0, #7
 8003f56:	f7fd fd2d 	bl	80019b4 <lcd_set_xy>
					LcdOutbyNumber(2,1);//discharge
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	2002      	movs	r0, #2
 8003f5e:	e744      	b.n	8003dea <MenuCheckingCapacity+0x282>
			if (TimerForReadyMeasurement_ms>1000)
 8003f60:	4b72      	ldr	r3, [pc, #456]	; (800412c <MenuCheckingCapacity+0x5c4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f68:	d906      	bls.n	8003f78 <MenuCheckingCapacity+0x410>
				lcd_set_xy(0,0);
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	f7fd fd21 	bl	80019b4 <lcd_set_xy>
				PrintToLCD("NO/BAD Battery  ");
 8003f72:	486f      	ldr	r0, [pc, #444]	; (8004130 <MenuCheckingCapacity+0x5c8>)
 8003f74:	f7fd fd9e 	bl	8001ab4 <PrintToLCD>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003f78:	486e      	ldr	r0, [pc, #440]	; (8004134 <MenuCheckingCapacity+0x5cc>)
 8003f7a:	f001 f965 	bl	8005248 <printToBufferWithoutEndUART1>
 8003f7e:	9b01      	ldr	r3, [sp, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	7819      	ldrb	r1, [r3, #0]
 8003f84:	486c      	ldr	r0, [pc, #432]	; (8004138 <MenuCheckingCapacity+0x5d0>)
 8003f86:	f001 f99d 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003f8a:	486a      	ldr	r0, [pc, #424]	; (8004134 <MenuCheckingCapacity+0x5cc>)
 8003f8c:	f001 f95c 	bl	8005248 <printToBufferWithoutEndUART1>
 8003f90:	f89a 1000 	ldrb.w	r1, [sl]
 8003f94:	2200      	movs	r2, #0
 8003f96:	4869      	ldr	r0, [pc, #420]	; (800413c <MenuCheckingCapacity+0x5d4>)
 8003f98:	f001 f994 	bl	80052c4 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003f9c:	4865      	ldr	r0, [pc, #404]	; (8004134 <MenuCheckingCapacity+0x5cc>)
 8003f9e:	f001 f953 	bl	8005248 <printToBufferWithoutEndUART1>
 8003fa2:	6831      	ldr	r1, [r6, #0]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4866      	ldr	r0, [pc, #408]	; (8004140 <MenuCheckingCapacity+0x5d8>)
 8003fa8:	f001 f98c 	bl	80052c4 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 8003fac:	4861      	ldr	r0, [pc, #388]	; (8004134 <MenuCheckingCapacity+0x5cc>)
 8003fae:	f001 f94b 	bl	8005248 <printToBufferWithoutEndUART1>
 8003fb2:	6829      	ldr	r1, [r5, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	4863      	ldr	r0, [pc, #396]	; (8004144 <MenuCheckingCapacity+0x5dc>)
 8003fb8:	f001 f984 	bl	80052c4 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003fbc:	485d      	ldr	r0, [pc, #372]	; (8004134 <MenuCheckingCapacity+0x5cc>)
 8003fbe:	f001 f943 	bl	8005248 <printToBufferWithoutEndUART1>
 8003fc2:	4b61      	ldr	r3, [pc, #388]	; (8004148 <MenuCheckingCapacity+0x5e0>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	7819      	ldrb	r1, [r3, #0]
 8003fc8:	4860      	ldr	r0, [pc, #384]	; (800414c <MenuCheckingCapacity+0x5e4>)
 8003fca:	f001 f97b 	bl	80052c4 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003fce:	4859      	ldr	r0, [pc, #356]	; (8004134 <MenuCheckingCapacity+0x5cc>)
 8003fd0:	f001 f93a 	bl	8005248 <printToBufferWithoutEndUART1>
 8003fd4:	f8d9 1000 	ldr.w	r1, [r9]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	485d      	ldr	r0, [pc, #372]	; (8004150 <MenuCheckingCapacity+0x5e8>)
 8003fdc:	f001 f972 	bl	80052c4 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8003fe0:	4854      	ldr	r0, [pc, #336]	; (8004134 <MenuCheckingCapacity+0x5cc>)
 8003fe2:	f001 f931 	bl	8005248 <printToBufferWithoutEndUART1>
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	485a      	ldr	r0, [pc, #360]	; (8004154 <MenuCheckingCapacity+0x5ec>)
}
 8003fec:	b005      	add	sp, #20
 8003fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8003ff2:	f001 b967 	b.w	80052c4 <printToBufferUART1D>
		if (key == KEY_BACK)
 8003ff6:	2801      	cmp	r0, #1
 8003ff8:	d104      	bne.n	8004004 <MenuCheckingCapacity+0x49c>
			CountShow--;
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	db2a      	blt.n	8004058 <MenuCheckingCapacity+0x4f0>
			CountShow++;
 8004002:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8004004:	f994 3000 	ldrsb.w	r3, [r4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f43f af35 	beq.w	8003e78 <MenuCheckingCapacity+0x310>
		if(CountShow == 1)
 800400e:	f994 8000 	ldrsb.w	r8, [r4]
 8004012:	f1b8 0f01 	cmp.w	r8, #1
 8004016:	d121      	bne.n	800405c <MenuCheckingCapacity+0x4f4>
			lcd_set_xy(0,0);
 8004018:	2100      	movs	r1, #0
			PrintToLCD(itoa(SettingsData.ChargeTime));
 800401a:	f8df b144 	ldr.w	fp, [pc, #324]	; 8004160 <MenuCheckingCapacity+0x5f8>
			lcd_set_xy(0,0);
 800401e:	4608      	mov	r0, r1
 8004020:	f7fd fcc8 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8004024:	f8db 0010 	ldr.w	r0, [fp, #16]
 8004028:	f7fd f922 	bl	8001270 <itoa>
 800402c:	f7fd fd42 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("h ");
 8004030:	483c      	ldr	r0, [pc, #240]	; (8004124 <MenuCheckingCapacity+0x5bc>)
 8004032:	f7fd fd3f 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8004036:	230a      	movs	r3, #10
 8004038:	f8db 0018 	ldr.w	r0, [fp, #24]
 800403c:	4641      	mov	r1, r8
 800403e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004042:	f7fd f98d 	bl	8001360 <itoa_koma>
 8004046:	f7fd fd35 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("V ");
 800404a:	4832      	ldr	r0, [pc, #200]	; (8004114 <MenuCheckingCapacity+0x5ac>)
 800404c:	f7fd fd32 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8004050:	4641      	mov	r1, r8
 8004052:	f8db 0020 	ldr.w	r0, [fp, #32]
 8004056:	e771      	b.n	8003f3c <MenuCheckingCapacity+0x3d4>
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 8004058:	2303      	movs	r3, #3
 800405a:	7023      	strb	r3, [r4, #0]
		if(CountShow == 2)
 800405c:	f994 8000 	ldrsb.w	r8, [r4]
 8004060:	f1b8 0f02 	cmp.w	r8, #2
 8004064:	d122      	bne.n	80040ac <MenuCheckingCapacity+0x544>
			lcd_set_xy(0,0);
 8004066:	2100      	movs	r1, #0
 8004068:	4608      	mov	r0, r1
 800406a:	f7fd fca3 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 800406e:	2101      	movs	r1, #1
 8004070:	4640      	mov	r0, r8
 8004072:	f7fd fcc7 	bl	8001a04 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8004076:	2100      	movs	r1, #0
 8004078:	2001      	movs	r0, #1
 800407a:	f7fd fc9b 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(" ");
 800407e:	4836      	ldr	r0, [pc, #216]	; (8004158 <MenuCheckingCapacity+0x5f0>)
 8004080:	f7fd fd18 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 8004084:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004088:	6838      	ldr	r0, [r7, #0]
 800408a:	fbb0 f0f3 	udiv	r0, r0, r3
 800408e:	f7fd f8ef 	bl	8001270 <itoa>
 8004092:	f7fd fd0f 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("mAH      ");
 8004096:	4831      	ldr	r0, [pc, #196]	; (800415c <MenuCheckingCapacity+0x5f4>)
 8004098:	f7fd fd0c 	bl	8001ab4 <PrintToLCD>
			lcd_set_xy(3,1);
 800409c:	2003      	movs	r0, #3
 800409e:	2101      	movs	r1, #1
 80040a0:	f7fd fc88 	bl	80019b4 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 80040a4:	f8d9 0000 	ldr.w	r0, [r9]
 80040a8:	f7fe fa66 	bl	8002578 <ClockOnLCD_noSec>
		if(CountShow == 3)
 80040ac:	f994 4000 	ldrsb.w	r4, [r4]
 80040b0:	2c03      	cmp	r4, #3
 80040b2:	f47f af61 	bne.w	8003f78 <MenuCheckingCapacity+0x410>
			lcd_set_xy(0,0);
 80040b6:	2100      	movs	r1, #0
 80040b8:	4608      	mov	r0, r1
 80040ba:	f7fd fc7b 	bl	80019b4 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 80040be:	2101      	movs	r1, #1
 80040c0:	2000      	movs	r0, #0
 80040c2:	f7fd fc9f 	bl	8001a04 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80040c6:	2100      	movs	r1, #0
 80040c8:	2001      	movs	r0, #1
 80040ca:	f7fd fc73 	bl	80019b4 <lcd_set_xy>
			PrintToLCD(" ");
 80040ce:	4822      	ldr	r0, [pc, #136]	; (8004158 <MenuCheckingCapacity+0x5f0>)
 80040d0:	f7fd fcf0 	bl	8001ab4 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 80040d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80040d8:	6828      	ldr	r0, [r5, #0]
 80040da:	fbb0 f0f3 	udiv	r0, r0, r3
 80040de:	f7fd f8c7 	bl	8001270 <itoa>
 80040e2:	f7fd fce7 	bl	8001ab4 <PrintToLCD>
			PrintToLCD("mAH      ");
 80040e6:	481d      	ldr	r0, [pc, #116]	; (800415c <MenuCheckingCapacity+0x5f4>)
 80040e8:	f7fd fce4 	bl	8001ab4 <PrintToLCD>
			lcd_set_xy(3,1);
 80040ec:	4620      	mov	r0, r4
 80040ee:	2101      	movs	r1, #1
 80040f0:	f7fd fc60 	bl	80019b4 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 80040f4:	6830      	ldr	r0, [r6, #0]
 80040f6:	f7fe fa3f 	bl	8002578 <ClockOnLCD_noSec>
 80040fa:	e73d      	b.n	8003f78 <MenuCheckingCapacity+0x410>
				lcd_set_xy(7,1);
 80040fc:	2101      	movs	r1, #1
 80040fe:	2007      	movs	r0, #7
 8004100:	f7fd fc58 	bl	80019b4 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 8004104:	2101      	movs	r1, #1
 8004106:	2002      	movs	r0, #2
 8004108:	e6e4      	b.n	8003ed4 <MenuCheckingCapacity+0x36c>
 800410a:	bf00      	nop
 800410c:	2000078d 	.word	0x2000078d
 8004110:	2000086c 	.word	0x2000086c
 8004114:	08005efa 	.word	0x08005efa
 8004118:	20000856 	.word	0x20000856
 800411c:	080061a4 	.word	0x080061a4
 8004120:	200007a4 	.word	0x200007a4
 8004124:	08005a80 	.word	0x08005a80
 8004128:	08005ee7 	.word	0x08005ee7
 800412c:	200007c8 	.word	0x200007c8
 8004130:	080061d5 	.word	0x080061d5
 8004134:	08005908 	.word	0x08005908
 8004138:	080060ff 	.word	0x080060ff
 800413c:	08006114 	.word	0x08006114
 8004140:	08006129 	.word	0x08006129
 8004144:	080061e6 	.word	0x080061e6
 8004148:	20000790 	.word	0x20000790
 800414c:	08006139 	.word	0x08006139
 8004150:	08006151 	.word	0x08006151
 8004154:	080061fe 	.word	0x080061fe
 8004158:	080060a3 	.word	0x080060a3
 800415c:	080061cb 	.word	0x080061cb
 8004160:	20000154 	.word	0x20000154

08004164 <MenuDIAGNOSTIC>:
	EnterInMenu_Status=1;
 8004164:	2201      	movs	r2, #1
{
 8004166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status=1;
 800416a:	4ba5      	ldr	r3, [pc, #660]	; (8004400 <MenuDIAGNOSTIC+0x29c>)
 800416c:	4ca5      	ldr	r4, [pc, #660]	; (8004404 <MenuDIAGNOSTIC+0x2a0>)
	if (key == KEY_NEXT)
 800416e:	2802      	cmp	r0, #2
	EnterInMenu_Status=1;
 8004170:	701a      	strb	r2, [r3, #0]
{
 8004172:	b086      	sub	sp, #24
 8004174:	f994 3000 	ldrsb.w	r3, [r4]
	if (key == KEY_NEXT)
 8004178:	d128      	bne.n	80041cc <MenuDIAGNOSTIC+0x68>
		CountShow1++;
 800417a:	4413      	add	r3, r2
 800417c:	b25b      	sxtb	r3, r3
		if (CountShow1==MAXITEM) CountShow1=0;
 800417e:	2b08      	cmp	r3, #8
 8004180:	d12a      	bne.n	80041d8 <MenuDIAGNOSTIC+0x74>
 8004182:	2300      	movs	r3, #0
 8004184:	7023      	strb	r3, [r4, #0]
	OUT_OFF();
 8004186:	f7fe fa2d 	bl	80025e4 <OUT_OFF>
		lcd_set_xy(0,0);
 800418a:	2100      	movs	r1, #0
 800418c:	4608      	mov	r0, r1
 800418e:	f7fd fc11 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("Uin=");
 8004192:	489d      	ldr	r0, [pc, #628]	; (8004408 <MenuDIAGNOSTIC+0x2a4>)
 8004194:	f7fd fc8e 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(		itoa_koma(U_IN/10,1));
 8004198:	200a      	movs	r0, #10
 800419a:	4b9c      	ldr	r3, [pc, #624]	; (800440c <MenuDIAGNOSTIC+0x2a8>)
 800419c:	2101      	movs	r1, #1
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	fbb3 f0f0 	udiv	r0, r3, r0
 80041a6:	f7fd f8db 	bl	8001360 <itoa_koma>
 80041aa:	f7fd fc83 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(" Uc=");
 80041ae:	4898      	ldr	r0, [pc, #608]	; (8004410 <MenuDIAGNOSTIC+0x2ac>)
 80041b0:	f7fd fc80 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa_koma(U_Controller,2));
 80041b4:	4b97      	ldr	r3, [pc, #604]	; (8004414 <MenuDIAGNOSTIC+0x2b0>)
 80041b6:	2102      	movs	r1, #2
 80041b8:	8818      	ldrh	r0, [r3, #0]
 80041ba:	b280      	uxth	r0, r0
 80041bc:	f7fd f8d0 	bl	8001360 <itoa_koma>
 80041c0:	f7fd fc78 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("    ");
 80041c4:	4894      	ldr	r0, [pc, #592]	; (8004418 <MenuDIAGNOSTIC+0x2b4>)
 80041c6:	f7fd fc75 	bl	8001ab4 <PrintToLCD>
 80041ca:	e00a      	b.n	80041e2 <MenuDIAGNOSTIC+0x7e>
	if (key == KEY_BACK)
 80041cc:	2801      	cmp	r0, #1
 80041ce:	d104      	bne.n	80041da <MenuDIAGNOSTIC+0x76>
		CountShow1--;
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b25b      	sxtb	r3, r3
		if (CountShow1<0) CountShow1=MAXITEM-1;
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db27      	blt.n	8004228 <MenuDIAGNOSTIC+0xc4>
		CountShow1++;
 80041d8:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 0)
 80041da:	f994 3000 	ldrsb.w	r3, [r4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0d1      	beq.n	8004186 <MenuDIAGNOSTIC+0x22>
	if(CountShow1 == 1)
 80041e2:	f994 3000 	ldrsb.w	r3, [r4]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d120      	bne.n	800422c <MenuDIAGNOSTIC+0xc8>
	OUT_OFF();
 80041ea:	f7fe f9fb 	bl	80025e4 <OUT_OFF>
		lcd_set_xy(0,0);
 80041ee:	2100      	movs	r1, #0
 80041f0:	4608      	mov	r0, r1
 80041f2:	f7fd fbdf 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("Ups ");
 80041f6:	4889      	ldr	r0, [pc, #548]	; (800441c <MenuDIAGNOSTIC+0x2b8>)
 80041f8:	f7fd fc5c 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa_koma(U_PS,2));
 80041fc:	4b88      	ldr	r3, [pc, #544]	; (8004420 <MenuDIAGNOSTIC+0x2bc>)
 80041fe:	2102      	movs	r1, #2
 8004200:	8818      	ldrh	r0, [r3, #0]
 8004202:	b280      	uxth	r0, r0
 8004204:	f7fd f8ac 	bl	8001360 <itoa_koma>
 8004208:	f7fd fc54 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V ");
 800420c:	4885      	ldr	r0, [pc, #532]	; (8004424 <MenuDIAGNOSTIC+0x2c0>)
 800420e:	f7fd fc51 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[3])));
 8004212:	4b85      	ldr	r3, [pc, #532]	; (8004428 <MenuDIAGNOSTIC+0x2c4>)
 8004214:	88d8      	ldrh	r0, [r3, #6]
 8004216:	b280      	uxth	r0, r0
 8004218:	f7fd f82a 	bl	8001270 <itoa>
 800421c:	f7fd fc4a 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("      ");
 8004220:	4882      	ldr	r0, [pc, #520]	; (800442c <MenuDIAGNOSTIC+0x2c8>)
 8004222:	f7fd fc47 	bl	8001ab4 <PrintToLCD>
 8004226:	e001      	b.n	800422c <MenuDIAGNOSTIC+0xc8>
		if (CountShow1<0) CountShow1=MAXITEM-1;
 8004228:	2307      	movs	r3, #7
 800422a:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 2)
 800422c:	f994 5000 	ldrsb.w	r5, [r4]
 8004230:	2d02      	cmp	r5, #2
 8004232:	d11d      	bne.n	8004270 <MenuDIAGNOSTIC+0x10c>
		OUT_ON();
 8004234:	f7fe fbaa 	bl	800298c <OUT_ON>
		lcd_set_xy(0,0);
 8004238:	2100      	movs	r1, #0
 800423a:	4608      	mov	r0, r1
 800423c:	f7fd fbba 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("Uout ");
 8004240:	487b      	ldr	r0, [pc, #492]	; (8004430 <MenuDIAGNOSTIC+0x2cc>)
 8004242:	f7fd fc37 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa_koma(U_OUT,2));
 8004246:	4b7b      	ldr	r3, [pc, #492]	; (8004434 <MenuDIAGNOSTIC+0x2d0>)
 8004248:	4629      	mov	r1, r5
 800424a:	8818      	ldrh	r0, [r3, #0]
 800424c:	b280      	uxth	r0, r0
 800424e:	f7fd f887 	bl	8001360 <itoa_koma>
 8004252:	f7fd fc2f 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("V ");
 8004256:	4873      	ldr	r0, [pc, #460]	; (8004424 <MenuDIAGNOSTIC+0x2c0>)
 8004258:	f7fd fc2c 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[2])));
 800425c:	4b72      	ldr	r3, [pc, #456]	; (8004428 <MenuDIAGNOSTIC+0x2c4>)
 800425e:	8898      	ldrh	r0, [r3, #4]
 8004260:	b280      	uxth	r0, r0
 8004262:	f7fd f805 	bl	8001270 <itoa>
 8004266:	f7fd fc25 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("      ");
 800426a:	4870      	ldr	r0, [pc, #448]	; (800442c <MenuDIAGNOSTIC+0x2c8>)
 800426c:	f7fd fc22 	bl	8001ab4 <PrintToLCD>
	if(CountShow1 == 3)
 8004270:	f994 3000 	ldrsb.w	r3, [r4]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d11c      	bne.n	80042b2 <MenuDIAGNOSTIC+0x14e>
		OUT_ON();
 8004278:	f7fe fb88 	bl	800298c <OUT_ON>
		lcd_set_xy(0,0);
 800427c:	2100      	movs	r1, #0
 800427e:	4608      	mov	r0, r1
 8004280:	f7fd fb98 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("Iout ");
 8004284:	486c      	ldr	r0, [pc, #432]	; (8004438 <MenuDIAGNOSTIC+0x2d4>)
 8004286:	f7fd fc15 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(Current));
 800428a:	4b6c      	ldr	r3, [pc, #432]	; (800443c <MenuDIAGNOSTIC+0x2d8>)
 800428c:	8818      	ldrh	r0, [r3, #0]
 800428e:	b200      	sxth	r0, r0
 8004290:	f7fc ffee 	bl	8001270 <itoa>
 8004294:	f7fd fc0e 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mA ");
 8004298:	4869      	ldr	r0, [pc, #420]	; (8004440 <MenuDIAGNOSTIC+0x2dc>)
 800429a:	f7fd fc0b 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[1])));
 800429e:	4b62      	ldr	r3, [pc, #392]	; (8004428 <MenuDIAGNOSTIC+0x2c4>)
 80042a0:	8858      	ldrh	r0, [r3, #2]
 80042a2:	b280      	uxth	r0, r0
 80042a4:	f7fc ffe4 	bl	8001270 <itoa>
 80042a8:	f7fd fc04 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("      ");
 80042ac:	485f      	ldr	r0, [pc, #380]	; (800442c <MenuDIAGNOSTIC+0x2c8>)
 80042ae:	f7fd fc01 	bl	8001ab4 <PrintToLCD>
	if(CountShow1 == 4)
 80042b2:	f994 3000 	ldrsb.w	r3, [r4]
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d11c      	bne.n	80042f4 <MenuDIAGNOSTIC+0x190>
		OUT_OFF();
 80042ba:	f7fe f993 	bl	80025e4 <OUT_OFF>
		lcd_set_xy(0,0);
 80042be:	2100      	movs	r1, #0
 80042c0:	4608      	mov	r0, r1
 80042c2:	f7fd fb77 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("I(l) ");
 80042c6:	485f      	ldr	r0, [pc, #380]	; (8004444 <MenuDIAGNOSTIC+0x2e0>)
 80042c8:	f7fd fbf4 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(Current_x1));
 80042cc:	4b5e      	ldr	r3, [pc, #376]	; (8004448 <MenuDIAGNOSTIC+0x2e4>)
 80042ce:	8818      	ldrh	r0, [r3, #0]
 80042d0:	b200      	sxth	r0, r0
 80042d2:	f7fc ffcd 	bl	8001270 <itoa>
 80042d6:	f7fd fbed 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mA ");
 80042da:	4859      	ldr	r0, [pc, #356]	; (8004440 <MenuDIAGNOSTIC+0x2dc>)
 80042dc:	f7fd fbea 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[0]));
 80042e0:	4b51      	ldr	r3, [pc, #324]	; (8004428 <MenuDIAGNOSTIC+0x2c4>)
 80042e2:	8818      	ldrh	r0, [r3, #0]
 80042e4:	b280      	uxth	r0, r0
 80042e6:	f7fc ffc3 	bl	8001270 <itoa>
 80042ea:	f7fd fbe3 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("       ");
 80042ee:	4857      	ldr	r0, [pc, #348]	; (800444c <MenuDIAGNOSTIC+0x2e8>)
 80042f0:	f7fd fbe0 	bl	8001ab4 <PrintToLCD>
	if(CountShow1 == 5)
 80042f4:	f994 3000 	ldrsb.w	r3, [r4]
 80042f8:	2b05      	cmp	r3, #5
 80042fa:	d147      	bne.n	800438c <MenuDIAGNOSTIC+0x228>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80042fc:	4e48      	ldr	r6, [pc, #288]	; (8004420 <MenuDIAGNOSTIC+0x2bc>)
 80042fe:	4f54      	ldr	r7, [pc, #336]	; (8004450 <MenuDIAGNOSTIC+0x2ec>)
		OUT_ON();
 8004300:	f7fe fb44 	bl	800298c <OUT_ON>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8004304:	8832      	ldrh	r2, [r6, #0]
 8004306:	883b      	ldrh	r3, [r7, #0]
 8004308:	b292      	uxth	r2, r2
 800430a:	b29b      	uxth	r3, r3
 800430c:	1ad2      	subs	r2, r2, r3
 800430e:	f242 7310 	movw	r3, #10000	; 0x2710
 8004312:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800443c <MenuDIAGNOSTIC+0x2d8>
 8004316:	4353      	muls	r3, r2
 8004318:	f8b8 1000 	ldrh.w	r1, [r8]
 800431c:	4d4d      	ldr	r5, [pc, #308]	; (8004454 <MenuDIAGNOSTIC+0x2f0>)
 800431e:	b209      	sxth	r1, r1
 8004320:	fb93 f3f1 	sdiv	r3, r3, r1
		lcd_set_xy(0,0);
 8004324:	2100      	movs	r1, #0
 8004326:	4608      	mov	r0, r1
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8004328:	64ab      	str	r3, [r5, #72]	; 0x48
		lcd_set_xy(0,0);
 800432a:	f7fd fb43 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("R=");
 800432e:	484a      	ldr	r0, [pc, #296]	; (8004458 <MenuDIAGNOSTIC+0x2f4>)
 8004330:	f7fd fbc0 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 8004334:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8004336:	f7fc ff9b 	bl	8001270 <itoa>
 800433a:	f7fd fbbb 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mOm ");
 800433e:	4847      	ldr	r0, [pc, #284]	; (800445c <MenuDIAGNOSTIC+0x2f8>)
 8004340:	f7fd fbb8 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_MOSFET));
 8004344:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8004346:	f7fc ff93 	bl	8001270 <itoa>
 800434a:	f7fd fbb3 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("mOm    ");
 800434e:	4844      	ldr	r0, [pc, #272]	; (8004460 <MenuDIAGNOSTIC+0x2fc>)
 8004350:	f7fd fbb0 	bl	8001ab4 <PrintToLCD>
		logDebugD("I: ",Current,0);
 8004354:	4843      	ldr	r0, [pc, #268]	; (8004464 <MenuDIAGNOSTIC+0x300>)
 8004356:	f000 ff77 	bl	8005248 <printToBufferWithoutEndUART1>
 800435a:	f8b8 1000 	ldrh.w	r1, [r8]
 800435e:	2200      	movs	r2, #0
 8004360:	b209      	sxth	r1, r1
 8004362:	4841      	ldr	r0, [pc, #260]	; (8004468 <MenuDIAGNOSTIC+0x304>)
 8004364:	f000 ffae 	bl	80052c4 <printToBufferUART1D>
		logDebugD("U_PS: ",U_PS,2);
 8004368:	483e      	ldr	r0, [pc, #248]	; (8004464 <MenuDIAGNOSTIC+0x300>)
 800436a:	f000 ff6d 	bl	8005248 <printToBufferWithoutEndUART1>
 800436e:	8831      	ldrh	r1, [r6, #0]
 8004370:	2202      	movs	r2, #2
 8004372:	b289      	uxth	r1, r1
 8004374:	483d      	ldr	r0, [pc, #244]	; (800446c <MenuDIAGNOSTIC+0x308>)
 8004376:	f000 ffa5 	bl	80052c4 <printToBufferUART1D>
		logDebugD("U out: ",U_OUT_ForSetResistance,2);
 800437a:	483a      	ldr	r0, [pc, #232]	; (8004464 <MenuDIAGNOSTIC+0x300>)
 800437c:	f000 ff64 	bl	8005248 <printToBufferWithoutEndUART1>
 8004380:	8839      	ldrh	r1, [r7, #0]
 8004382:	2202      	movs	r2, #2
 8004384:	483a      	ldr	r0, [pc, #232]	; (8004470 <MenuDIAGNOSTIC+0x30c>)
 8004386:	b289      	uxth	r1, r1
 8004388:	f000 ff9c 	bl	80052c4 <printToBufferUART1D>
	if(CountShow1 == 6)
 800438c:	f994 3000 	ldrsb.w	r3, [r4]
 8004390:	2b06      	cmp	r3, #6
 8004392:	d10f      	bne.n	80043b4 <MenuDIAGNOSTIC+0x250>
	OUT_OFF();
 8004394:	f7fe f926 	bl	80025e4 <OUT_OFF>
		lcd_set_xy(0,0);
 8004398:	2100      	movs	r1, #0
 800439a:	4608      	mov	r0, r1
 800439c:	f7fd fb0a 	bl	80019b4 <lcd_set_xy>
		PrintToLCD(ClockStringWithSec(time_sec,s));
 80043a0:	4b34      	ldr	r3, [pc, #208]	; (8004474 <MenuDIAGNOSTIC+0x310>)
 80043a2:	a901      	add	r1, sp, #4
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	f7fd f88a 	bl	80014be <ClockStringWithSec>
 80043aa:	f7fd fb83 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("        ");
 80043ae:	4832      	ldr	r0, [pc, #200]	; (8004478 <MenuDIAGNOSTIC+0x314>)
 80043b0:	f7fd fb80 	bl	8001ab4 <PrintToLCD>
	if(CountShow1 == 7)
 80043b4:	f994 3000 	ldrsb.w	r3, [r4]
 80043b8:	2b07      	cmp	r3, #7
 80043ba:	d11d      	bne.n	80043f8 <MenuDIAGNOSTIC+0x294>
		OUT_ON();
 80043bc:	f7fe fae6 	bl	800298c <OUT_ON>
		lcd_set_xy(0,0);
 80043c0:	2100      	movs	r1, #0
 80043c2:	4608      	mov	r0, r1
 80043c4:	f7fd faf6 	bl	80019b4 <lcd_set_xy>
		PrintToLCD("T=");
 80043c8:	482c      	ldr	r0, [pc, #176]	; (800447c <MenuDIAGNOSTIC+0x318>)
 80043ca:	f7fd fb73 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(GetTemperature(Rt)));
 80043ce:	4b2c      	ldr	r3, [pc, #176]	; (8004480 <MenuDIAGNOSTIC+0x31c>)
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	f7fc fc45 	bl	8000c60 <GetTemperature>
 80043d6:	f7fc ff4b 	bl	8001270 <itoa>
 80043da:	f7fd fb6b 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("C   ");
 80043de:	4829      	ldr	r0, [pc, #164]	; (8004484 <MenuDIAGNOSTIC+0x320>)
 80043e0:	f7fd fb68 	bl	8001ab4 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[5]));
 80043e4:	4b10      	ldr	r3, [pc, #64]	; (8004428 <MenuDIAGNOSTIC+0x2c4>)
 80043e6:	8958      	ldrh	r0, [r3, #10]
 80043e8:	b280      	uxth	r0, r0
 80043ea:	f7fc ff41 	bl	8001270 <itoa>
 80043ee:	f7fd fb61 	bl	8001ab4 <PrintToLCD>
		PrintToLCD("    ");
 80043f2:	4809      	ldr	r0, [pc, #36]	; (8004418 <MenuDIAGNOSTIC+0x2b4>)
 80043f4:	f7fd fb5e 	bl	8001ab4 <PrintToLCD>
}
 80043f8:	b006      	add	sp, #24
 80043fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043fe:	bf00      	nop
 8004400:	2000079c 	.word	0x2000079c
 8004404:	2000078e 	.word	0x2000078e
 8004408:	08006228 	.word	0x08006228
 800440c:	20000854 	.word	0x20000854
 8004410:	0800622d 	.word	0x0800622d
 8004414:	2000086a 	.word	0x2000086a
 8004418:	080060a0 	.word	0x080060a0
 800441c:	08006232 	.word	0x08006232
 8004420:	20000874 	.word	0x20000874
 8004424:	08005efa 	.word	0x08005efa
 8004428:	2000085a 	.word	0x2000085a
 800442c:	0800609e 	.word	0x0800609e
 8004430:	08006237 	.word	0x08006237
 8004434:	2000086c 	.word	0x2000086c
 8004438:	0800623d 	.word	0x0800623d
 800443c:	20000856 	.word	0x20000856
 8004440:	08006243 	.word	0x08006243
 8004444:	08006247 	.word	0x08006247
 8004448:	20000858 	.word	0x20000858
 800444c:	0800609d 	.word	0x0800609d
 8004450:	200002b2 	.word	0x200002b2
 8004454:	20000004 	.word	0x20000004
 8004458:	0800624d 	.word	0x0800624d
 800445c:	08006250 	.word	0x08006250
 8004460:	08006255 	.word	0x08006255
 8004464:	08005908 	.word	0x08005908
 8004468:	0800625d 	.word	0x0800625d
 800446c:	08006261 	.word	0x08006261
 8004470:	08006268 	.word	0x08006268
 8004474:	200007e4 	.word	0x200007e4
 8004478:	0800609c 	.word	0x0800609c
 800447c:	08006270 	.word	0x08006270
 8004480:	20000870 	.word	0x20000870
 8004484:	08006273 	.word	0x08006273

08004488 <adc_func>:
	//PA4   ------> ADC1_IN4
	//PA5   ------> ADC1_IN5
	//PA6   ------> ADC1_IN6


	volatile int32_t Ut = 0;
 8004488:	2300      	movs	r3, #0
{
 800448a:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile int32_t It_m = 0;
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 800448c:	4c77      	ldr	r4, [pc, #476]	; (800466c <adc_func+0x1e4>)
{
 800448e:	b085      	sub	sp, #20
	volatile int32_t Ut = 0;
 8004490:	9300      	str	r3, [sp, #0]
	volatile int32_t It = 0;
 8004492:	9301      	str	r3, [sp, #4]
	volatile int32_t Ut_m = 0;
 8004494:	9302      	str	r3, [sp, #8]
	volatile int32_t It_m = 0;
 8004496:	9303      	str	r3, [sp, #12]
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004498:	89e3      	ldrh	r3, [r4, #14]
	Ut= (RegularConvData[2] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 800449a:	4d75      	ldr	r5, [pc, #468]	; (8004670 <adc_func+0x1e8>)
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 800449c:	b29a      	uxth	r2, r3
 800449e:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 80044a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044a6:	4a73      	ldr	r2, [pc, #460]	; (8004674 <adc_func+0x1ec>)
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8013      	strh	r3, [r2, #0]
	Ut= (RegularConvData[2] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 80044ac:	88a3      	ldrh	r3, [r4, #4]
 80044ae:	89e2      	ldrh	r2, [r4, #14]
 80044b0:	b299      	uxth	r1, r3
 80044b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80044b4:	b292      	uxth	r2, r2
 80044b6:	434b      	muls	r3, r1
 80044b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044bc:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax1(Ut);
 80044be:	9800      	ldr	r0, [sp, #0]
 80044c0:	f7fd f8f4 	bl	80016ac <middle_of_3Umax1>
 80044c4:	9002      	str	r0, [sp, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 80044c6:	9802      	ldr	r0, [sp, #8]
 80044c8:	f7fd f946 	bl	8001758 <RunningAverageU1>
 80044cc:	4b6a      	ldr	r3, [pc, #424]	; (8004678 <adc_func+0x1f0>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4410      	add	r0, r2
	SumU1Counter ++;
 80044d2:	4a6a      	ldr	r2, [pc, #424]	; (800467c <adc_func+0x1f4>)
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 80044d4:	6018      	str	r0, [r3, #0]
	SumU1Counter ++;
 80044d6:	8811      	ldrh	r1, [r2, #0]
 80044d8:	3101      	adds	r1, #1
 80044da:	b209      	sxth	r1, r1
 80044dc:	8011      	strh	r1, [r2, #0]
	if (SumU1Counter >= NUM_READ)
 80044de:	8811      	ldrh	r1, [r2, #0]
 80044e0:	b209      	sxth	r1, r1
 80044e2:	291f      	cmp	r1, #31
 80044e4:	dd0f      	ble.n	8004506 <adc_func+0x7e>
	{
		U_PS = SumU1/NUM_READ;
 80044e6:	6819      	ldr	r1, [r3, #0]
 80044e8:	4865      	ldr	r0, [pc, #404]	; (8004680 <adc_func+0x1f8>)
 80044ea:	2900      	cmp	r1, #0
 80044ec:	bfb8      	it	lt
 80044ee:	311f      	addlt	r1, #31
 80044f0:	f3c1 114f 	ubfx	r1, r1, #5, #16
 80044f4:	8001      	strh	r1, [r0, #0]
		SumU1Counter = 0;
 80044f6:	2100      	movs	r1, #0
 80044f8:	8011      	strh	r1, [r2, #0]
		SumU1 = 0;
 80044fa:	6019      	str	r1, [r3, #0]
		if (U_PS < 3) U_PS = 0;
 80044fc:	8803      	ldrh	r3, [r0, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	bf98      	it	ls
 8004504:	8001      	strhls	r1, [r0, #0]
	}

	Ut = (RegularConvData[1] * CalibrationData.CalibrationValueForU_IN) / RegularConvData[7];
 8004506:	8863      	ldrh	r3, [r4, #2]
 8004508:	89e2      	ldrh	r2, [r4, #14]
 800450a:	b299      	uxth	r1, r3
 800450c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800450e:	b292      	uxth	r2, r2
 8004510:	434b      	muls	r3, r1
 8004512:	fbb3 f3f2 	udiv	r3, r3, r2
 8004516:	9300      	str	r3, [sp, #0]
	U_IN = middle_of_3Umax3(Ut);
 8004518:	9800      	ldr	r0, [sp, #0]
 800451a:	f7fd f8ff 	bl	800171c <middle_of_3Umax3>
 800451e:	4b59      	ldr	r3, [pc, #356]	; (8004684 <adc_func+0x1fc>)
 8004520:	b280      	uxth	r0, r0
 8004522:	8018      	strh	r0, [r3, #0]


	It = (RegularConvData[0] * CalibrationData.CalibrationValueForCurrent_x50*10) / RegularConvData[7] ;//  Current A/10
 8004524:	8821      	ldrh	r1, [r4, #0]
 8004526:	89e3      	ldrh	r3, [r4, #14]
 8004528:	b289      	uxth	r1, r1
 800452a:	b29a      	uxth	r2, r3
 800452c:	69ab      	ldr	r3, [r5, #24]
 800452e:	4f56      	ldr	r7, [pc, #344]	; (8004688 <adc_func+0x200>)
 8004530:	4359      	muls	r1, r3
 8004532:	230a      	movs	r3, #10
 8004534:	434b      	muls	r3, r1
 8004536:	fbb3 f3f2 	udiv	r3, r3, r2
 800453a:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax1(It);
 800453c:	9801      	ldr	r0, [sp, #4]
 800453e:	f7fd f87d 	bl	800163c <middle_of_3Imax1>
 8004542:	9003      	str	r0, [sp, #12]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 8004544:	9803      	ldr	r0, [sp, #12]
 8004546:	f7fd f905 	bl	8001754 <RunningAverageI1>
 800454a:	4b50      	ldr	r3, [pc, #320]	; (800468c <adc_func+0x204>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4410      	add	r0, r2
	SumI1Counter ++;
 8004550:	4a4f      	ldr	r2, [pc, #316]	; (8004690 <adc_func+0x208>)
	SumI1 =SumI1 + RunningAverageI1(It_m);
 8004552:	6018      	str	r0, [r3, #0]
	SumI1Counter ++;
 8004554:	8811      	ldrh	r1, [r2, #0]
 8004556:	3101      	adds	r1, #1
 8004558:	b209      	sxth	r1, r1
 800455a:	8011      	strh	r1, [r2, #0]
	if (SumI1Counter >= NUM_READ)
 800455c:	8811      	ldrh	r1, [r2, #0]
 800455e:	b209      	sxth	r1, r1
 8004560:	291f      	cmp	r1, #31
 8004562:	dd09      	ble.n	8004578 <adc_func+0xf0>
	{
		Current_x50 = SumI1/NUM_READ;
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	2900      	cmp	r1, #0
 8004568:	bfb8      	it	lt
 800456a:	311f      	addlt	r1, #31
 800456c:	f341 114f 	sbfx	r1, r1, #5, #16
 8004570:	8039      	strh	r1, [r7, #0]
		SumI1Counter = 0;
 8004572:	2100      	movs	r1, #0
 8004574:	8011      	strh	r1, [r2, #0]
		SumI1 = 0;
 8004576:	6019      	str	r1, [r3, #0]
	}

	It= (RegularConvData[3] * CalibrationData.CalibrationValueForCurrent_x1*100) / RegularConvData[7] ;//  Current A/10
 8004578:	88e1      	ldrh	r1, [r4, #6]
 800457a:	89e3      	ldrh	r3, [r4, #14]
 800457c:	b289      	uxth	r1, r1
 800457e:	b29a      	uxth	r2, r3
 8004580:	6a2b      	ldr	r3, [r5, #32]
 8004582:	4359      	muls	r1, r3
 8004584:	2364      	movs	r3, #100	; 0x64
 8004586:	434b      	muls	r3, r1
 8004588:	fbb3 f3f2 	udiv	r3, r3, r2
 800458c:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax2(It);
 800458e:	9801      	ldr	r0, [sp, #4]
 8004590:	f7fd f870 	bl	8001674 <middle_of_3Imax2>
 8004594:	9003      	str	r0, [sp, #12]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 8004596:	9803      	ldr	r0, [sp, #12]
 8004598:	f7fd f8dd 	bl	8001756 <RunningAverageI2>
 800459c:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <adc_func+0x20c>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4410      	add	r0, r2
	SumI2Counter ++;
 80045a2:	4a3d      	ldr	r2, [pc, #244]	; (8004698 <adc_func+0x210>)
	SumI2 =SumI2 + RunningAverageI2(It_m);
 80045a4:	6018      	str	r0, [r3, #0]
	SumI2Counter ++;
 80045a6:	8811      	ldrh	r1, [r2, #0]
 80045a8:	3101      	adds	r1, #1
 80045aa:	b209      	sxth	r1, r1
 80045ac:	8011      	strh	r1, [r2, #0]
	if (SumI2Counter >= NUM_READ)
 80045ae:	8811      	ldrh	r1, [r2, #0]
 80045b0:	b209      	sxth	r1, r1
 80045b2:	291f      	cmp	r1, #31
 80045b4:	dd0a      	ble.n	80045cc <adc_func+0x144>
	{
		Current_x1 = SumI2/NUM_READ;
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	4838      	ldr	r0, [pc, #224]	; (800469c <adc_func+0x214>)
 80045ba:	2900      	cmp	r1, #0
 80045bc:	bfb8      	it	lt
 80045be:	311f      	addlt	r1, #31
 80045c0:	f341 114f 	sbfx	r1, r1, #5, #16
 80045c4:	8001      	strh	r1, [r0, #0]
		SumI2Counter = 0;
 80045c6:	2100      	movs	r1, #0
 80045c8:	8011      	strh	r1, [r2, #0]
		SumI2 = 0;
 80045ca:	6019      	str	r1, [r3, #0]
	}
	if (Current_x50 < 2000) Current = Current_x50;
 80045cc:	883b      	ldrh	r3, [r7, #0]
 80045ce:	4e34      	ldr	r6, [pc, #208]	; (80046a0 <adc_func+0x218>)
 80045d0:	b21b      	sxth	r3, r3
 80045d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
	else Current = Current_x1;
 80045d6:	bfaa      	itet	ge
 80045d8:	4b30      	ldrge	r3, [pc, #192]	; (800469c <adc_func+0x214>)
	if (Current_x50 < 2000) Current = Current_x50;
 80045da:	883b      	ldrhlt	r3, [r7, #0]
	else Current = Current_x1;
 80045dc:	881b      	ldrhge	r3, [r3, #0]
 80045de:	8033      	strh	r3, [r6, #0]


	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForU_OUT) / RegularConvData[7];
 80045e0:	88a3      	ldrh	r3, [r4, #4]
 80045e2:	89e2      	ldrh	r2, [r4, #14]
 80045e4:	b299      	uxth	r1, r3
 80045e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80045e8:	b292      	uxth	r2, r2
 80045ea:	434b      	muls	r3, r1
 80045ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80045f0:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax2(Ut);
 80045f2:	9800      	ldr	r0, [sp, #0]
 80045f4:	f7fd f876 	bl	80016e4 <middle_of_3Umax2>
 80045f8:	9002      	str	r0, [sp, #8]
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 80045fa:	9802      	ldr	r0, [sp, #8]
 80045fc:	f7fd f8ad 	bl	800175a <RunningAverageU2>
 8004600:	4a28      	ldr	r2, [pc, #160]	; (80046a4 <adc_func+0x21c>)
 8004602:	6813      	ldr	r3, [r2, #0]
 8004604:	4418      	add	r0, r3
	SumU2Counter ++;
 8004606:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <adc_func+0x220>)
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 8004608:	6010      	str	r0, [r2, #0]
	SumU2Counter ++;
 800460a:	8819      	ldrh	r1, [r3, #0]
 800460c:	3101      	adds	r1, #1
 800460e:	b209      	sxth	r1, r1
 8004610:	8019      	strh	r1, [r3, #0]
	if (SumU2Counter >= NUM_READ)
 8004612:	8819      	ldrh	r1, [r3, #0]
 8004614:	b209      	sxth	r1, r1
 8004616:	291f      	cmp	r1, #31
 8004618:	4611      	mov	r1, r2
 800461a:	461a      	mov	r2, r3
 800461c:	dd24      	ble.n	8004668 <adc_func+0x1e0>
	{

		U_OUTtmp = SumU2/NUM_READ;
 800461e:	6808      	ldr	r0, [r1, #0]
 8004620:	4b22      	ldr	r3, [pc, #136]	; (80046ac <adc_func+0x224>)
 8004622:	2800      	cmp	r0, #0
 8004624:	bfb8      	it	lt
 8004626:	301f      	addlt	r0, #31
 8004628:	1140      	asrs	r0, r0, #5
 800462a:	6018      	str	r0, [r3, #0]
		SumU2 = 0;
 800462c:	2000      	movs	r0, #0
 800462e:	6008      	str	r0, [r1, #0]
		SumU2Counter = 0;
 8004630:	8010      	strh	r0, [r2, #0]

		U_OUT_ForSetResistance = U_OUTtmp;
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	491e      	ldr	r1, [pc, #120]	; (80046b0 <adc_func+0x228>)
 8004636:	b292      	uxth	r2, r2
 8004638:	800a      	strh	r2, [r1, #0]
		if (U_OUTtmp<3) U_OUTtmp = 0;
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	2a02      	cmp	r2, #2
 800463e:	bfd8      	it	le
 8004640:	6018      	strle	r0, [r3, #0]

		U_OUTtmp = U_OUTtmp - (int32_t)CalibrationData.ResistanceComp_Ishunt_Wires*Current/10000;
 8004642:	8832      	ldrh	r2, [r6, #0]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	b211      	sxth	r1, r2
 8004648:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800464a:	434a      	muls	r2, r1
 800464c:	4919      	ldr	r1, [pc, #100]	; (80046b4 <adc_func+0x22c>)
 800464e:	fb92 f2f1 	sdiv	r2, r2, r1
 8004652:	4402      	add	r2, r0
 8004654:	601a      	str	r2, [r3, #0]


		if (U_OUTtmp<3)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	2a02      	cmp	r2, #2
			U_OUTtmp=0;
 800465a:	bfdc      	itt	le
 800465c:	2200      	movle	r2, #0
 800465e:	601a      	strle	r2, [r3, #0]
		U_OUT = U_OUTtmp;
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <adc_func+0x230>)
 8004664:	b29b      	uxth	r3, r3
 8004666:	8013      	strh	r3, [r2, #0]
	}
	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 8004668:	b005      	add	sp, #20
 800466a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466c:	2000085a 	.word	0x2000085a
 8004670:	20000004 	.word	0x20000004
 8004674:	2000086a 	.word	0x2000086a
 8004678:	200007b8 	.word	0x200007b8
 800467c:	200007bc 	.word	0x200007bc
 8004680:	20000874 	.word	0x20000874
 8004684:	20000854 	.word	0x20000854
 8004688:	200007e8 	.word	0x200007e8
 800468c:	200007a8 	.word	0x200007a8
 8004690:	200007ac 	.word	0x200007ac
 8004694:	200007b0 	.word	0x200007b0
 8004698:	200007b4 	.word	0x200007b4
 800469c:	20000858 	.word	0x20000858
 80046a0:	20000856 	.word	0x20000856
 80046a4:	200007c0 	.word	0x200007c0
 80046a8:	200007c4 	.word	0x200007c4
 80046ac:	200007d8 	.word	0x200007d8
 80046b0:	200002b2 	.word	0x200002b2
 80046b4:	ffffd8f0 	.word	0xffffd8f0
 80046b8:	2000086c 	.word	0x2000086c

080046bc <SysTick_Callback>:
{
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BUT_Debrief();
 80046be:	f7fd ff0f 	bl	80024e0 <BUT_Debrief>
	TimerForReadyMeasurement_ms++;
 80046c2:	4a3c      	ldr	r2, [pc, #240]	; (80047b4 <SysTick_Callback+0xf8>)
	if (Count10mSecond >= 5)
 80046c4:	4f3c      	ldr	r7, [pc, #240]	; (80047b8 <SysTick_Callback+0xfc>)
	TimerForReadyMeasurement_ms++;
 80046c6:	6813      	ldr	r3, [r2, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	6013      	str	r3, [r2, #0]
	if (Count10mSecond >= 5)
 80046cc:	883b      	ldrh	r3, [r7, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d903      	bls.n	80046dc <SysTick_Callback+0x20>
		Count10mSecond = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	803b      	strh	r3, [r7, #0]
		adc_func();
 80046d8:	f7ff fed6 	bl	8004488 <adc_func>
	if (Count100mSecond >= 100)
 80046dc:	4e37      	ldr	r6, [pc, #220]	; (80047bc <SysTick_Callback+0x100>)
	if (Count1000mSecond >= 1000)
 80046de:	4d38      	ldr	r5, [pc, #224]	; (80047c0 <SysTick_Callback+0x104>)
	if (Count100mSecond >= 100)
 80046e0:	8833      	ldrh	r3, [r6, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b63      	cmp	r3, #99	; 0x63
		Count100mSecond = 0;
 80046e6:	bf84      	itt	hi
 80046e8:	2300      	movhi	r3, #0
 80046ea:	8033      	strhhi	r3, [r6, #0]
	if (Count1000mSecond >= 1000)
 80046ec:	882b      	ldrh	r3, [r5, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046f4:	d351      	bcc.n	800479a <SysTick_Callback+0xde>
		Count1000mSecond = 0;
 80046f6:	2300      	movs	r3, #0
		if (Current < 2)
 80046f8:	4c32      	ldr	r4, [pc, #200]	; (80047c4 <SysTick_Callback+0x108>)
		Count1000mSecond = 0;
 80046fa:	802b      	strh	r3, [r5, #0]
		if (Current < 2)
 80046fc:	8823      	ldrh	r3, [r4, #0]
 80046fe:	b21b      	sxth	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	dc07      	bgt.n	8004714 <SysTick_Callback+0x58>
			BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent + Module16(Current);
 8004704:	8820      	ldrh	r0, [r4, #0]
 8004706:	b200      	sxth	r0, r0
 8004708:	f7fc fe92 	bl	8001430 <Module16>
 800470c:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <SysTick_Callback+0x10c>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4410      	add	r0, r2
 8004712:	6018      	str	r0, [r3, #0]
		if (Current > 2)
 8004714:	8823      	ldrh	r3, [r4, #0]
 8004716:	b21b      	sxth	r3, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	dd07      	ble.n	800472c <SysTick_Callback+0x70>
			BatteryCapacityCharge = BatteryCapacityCharge + Module16(Current);
 800471c:	8820      	ldrh	r0, [r4, #0]
 800471e:	b200      	sxth	r0, r0
 8004720:	f7fc fe86 	bl	8001430 <Module16>
 8004724:	4b29      	ldr	r3, [pc, #164]	; (80047cc <SysTick_Callback+0x110>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4410      	add	r0, r2
 800472a:	6018      	str	r0, [r3, #0]
		if (ChargeStatusForTimer == 1)
 800472c:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <SysTick_Callback+0x114>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b01      	cmp	r3, #1
			ChargeTimeSec++;
 8004732:	bf01      	itttt	eq
 8004734:	4a27      	ldreq	r2, [pc, #156]	; (80047d4 <SysTick_Callback+0x118>)
 8004736:	6813      	ldreq	r3, [r2, #0]
 8004738:	3301      	addeq	r3, #1
 800473a:	6013      	streq	r3, [r2, #0]
		if (DisChargeStatusForTimer == 1)
 800473c:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <SysTick_Callback+0x11c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b01      	cmp	r3, #1
			DischargeTimeSec++;
 8004742:	bf01      	itttt	eq
 8004744:	4a25      	ldreq	r2, [pc, #148]	; (80047dc <SysTick_Callback+0x120>)
 8004746:	6813      	ldreq	r3, [r2, #0]
 8004748:	3301      	addeq	r3, #1
 800474a:	6013      	streq	r3, [r2, #0]
		if (Status_Timer_Sec == 1)
 800474c:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <SysTick_Callback+0x124>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b01      	cmp	r3, #1
			Timer_Sec++;
 8004752:	bf01      	itttt	eq
 8004754:	4a23      	ldreq	r2, [pc, #140]	; (80047e4 <SysTick_Callback+0x128>)
 8004756:	6813      	ldreq	r3, [r2, #0]
 8004758:	3301      	addeq	r3, #1
 800475a:	6013      	streq	r3, [r2, #0]
		time_sec++;
 800475c:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <SysTick_Callback+0x12c>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	3201      	adds	r2, #1
 8004762:	601a      	str	r2, [r3, #0]
		if (time_sec%2==0) GPIOA->BSRR =  GPIO_BSRR_BS15;
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f013 0f01 	tst.w	r3, #1
 800476a:	bf0c      	ite	eq
 800476c:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		else GPIOA->BSRR =  GPIO_BSRR_BR15;
 8004770:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <SysTick_Callback+0x130>)
 8004776:	611a      	str	r2, [r3, #16]
		if (Current >= 1000) FAN_ON();
 8004778:	8823      	ldrh	r3, [r4, #0]
 800477a:	b21b      	sxth	r3, r3
 800477c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
	GPIOB->BSRR =  GPIO_BSRR_BS0;//FAN ON
 8004780:	bfa2      	ittt	ge
 8004782:	2201      	movge	r2, #1
 8004784:	4b1a      	ldrge	r3, [pc, #104]	; (80047f0 <SysTick_Callback+0x134>)
 8004786:	611a      	strge	r2, [r3, #16]
		if (Current < 1000) FAN_OFF();
 8004788:	8823      	ldrh	r3, [r4, #0]
 800478a:	b21b      	sxth	r3, r3
 800478c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
	GPIOB->BSRR =  GPIO_BSRR_BR0;//FAN OFF
 8004790:	bfbe      	ittt	lt
 8004792:	f44f 3280 	movlt.w	r2, #65536	; 0x10000
 8004796:	4b16      	ldrlt	r3, [pc, #88]	; (80047f0 <SysTick_Callback+0x134>)
 8004798:	611a      	strlt	r2, [r3, #16]
	Count10mSecond++;
 800479a:	883b      	ldrh	r3, [r7, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	803b      	strh	r3, [r7, #0]
	Count100mSecond++;
 80047a2:	8833      	ldrh	r3, [r6, #0]
 80047a4:	3301      	adds	r3, #1
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	8033      	strh	r3, [r6, #0]
	Count1000mSecond++;
 80047aa:	882b      	ldrh	r3, [r5, #0]
 80047ac:	3301      	adds	r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	802b      	strh	r3, [r5, #0]
}
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b4:	200007c8 	.word	0x200007c8
 80047b8:	200002b0 	.word	0x200002b0
 80047bc:	200002ae 	.word	0x200002ae
 80047c0:	200002ac 	.word	0x200002ac
 80047c4:	20000856 	.word	0x20000856
 80047c8:	2000077c 	.word	0x2000077c
 80047cc:	20000778 	.word	0x20000778
 80047d0:	20000787 	.word	0x20000787
 80047d4:	20000788 	.word	0x20000788
 80047d8:	20000790 	.word	0x20000790
 80047dc:	20000794 	.word	0x20000794
 80047e0:	200007a5 	.word	0x200007a5
 80047e4:	200007cc 	.word	0x200007cc
 80047e8:	200007e4 	.word	0x200007e4
 80047ec:	40010800 	.word	0x40010800
 80047f0:	40010c00 	.word	0x40010c00

080047f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047f4:	b510      	push	{r4, lr}
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80047f6:	4c1d      	ldr	r4, [pc, #116]	; (800486c <SystemClock_Config+0x78>)
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fe:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004800:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8004802:	039a      	lsls	r2, r3, #14
 8004804:	d5fc      	bpl.n	8004800 <SystemClock_Config+0xc>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8004806:	6863      	ldr	r3, [r4, #4]
 8004808:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800480c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8004810:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 8004812:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004814:	f023 030f 	bic.w	r3, r3, #15
 8004818:	62e3      	str	r3, [r4, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004820:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004822:	6823      	ldr	r3, [r4, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8004824:	019b      	lsls	r3, r3, #6
 8004826:	d5fc      	bpl.n	8004822 <SystemClock_Config+0x2e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004828:	6863      	ldr	r3, [r4, #4]
 800482a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004830:	6863      	ldr	r3, [r4, #4]
 8004832:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004836:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800483e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	f023 0303 	bic.w	r3, r3, #3
 8004846:	f043 0302 	orr.w	r3, r3, #2
 800484a:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004852:	2b08      	cmp	r3, #8
 8004854:	d1fa      	bne.n	800484c <SystemClock_Config+0x58>
  {

  }
  LL_Init1msTick(24000000);
 8004856:	4806      	ldr	r0, [pc, #24]	; (8004870 <SystemClock_Config+0x7c>)
 8004858:	f000 ff7c 	bl	8005754 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 800485c:	4804      	ldr	r0, [pc, #16]	; (8004870 <SystemClock_Config+0x7c>)
 800485e:	f000 ff87 	bl	8005770 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8004862:	6863      	ldr	r3, [r4, #4]
 8004864:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004868:	6063      	str	r3, [r4, #4]
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
}
 800486a:	bd10      	pop	{r4, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	016e3600 	.word	0x016e3600

08004874 <main>:
{
 8004874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(RCC->APB1ENR, Periphs);
 8004878:	4dc5      	ldr	r5, [pc, #788]	; (8004b90 <main+0x31c>)
 800487a:	b091      	sub	sp, #68	; 0x44
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800487c:	2001      	movs	r0, #1
 800487e:	f7fd f933 	bl	8001ae8 <LL_APB2_GRP1_EnableClock>
 8004882:	69eb      	ldr	r3, [r5, #28]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004884:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8004be4 <main+0x370>
 8004888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488c:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800488e:	69eb      	ldr	r3, [r5, #28]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004890:	f8df a354 	ldr.w	sl, [pc, #852]	; 8004be8 <main+0x374>
 8004894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004898:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800489a:	9b00      	ldr	r3, [sp, #0]
 800489c:	f8d9 200c 	ldr.w	r2, [r9, #12]
  reg_value  =  (reg_value                                   |
 80048a0:	4bbc      	ldr	r3, [pc, #752]	; (8004b94 <main+0x320>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048a6:	0412      	lsls	r2, r2, #16
 80048a8:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 80048aa:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 80048ac:	f8c9 300c 	str.w	r3, [r9, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80048b0:	4bb9      	ldr	r3, [pc, #740]	; (8004b98 <main+0x324>)
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80048b2:	4eba      	ldr	r6, [pc, #744]	; (8004b9c <main+0x328>)
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80048b4:	685a      	ldr	r2, [r3, #4]

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048b6:	2400      	movs	r4, #0
 80048b8:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80048bc:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80048be:	685a      	ldr	r2, [r3, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80048c0:	f04f 0b01 	mov.w	fp, #1
 80048c4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80048c8:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 80048ca:	f7ff ff93 	bl	80047f4 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ce:	2214      	movs	r2, #20
 80048d0:	2100      	movs	r1, #0
 80048d2:	a809      	add	r0, sp, #36	; 0x24
 80048d4:	f000 ff84 	bl	80057e0 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80048d8:	2020      	movs	r0, #32
 80048da:	f7fd f905 	bl	8001ae8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80048de:	2004      	movs	r0, #4
 80048e0:	f7fd f902 	bl	8001ae8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80048e4:	2008      	movs	r0, #8
 80048e6:	f7fd f8ff 	bl	8001ae8 <LL_APB2_GRP1_EnableClock>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80048ea:	f64f 4303 	movw	r3, #64515	; 0xfc03
 80048ee:	f8ca 3014 	str.w	r3, [sl, #20]
 80048f2:	f44f 4309 	mov.w	r3, #35072	; 0x8900
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048f6:	2702      	movs	r7, #2
 80048f8:	6173      	str	r3, [r6, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80048fa:	f240 3303 	movw	r3, #771	; 0x303
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80048fe:	f04f 0804 	mov.w	r8, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004902:	a909      	add	r1, sp, #36	; 0x24
 8004904:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004906:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800490a:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800490e:	f000 fdd5 	bl	80054bc <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
 8004912:	4ba3      	ldr	r3, [pc, #652]	; (8004ba0 <main+0x32c>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004914:	a909      	add	r1, sp, #36	; 0x24
 8004916:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004918:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800491c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004920:	970b      	str	r7, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004922:	f000 fdcb 	bl	80054bc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_15;
 8004926:	4b9f      	ldr	r3, [pc, #636]	; (8004ba4 <main+0x330>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004928:	a909      	add	r1, sp, #36	; 0x24
 800492a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800492c:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004930:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004934:	f000 fdc2 	bl	80054bc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004938:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 800493c:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493e:	a909      	add	r1, sp, #36	; 0x24
 8004940:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004942:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004946:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494a:	f000 fdb7 	bl	80054bc <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 800494e:	696b      	ldr	r3, [r5, #20]
 8004950:	ea43 030b 	orr.w	r3, r3, fp
 8004954:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004956:	696b      	ldr	r3, [r5, #20]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004958:	4d93      	ldr	r5, [pc, #588]	; (8004ba8 <main+0x334>)
 800495a:	ea03 030b 	and.w	r3, r3, fp
 800495e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004960:	9b01      	ldr	r3, [sp, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004962:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004966:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800496a:	f7fd fa4b 	bl	8001e04 <NVIC_EncodePriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800496e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004972:	fa00 f008 	lsl.w	r0, r0, r8
 8004976:	b2c0      	uxtb	r0, r0
 8004978:	f885 030b 	strb.w	r0, [r5, #779]	; 0x30b
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800497c:	221c      	movs	r2, #28
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800497e:	602b      	str	r3, [r5, #0]
 8004980:	4621      	mov	r1, r4
 8004982:	a809      	add	r0, sp, #36	; 0x24
 8004984:	f000 ff2c 	bl	80057e0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004988:	2214      	movs	r2, #20
 800498a:	4621      	mov	r1, r4
 800498c:	a804      	add	r0, sp, #16
 800498e:	f000 ff27 	bl	80057e0 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004992:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004996:	f7fd f8a7 	bl	8001ae8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800499a:	4640      	mov	r0, r8
 800499c:	f7fd f8a4 	bl	8001ae8 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049a0:	2309      	movs	r3, #9
 80049a2:	4982      	ldr	r1, [pc, #520]	; (8004bac <main+0x338>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a4:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049a6:	e9cd 1304 	strd	r1, r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80049aa:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ac:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b2:	f000 fd83 	bl	80054bc <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80049b6:	4b7e      	ldr	r3, [pc, #504]	; (8004bb0 <main+0x33c>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b8:	a904      	add	r1, sp, #16
 80049ba:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80049bc:	e9cd 3804 	strd	r3, r8, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c0:	f000 fd7c 	bl	80054bc <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049c4:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80049c8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80049cc:	f7fd fa1a 	bl	8001e04 <NVIC_EncodePriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049d0:	2320      	movs	r3, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d2:	fa00 f008 	lsl.w	r0, r0, r8
 80049d6:	b2c0      	uxtb	r0, r0
 80049d8:	f885 0325 	strb.w	r0, [r5, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049dc:	606b      	str	r3, [r5, #4]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80049de:	4d75      	ldr	r5, [pc, #468]	; (8004bb4 <main+0x340>)
  LL_USART_Init(USART1, &USART_InitStruct);
 80049e0:	a909      	add	r1, sp, #36	; 0x24
 80049e2:	68eb      	ldr	r3, [r5, #12]
 80049e4:	4628      	mov	r0, r5
 80049e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ea:	60eb      	str	r3, [r5, #12]
  USART_InitStruct.BaudRate = 38400;
 80049ec:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80049f0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80049f4:	230c      	movs	r3, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80049f6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80049fa:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80049fe:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8004a00:	f000 fe3c 	bl	800567c <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a04:	692b      	ldr	r3, [r5, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004a06:	2214      	movs	r2, #20
 8004a08:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004a0c:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004a0e:	696b      	ldr	r3, [r5, #20]
 8004a10:	4621      	mov	r1, r4
 8004a12:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004a16:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004a18:	68eb      	ldr	r3, [r5, #12]
 8004a1a:	a804      	add	r0, sp, #16
 8004a1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a20:	60eb      	str	r3, [r5, #12]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004a22:	e9cd 4402 	strd	r4, r4, [sp, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004a26:	f000 fedb 	bl	80057e0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2a:	2214      	movs	r2, #20
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	a809      	add	r0, sp, #36	; 0x24
 8004a30:	f000 fed6 	bl	80057e0 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8004a34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a38:	f7fd f856 	bl	8001ae8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	f7fd f853 	bl	8001ae8 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8004a42:	f647 637e 	movw	r3, #32382	; 0x7e7e
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a46:	a909      	add	r1, sp, #36	; 0x24
 8004a48:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004a4a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a4e:	f000 fd35 	bl	80054bc <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004a52:	4b59      	ldr	r3, [pc, #356]	; (8004bb8 <main+0x344>)
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004a54:	f44f 7880 	mov.w	r8, #256	; 0x100
 8004a58:	681a      	ldr	r2, [r3, #0]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004a5a:	f5a5 55a0 	sub.w	r5, r5, #5120	; 0x1400
 8004a5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a62:	f022 0210 	bic.w	r2, r2, #16
 8004a66:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	a902      	add	r1, sp, #8
 8004a6c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a74:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f042 0220 	orr.w	r2, r2, #32
 8004a7e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a86:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a8e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004aa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aa6:	601a      	str	r2, [r3, #0]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8004aa8:	4a44      	ldr	r2, [pc, #272]	; (8004bbc <main+0x348>)
 8004aaa:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8004aac:	4a44      	ldr	r2, [pc, #272]	; (8004bc0 <main+0x34c>)
 8004aae:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	0c12      	lsrs	r2, r2, #16
 8004ab4:	0412      	lsls	r2, r2, #16
 8004ab6:	f042 0208 	orr.w	r2, r2, #8
 8004aba:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	ea42 020b 	orr.w	r2, r2, fp
 8004ac2:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004ac4:	9402      	str	r4, [sp, #8]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004ac6:	f8cd 800c 	str.w	r8, [sp, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004aca:	f000 fcc0 	bl	800544e <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004ace:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8004ad2:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004ad6:	a904      	add	r1, sp, #16
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004ad8:	e9cd 0304 	strd	r0, r3, [sp, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004adc:	4628      	mov	r0, r5
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8004ade:	e9cd 4706 	strd	r4, r7, [sp, #24]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004ae2:	f8cd 8020 	str.w	r8, [sp, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004ae6:	f000 fcc7 	bl	8005478 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004aea:	4936      	ldr	r1, [pc, #216]	; (8004bc4 <main+0x350>)
 8004aec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004af0:	f7fd f96c 	bl	8001dcc <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004af4:	4833      	ldr	r0, [pc, #204]	; (8004bc4 <main+0x350>)
 8004af6:	f7fd f93f 	bl	8001d78 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8004afa:	4933      	ldr	r1, [pc, #204]	; (8004bc8 <main+0x354>)
 8004afc:	f240 2005 	movw	r0, #517	; 0x205
 8004b00:	f7fd f964 	bl	8001dcc <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b04:	4830      	ldr	r0, [pc, #192]	; (8004bc8 <main+0x354>)
 8004b06:	f7fd f937 	bl	8001d78 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8004b0a:	4930      	ldr	r1, [pc, #192]	; (8004bcc <main+0x358>)
 8004b0c:	f240 200a 	movw	r0, #522	; 0x20a
 8004b10:	f7fd f95c 	bl	8001dcc <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b14:	482d      	ldr	r0, [pc, #180]	; (8004bcc <main+0x358>)
 8004b16:	f7fd f92f 	bl	8001d78 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_4);
 8004b1a:	492d      	ldr	r1, [pc, #180]	; (8004bd0 <main+0x35c>)
 8004b1c:	f240 200f 	movw	r0, #527	; 0x20f
 8004b20:	f7fd f954 	bl	8001dcc <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b24:	482a      	ldr	r0, [pc, #168]	; (8004bd0 <main+0x35c>)
 8004b26:	f7fd f927 	bl	8001d78 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_5);
 8004b2a:	492a      	ldr	r1, [pc, #168]	; (8004bd4 <main+0x360>)
 8004b2c:	f44f 7005 	mov.w	r0, #532	; 0x214
 8004b30:	f7fd f94c 	bl	8001dcc <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b34:	4827      	ldr	r0, [pc, #156]	; (8004bd4 <main+0x360>)
 8004b36:	f7fd f91f 	bl	8001d78 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_6);
 8004b3a:	4927      	ldr	r1, [pc, #156]	; (8004bd8 <main+0x364>)
 8004b3c:	f240 2019 	movw	r0, #537	; 0x219
 8004b40:	f7fd f944 	bl	8001dcc <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b44:	4824      	ldr	r0, [pc, #144]	; (8004bd8 <main+0x364>)
 8004b46:	f7fd f917 	bl	8001d78 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_TEMPSENSOR);
 8004b4a:	4924      	ldr	r1, [pc, #144]	; (8004bdc <main+0x368>)
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	f7fd f93d 	bl	8001dcc <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b52:	4822      	ldr	r0, [pc, #136]	; (8004bdc <main+0x368>)
 8004b54:	f7fd f910 	bl	8001d78 <LL_ADC_SetChannelSamplingTime.constprop.0>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8004b58:	68ab      	ldr	r3, [r5, #8]
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_VREFINT);
 8004b5a:	4921      	ldr	r1, [pc, #132]	; (8004be0 <main+0x36c>)
 8004b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b60:	60ab      	str	r3, [r5, #8]
 8004b62:	f240 1005 	movw	r0, #261	; 0x105
 8004b66:	f7fd f931 	bl	8001dcc <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004b6a:	481d      	ldr	r0, [pc, #116]	; (8004be0 <main+0x36c>)
 8004b6c:	f7fd f904 	bl	8001d78 <LL_ADC_SetChannelSamplingTime.constprop.0>
 8004b70:	68ab      	ldr	r3, [r5, #8]
	  delay_ms(100);
 8004b72:	2064      	movs	r0, #100	; 0x64
 8004b74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b78:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004b7a:	68ab      	ldr	r3, [r5, #8]
 8004b7c:	ea43 030b 	orr.w	r3, r3, fp
 8004b80:	60ab      	str	r3, [r5, #8]
 8004b82:	f7fc fa59 	bl	8001038 <delay_ms>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8004b86:	68ab      	ldr	r3, [r5, #8]
 8004b88:	f043 0304 	orr.w	r3, r3, #4
 8004b8c:	60ab      	str	r3, [r5, #8]
 8004b8e:	e02d      	b.n	8004bec <main+0x378>
 8004b90:	40021000 	.word	0x40021000
 8004b94:	05fa0300 	.word	0x05fa0300
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40010800 	.word	0x40010800
 8004ba0:	04fc00fc 	.word	0x04fc00fc
 8004ba4:	04890089 	.word	0x04890089
 8004ba8:	e000e100 	.word	0xe000e100
 8004bac:	04020002 	.word	0x04020002
 8004bb0:	04040004 	.word	0x04040004
 8004bb4:	40013800 	.word	0x40013800
 8004bb8:	40020008 	.word	0x40020008
 8004bbc:	4001244c 	.word	0x4001244c
 8004bc0:	2000085a 	.word	0x2000085a
 8004bc4:	02300001 	.word	0x02300001
 8004bc8:	02600002 	.word	0x02600002
 8004bcc:	02900003 	.word	0x02900003
 8004bd0:	02c00004 	.word	0x02c00004
 8004bd4:	02f00005 	.word	0x02f00005
 8004bd8:	03200006 	.word	0x03200006
 8004bdc:	81200010 	.word	0x81200010
 8004be0:	81500011 	.word	0x81500011
 8004be4:	e000ed00 	.word	0xe000ed00
 8004be8:	40010c00 	.word	0x40010c00
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8004bec:	68ac      	ldr	r4, [r5, #8]
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 8004bee:	f014 0404 	ands.w	r4, r4, #4
 8004bf2:	d1fb      	bne.n	8004bec <main+0x378>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004bf4:	68ab      	ldr	r3, [r5, #8]
 8004bf6:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8004bfa:	60ab      	str	r3, [r5, #8]
  InitLCD();
 8004bfc:	f7fc ff69 	bl	8001ad2 <InitLCD>
  SystemCoreClockUpdate();
 8004c00:	f000 fa8c 	bl	800511c <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 8004c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c08:	4bae      	ldr	r3, [pc, #696]	; (8004ec4 <main+0x650>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c10:	3b01      	subs	r3, #1
 8004c12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c16:	d208      	bcs.n	8004c2a <main+0x3b6>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c18:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c1a:	4aab      	ldr	r2, [pc, #684]	; (8004ec8 <main+0x654>)
 8004c1c:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1e:	4bab      	ldr	r3, [pc, #684]	; (8004ecc <main+0x658>)
 8004c20:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c24:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c26:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c28:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	LoggingData.RecordsQuantity= 0;
 8004c2e:	2400      	movs	r4, #0
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004c30:	6133      	str	r3, [r6, #16]
	LoggingData.RecordsQuantity= 0;
 8004c32:	4da7      	ldr	r5, [pc, #668]	; (8004ed0 <main+0x65c>)
	OUT_OFF();
 8004c34:	f7fd fcd6 	bl	80025e4 <OUT_OFF>
	PrintToLCD(Version);
 8004c38:	48a6      	ldr	r0, [pc, #664]	; (8004ed4 <main+0x660>)
	LoggingData.RecordsQuantity= 0;
 8004c3a:	602c      	str	r4, [r5, #0]
	PrintToLCD(Version);
 8004c3c:	f7fc ff3a 	bl	8001ab4 <PrintToLCD>
	InfoToUARTBeforeStart();
 8004c40:	f7fc fa0a 	bl	8001058 <InfoToUARTBeforeStart>
	logInfo(Version);
 8004c44:	48a4      	ldr	r0, [pc, #656]	; (8004ed8 <main+0x664>)
 8004c46:	f000 faff 	bl	8005248 <printToBufferWithoutEndUART1>
 8004c4a:	48a2      	ldr	r0, [pc, #648]	; (8004ed4 <main+0x660>)
 8004c4c:	f000 fa96 	bl	800517c <printToBufferUART1>
	SetSymbols();
 8004c50:	f7fc fe58 	bl	8001904 <SetSymbols>
	lcd_set_xy(0,0);
 8004c54:	4621      	mov	r1, r4
 8004c56:	4620      	mov	r0, r4
 8004c58:	f7fc feac 	bl	80019b4 <lcd_set_xy>
	delay_ms(1000);
 8004c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c60:	f7fc f9ea 	bl	8001038 <delay_ms>
	flash_read_block();
 8004c64:	f7fb fb60 	bl	8000328 <flash_read_block>
	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	2b17      	cmp	r3, #23
 8004c6c:	bf88      	it	hi
 8004c6e:	602c      	strhi	r4, [r5, #0]
	EEpromReadStatus = ReadFromFlash();
 8004c70:	f7fb fe38 	bl	80008e4 <ReadFromFlash>
	if (EEpromReadStatus==0)
 8004c74:	4604      	mov	r4, r0
 8004c76:	b968      	cbnz	r0, 8004c94 <main+0x420>
		delay_ms(1000);
 8004c78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c7c:	f7fc f9dc 	bl	8001038 <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 8004c80:	f7fb fe30 	bl	80008e4 <ReadFromFlash>
 8004c84:	4604      	mov	r4, r0
		logInfo("Read from EEprom - FAIL");
 8004c86:	4894      	ldr	r0, [pc, #592]	; (8004ed8 <main+0x664>)
 8004c88:	f000 fade 	bl	8005248 <printToBufferWithoutEndUART1>
 8004c8c:	4893      	ldr	r0, [pc, #588]	; (8004edc <main+0x668>)
 8004c8e:	f000 fa75 	bl	800517c <printToBufferUART1>
	if (EEpromReadStatus == 0)
 8004c92:	b134      	cbz	r4, 8004ca2 <main+0x42e>
	if (EEpromReadStatus == 1)
 8004c94:	2c01      	cmp	r4, #1
 8004c96:	d114      	bne.n	8004cc2 <main+0x44e>
		logInfo("Read from EEprom - SUCCESS");
 8004c98:	488f      	ldr	r0, [pc, #572]	; (8004ed8 <main+0x664>)
 8004c9a:	f000 fad5 	bl	8005248 <printToBufferWithoutEndUART1>
 8004c9e:	4890      	ldr	r0, [pc, #576]	; (8004ee0 <main+0x66c>)
 8004ca0:	e00d      	b.n	8004cbe <main+0x44a>
		PrintToLCD("EEprom Read FAIL");
 8004ca2:	4890      	ldr	r0, [pc, #576]	; (8004ee4 <main+0x670>)
 8004ca4:	f7fc ff06 	bl	8001ab4 <PrintToLCD>
		delay_ms(4000);
 8004ca8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004cac:	f7fc f9c4 	bl	8001038 <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 8004cb0:	488d      	ldr	r0, [pc, #564]	; (8004ee8 <main+0x674>)
 8004cb2:	f7fb fffb 	bl	8000cac <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 8004cb6:	4888      	ldr	r0, [pc, #544]	; (8004ed8 <main+0x664>)
 8004cb8:	f000 fac6 	bl	8005248 <printToBufferWithoutEndUART1>
 8004cbc:	4887      	ldr	r0, [pc, #540]	; (8004edc <main+0x668>)
		logInfo("Read from EEprom - SUCCESS");
 8004cbe:	f000 fa5d 	bl	800517c <printToBufferUART1>
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004cc2:	4d8a      	ldr	r5, [pc, #552]	; (8004eec <main+0x678>)
 8004cc4:	4b8a      	ldr	r3, [pc, #552]	; (8004ef0 <main+0x67c>)
 8004cc6:	692a      	ldr	r2, [r5, #16]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004cc8:	4c8a      	ldr	r4, [pc, #552]	; (8004ef4 <main+0x680>)
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004cca:	601a      	str	r2, [r3, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004ccc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004cd0:	6922      	ldr	r2, [r4, #16]
  OutStateAfterPowerUp = SettingsData.Option2;
 8004cd2:	4e89      	ldr	r6, [pc, #548]	; (8004ef8 <main+0x684>)
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004cd4:	4353      	muls	r3, r2
 8004cd6:	4a89      	ldr	r2, [pc, #548]	; (8004efc <main+0x688>)
 8004cd8:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8004cda:	68a2      	ldr	r2, [r4, #8]
 8004cdc:	4b88      	ldr	r3, [pc, #544]	; (8004f00 <main+0x68c>)
 8004cde:	601a      	str	r2, [r3, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ce2:	4a88      	ldr	r2, [pc, #544]	; (8004f04 <main+0x690>)
  OutStateAfterPowerUp = SettingsData.Option2;
 8004ce4:	6033      	str	r3, [r6, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004ce6:	6013      	str	r3, [r2, #0]
  Generation_Coefficients_R_A_B();
 8004ce8:	f7fb ff84 	bl	8000bf4 <Generation_Coefficients_R_A_B>
  delay_ms(1000);
 8004cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cf0:	f7fc f9a2 	bl	8001038 <delay_ms>
  lcd_clear();
 8004cf4:	f7fc fecc 	bl	8001a90 <lcd_clear>
	Menu_SetGenericWriteCallback(Generic_Write);
 8004cf8:	4883      	ldr	r0, [pc, #524]	; (8004f08 <main+0x694>)
 8004cfa:	f7fc fd4f 	bl	800179c <Menu_SetGenericWriteCallback>
	if (SettingsData.Option1 == 1)
 8004cfe:	68a3      	ldr	r3, [r4, #8]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d114      	bne.n	8004d2e <main+0x4ba>
		Menu_Navigate(&Menu_2_1);
 8004d04:	4881      	ldr	r0, [pc, #516]	; (8004f0c <main+0x698>)
		Menu_Navigate(&Menu_3_1);
 8004d06:	f7fc fd2f 	bl	8001768 <Menu_Navigate>
  	Blink_message_counter++;
 8004d0a:	4f81      	ldr	r7, [pc, #516]	; (8004f10 <main+0x69c>)
	if (Menu_GetCurrentMenu() == &Menu_2_1)
 8004d0c:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8004f0c <main+0x698>
 8004d10:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8004f64 <main+0x6f0>
  	Blink_message_counter++;
 8004d14:	783b      	ldrb	r3, [r7, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	703b      	strb	r3, [r7, #0]
  	Button=BUT_GetKey();
 8004d1a:	f7fd fc13 	bl	8002544 <BUT_GetKey>
 8004d1e:	1e43      	subs	r3, r0, #1
 8004d20:	4604      	mov	r4, r0
	switch (Button)
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d820      	bhi.n	8004d68 <main+0x4f4>
 8004d26:	e8df f003 	tbb	[pc, r3]
 8004d2a:	401a      	.short	0x401a
 8004d2c:	4b44      	.short	0x4b44
	else if (SettingsData.Option1 == 2)
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d101      	bne.n	8004d36 <main+0x4c2>
		Menu_Navigate(&Menu_3_1);
 8004d32:	4878      	ldr	r0, [pc, #480]	; (8004f14 <main+0x6a0>)
 8004d34:	e7e7      	b.n	8004d06 <main+0x492>
	else if (SettingsData.Option1 == 3)
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d101      	bne.n	8004d3e <main+0x4ca>
		Menu_Navigate(&Menu_4_1);
 8004d3a:	4877      	ldr	r0, [pc, #476]	; (8004f18 <main+0x6a4>)
 8004d3c:	e7e3      	b.n	8004d06 <main+0x492>
	else if (SettingsData.Option1 == 4)
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d101      	bne.n	8004d46 <main+0x4d2>
		Menu_Navigate(&Menu_5_1);
 8004d42:	4876      	ldr	r0, [pc, #472]	; (8004f1c <main+0x6a8>)
 8004d44:	e7df      	b.n	8004d06 <main+0x492>
	else if (SettingsData.Option1 == 5)
 8004d46:	2b05      	cmp	r3, #5
 8004d48:	d101      	bne.n	8004d4e <main+0x4da>
		Menu_Navigate(&Menu_6_1);
 8004d4a:	4875      	ldr	r0, [pc, #468]	; (8004f20 <main+0x6ac>)
 8004d4c:	e7db      	b.n	8004d06 <main+0x492>
	else if (SettingsData.Option1 == 6)
 8004d4e:	2b06      	cmp	r3, #6
 8004d50:	d101      	bne.n	8004d56 <main+0x4e2>
		Menu_Navigate(&Menu_7_1);
 8004d52:	4874      	ldr	r0, [pc, #464]	; (8004f24 <main+0x6b0>)
 8004d54:	e7d7      	b.n	8004d06 <main+0x492>
	else if (SettingsData.Option1 == 7)
 8004d56:	2b07      	cmp	r3, #7
 8004d58:	d1d4      	bne.n	8004d04 <main+0x490>
		Menu_Navigate(&Menu_8_1);
 8004d5a:	4873      	ldr	r0, [pc, #460]	; (8004f28 <main+0x6b4>)
 8004d5c:	e7d3      	b.n	8004d06 <main+0x492>
			Menu_Navigate(MENU_PREVIOUS);
 8004d5e:	f7fc fcfd 	bl	800175c <Menu_GetCurrentMenu>
 8004d62:	6840      	ldr	r0, [r0, #4]
			Menu_Navigate(MENU_PARENT);
 8004d64:	f7fc fd00 	bl	8001768 <Menu_Navigate>
	if (Menu_GetCurrentMenu() == &Menu_2_1)
 8004d68:	f7fc fcf8 	bl	800175c <Menu_GetCurrentMenu>
 8004d6c:	4581      	cmp	r9, r0
 8004d6e:	d12b      	bne.n	8004dc8 <main+0x554>
		MenuPowerSupply(Button);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7fd fe37 	bl	80029e4 <MenuPowerSupply>
	if (EnterInMenu_Status == 0)
 8004d76:	f898 3000 	ldrb.w	r3, [r8]
 8004d7a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004d7e:	b983      	cbnz	r3, 8004da2 <main+0x52e>
	OUT_OFF();
 8004d80:	f7fd fc30 	bl	80025e4 <OUT_OFF>
		InitiStatus = 0;
 8004d84:	4b69      	ldr	r3, [pc, #420]	; (8004f2c <main+0x6b8>)
 8004d86:	7019      	strb	r1, [r3, #0]
		CountShow = 0;
 8004d88:	4b69      	ldr	r3, [pc, #420]	; (8004f30 <main+0x6bc>)
 8004d8a:	7019      	strb	r1, [r3, #0]
		SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8004d8c:	4b69      	ldr	r3, [pc, #420]	; (8004f34 <main+0x6c0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60ab      	str	r3, [r5, #8]
		DischargeTimeSec_Previous = DischargeTimeSec;
 8004d92:	4b69      	ldr	r3, [pc, #420]	; (8004f38 <main+0x6c4>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b69      	ldr	r3, [pc, #420]	; (8004f3c <main+0x6c8>)
 8004d98:	601a      	str	r2, [r3, #0]
		ChargeDischargeState = 0;
 8004d9a:	4b69      	ldr	r3, [pc, #420]	; (8004f40 <main+0x6cc>)
 8004d9c:	7019      	strb	r1, [r3, #0]
		OutStateAfterPowerUp = 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	6033      	str	r3, [r6, #0]
	delay_ms(100);
 8004da2:	2064      	movs	r0, #100	; 0x64
 8004da4:	f7fc f948 	bl	8001038 <delay_ms>
  {
 8004da8:	e7b4      	b.n	8004d14 <main+0x4a0>
			Menu_Navigate(MENU_NEXT);
 8004daa:	f7fc fcd7 	bl	800175c <Menu_GetCurrentMenu>
 8004dae:	6800      	ldr	r0, [r0, #0]
 8004db0:	e7d8      	b.n	8004d64 <main+0x4f0>
			Menu_SelectItem(KEY_NEXT);
 8004db2:	2002      	movs	r0, #2
 8004db4:	f7fc fcfc 	bl	80017b0 <Menu_SelectItem>
			Menu_Navigate(MENU_CHILD);
 8004db8:	f7fc fcd0 	bl	800175c <Menu_GetCurrentMenu>
 8004dbc:	68c0      	ldr	r0, [r0, #12]
 8004dbe:	e7d1      	b.n	8004d64 <main+0x4f0>
			Menu_Navigate(MENU_PARENT);
 8004dc0:	f7fc fccc 	bl	800175c <Menu_GetCurrentMenu>
 8004dc4:	6880      	ldr	r0, [r0, #8]
 8004dc6:	e7cd      	b.n	8004d64 <main+0x4f0>
	else if (Menu_GetCurrentMenu() == &Menu_3_1)
 8004dc8:	f7fc fcc8 	bl	800175c <Menu_GetCurrentMenu>
 8004dcc:	4b51      	ldr	r3, [pc, #324]	; (8004f14 <main+0x6a0>)
 8004dce:	4283      	cmp	r3, r0
 8004dd0:	d103      	bne.n	8004dda <main+0x566>
		MenuLoad(Button);
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	f7fd f818 	bl	8001e08 <MenuLoad>
 8004dd8:	e7cd      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_4_1)
 8004dda:	f7fc fcbf 	bl	800175c <Menu_GetCurrentMenu>
 8004dde:	4b4e      	ldr	r3, [pc, #312]	; (8004f18 <main+0x6a4>)
 8004de0:	4283      	cmp	r3, r0
 8004de2:	d103      	bne.n	8004dec <main+0x578>
		MenuChargeCC_CV(Button);
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7fe f81d 	bl	8002e24 <MenuChargeCC_CV>
 8004dea:	e7c4      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_5_1)
 8004dec:	f7fc fcb6 	bl	800175c <Menu_GetCurrentMenu>
 8004df0:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <main+0x6a8>)
 8004df2:	4283      	cmp	r3, r0
 8004df4:	d103      	bne.n	8004dfe <main+0x58a>
		MenuChargeAdapt(Button);
 8004df6:	4620      	mov	r0, r4
 8004df8:	f7fe f98a 	bl	8003110 <MenuChargeAdapt>
 8004dfc:	e7bb      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_6_1)
 8004dfe:	f7fc fcad 	bl	800175c <Menu_GetCurrentMenu>
 8004e02:	4b47      	ldr	r3, [pc, #284]	; (8004f20 <main+0x6ac>)
 8004e04:	4283      	cmp	r3, r0
 8004e06:	d103      	bne.n	8004e10 <main+0x59c>
		MenuDisCharge(Button);
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f7fd fc63 	bl	80026d4 <MenuDisCharge>
 8004e0e:	e7b2      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_6_1a)
 8004e10:	f7fc fca4 	bl	800175c <Menu_GetCurrentMenu>
 8004e14:	4b4b      	ldr	r3, [pc, #300]	; (8004f44 <main+0x6d0>)
 8004e16:	4283      	cmp	r3, r0
 8004e18:	d103      	bne.n	8004e22 <main+0x5ae>
		MenuCheckingCapacity(Button);
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7fe fea4 	bl	8003b68 <MenuCheckingCapacity>
 8004e20:	e7a9      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_7_1)
 8004e22:	f7fc fc9b 	bl	800175c <Menu_GetCurrentMenu>
 8004e26:	4b3f      	ldr	r3, [pc, #252]	; (8004f24 <main+0x6b0>)
 8004e28:	4283      	cmp	r3, r0
 8004e2a:	d103      	bne.n	8004e34 <main+0x5c0>
		MenuTraining_new(Button);
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7fe fb4d 	bl	80034cc <MenuTraining_new>
 8004e32:	e7a0      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_8_1)
 8004e34:	f7fc fc92 	bl	800175c <Menu_GetCurrentMenu>
 8004e38:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <main+0x6b4>)
 8004e3a:	4283      	cmp	r3, r0
 8004e3c:	d103      	bne.n	8004e46 <main+0x5d2>
		MenuSwing(Button);
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f7fe fd96 	bl	8003970 <MenuSwing>
 8004e44:	e797      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_8a_1)
 8004e46:	f7fc fc89 	bl	800175c <Menu_GetCurrentMenu>
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <main+0x6d4>)
 8004e4c:	4283      	cmp	r3, r0
 8004e4e:	d103      	bne.n	8004e58 <main+0x5e4>
		MenuBatterySimilation(Button);
 8004e50:	4620      	mov	r0, r4
 8004e52:	f7fd ff6f 	bl	8002d34 <MenuBatterySimilation>
 8004e56:	e78e      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_9_1)
 8004e58:	f7fc fc80 	bl	800175c <Menu_GetCurrentMenu>
 8004e5c:	4b3b      	ldr	r3, [pc, #236]	; (8004f4c <main+0x6d8>)
 8004e5e:	4283      	cmp	r3, r0
 8004e60:	d103      	bne.n	8004e6a <main+0x5f6>
		MenuDIAGNOSTIC(Button);
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7ff f97e 	bl	8004164 <MenuDIAGNOSTIC>
 8004e68:	e785      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_11_1)
 8004e6a:	f7fc fc77 	bl	800175c <Menu_GetCurrentMenu>
 8004e6e:	4b38      	ldr	r3, [pc, #224]	; (8004f50 <main+0x6dc>)
 8004e70:	4283      	cmp	r3, r0
 8004e72:	d103      	bne.n	8004e7c <main+0x608>
		MenuLog(Button);
 8004e74:	4620      	mov	r0, r4
 8004e76:	f7fd f83d 	bl	8001ef4 <MenuLog>
 8004e7a:	e77c      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_2_1)
 8004e7c:	f7fc fc6e 	bl	800175c <Menu_GetCurrentMenu>
 8004e80:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <main+0x6e0>)
 8004e82:	4283      	cmp	r3, r0
 8004e84:	d103      	bne.n	8004e8e <main+0x61a>
		MenuCalibration_CURRENT_Load_to_0(Button);
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7fd f8a2 	bl	8001fd0 <MenuCalibration_CURRENT_Load_to_0>
 8004e8c:	e773      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_1_1)
 8004e8e:	f7fc fc65 	bl	800175c <Menu_GetCurrentMenu>
 8004e92:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <main+0x6e4>)
 8004e94:	4283      	cmp	r3, r0
 8004e96:	d103      	bne.n	8004ea0 <main+0x62c>
		MenuCalibration_CURRENT_Out_to_0(Button);
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7fd f875 	bl	8001f88 <MenuCalibration_CURRENT_Out_to_0>
 8004e9e:	e76a      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_4_1)
 8004ea0:	f7fc fc5c 	bl	800175c <Menu_GetCurrentMenu>
 8004ea4:	4b2d      	ldr	r3, [pc, #180]	; (8004f5c <main+0x6e8>)
 8004ea6:	4283      	cmp	r3, r0
 8004ea8:	d103      	bne.n	8004eb2 <main+0x63e>
		MenuCalibration_CURRENT_Load(Button);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7fd fbb8 	bl	8002620 <MenuCalibration_CURRENT_Load>
 8004eb0:	e761      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_3_1)
 8004eb2:	f7fc fc53 	bl	800175c <Menu_GetCurrentMenu>
 8004eb6:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <main+0x6ec>)
 8004eb8:	4283      	cmp	r3, r0
 8004eba:	d155      	bne.n	8004f68 <main+0x6f4>
		MenuCalibration_CURRENT_Out(Button);
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7fd fdf3 	bl	8002aa8 <MenuCalibration_CURRENT_Out>
 8004ec2:	e758      	b.n	8004d76 <main+0x502>
 8004ec4:	2000028c 	.word	0x2000028c
 8004ec8:	e000e010 	.word	0xe000e010
 8004ecc:	e000ed00 	.word	0xe000ed00
 8004ed0:	20000878 	.word	0x20000878
 8004ed4:	2000027a 	.word	0x2000027a
 8004ed8:	08005c1a 	.word	0x08005c1a
 8004edc:	08006278 	.word	0x08006278
 8004ee0:	08005ac4 	.word	0x08005ac4
 8004ee4:	08006290 	.word	0x08006290
 8004ee8:	080062a1 	.word	0x080062a1
 8004eec:	200000f4 	.word	0x200000f4
 8004ef0:	20000780 	.word	0x20000780
 8004ef4:	20000154 	.word	0x20000154
 8004ef8:	20000274 	.word	0x20000274
 8004efc:	20000a18 	.word	0x20000a18
 8004f00:	20000a1c 	.word	0x20000a1c
 8004f04:	20000a14 	.word	0x20000a14
 8004f08:	08001c99 	.word	0x08001c99
 8004f0c:	080069e4 	.word	0x080069e4
 8004f10:	20000785 	.word	0x20000785
 8004f14:	08006a3c 	.word	0x08006a3c
 8004f18:	08006a94 	.word	0x08006a94
 8004f1c:	08006aec 	.word	0x08006aec
 8004f20:	08006b44 	.word	0x08006b44
 8004f24:	08006bf4 	.word	0x08006bf4
 8004f28:	08006c4c 	.word	0x08006c4c
 8004f2c:	2000079d 	.word	0x2000079d
 8004f30:	2000078d 	.word	0x2000078d
 8004f34:	2000077c 	.word	0x2000077c
 8004f38:	20000794 	.word	0x20000794
 8004f3c:	20000798 	.word	0x20000798
 8004f40:	20000786 	.word	0x20000786
 8004f44:	08006b70 	.word	0x08006b70
 8004f48:	08006ca4 	.word	0x08006ca4
 8004f4c:	08006cfc 	.word	0x08006cfc
 8004f50:	08006648 	.word	0x08006648
 8004f54:	080063b8 	.word	0x080063b8
 8004f58:	08006360 	.word	0x08006360
 8004f5c:	08006468 	.word	0x08006468
 8004f60:	08006410 	.word	0x08006410
 8004f64:	2000079c 	.word	0x2000079c
	else if (Menu_GetCurrentMenu() == &Menu_10_7_1)
 8004f68:	f7fc fbf8 	bl	800175c <Menu_GetCurrentMenu>
 8004f6c:	4b3f      	ldr	r3, [pc, #252]	; (800506c <main+0x7f8>)
 8004f6e:	4283      	cmp	r3, r0
 8004f70:	d103      	bne.n	8004f7a <main+0x706>
		MenuCalibration_VoltageIn(Button);
 8004f72:	4620      	mov	r0, r4
 8004f74:	f7fd fe40 	bl	8002bf8 <MenuCalibration_VoltageIn>
 8004f78:	e6fd      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_6_1)
 8004f7a:	f7fc fbef 	bl	800175c <Menu_GetCurrentMenu>
 8004f7e:	4b3c      	ldr	r3, [pc, #240]	; (8005070 <main+0x7fc>)
 8004f80:	4283      	cmp	r3, r0
 8004f82:	d103      	bne.n	8004f8c <main+0x718>
		MenuCalibration_VoltageOut(Button);
 8004f84:	4620      	mov	r0, r4
 8004f86:	f7fd fdff 	bl	8002b88 <MenuCalibration_VoltageOut>
 8004f8a:	e6f4      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_5_1)
 8004f8c:	f7fc fbe6 	bl	800175c <Menu_GetCurrentMenu>
 8004f90:	4b38      	ldr	r3, [pc, #224]	; (8005074 <main+0x800>)
 8004f92:	4283      	cmp	r3, r0
 8004f94:	d103      	bne.n	8004f9e <main+0x72a>
		MenuCalibration_VoltagePS(Button);
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7fd fdbe 	bl	8002b18 <MenuCalibration_VoltagePS>
 8004f9c:	e6eb      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_8_1)
 8004f9e:	f7fc fbdd 	bl	800175c <Menu_GetCurrentMenu>
 8004fa2:	4b35      	ldr	r3, [pc, #212]	; (8005078 <main+0x804>)
 8004fa4:	4283      	cmp	r3, r0
 8004fa6:	d103      	bne.n	8004fb0 <main+0x73c>
		MenuCalibration_Resist_Comp_5V1A(Button);
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f7fd fe5d 	bl	8002c68 <MenuCalibration_Resist_Comp_5V1A>
 8004fae:	e6e2      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_9_1)
 8004fb0:	f7fc fbd4 	bl	800175c <Menu_GetCurrentMenu>
 8004fb4:	4b31      	ldr	r3, [pc, #196]	; (800507c <main+0x808>)
 8004fb6:	4283      	cmp	r3, r0
 8004fb8:	d103      	bne.n	8004fc2 <main+0x74e>
		MenuCalibration_BackToFactory(Button);
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f7fd f82c 	bl	8002018 <MenuCalibration_BackToFactory>
 8004fc0:	e6d9      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_1_1)
 8004fc2:	f7fc fbcb 	bl	800175c <Menu_GetCurrentMenu>
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <main+0x80c>)
 8004fc8:	4283      	cmp	r3, r0
 8004fca:	d103      	bne.n	8004fd4 <main+0x760>
		MenuSettingsChargeTime(Button);
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f7fd f87f 	bl	80020d0 <MenuSettingsChargeTime>
 8004fd2:	e6d0      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_1_1a)
 8004fd4:	f7fc fbc2 	bl	800175c <Menu_GetCurrentMenu>
 8004fd8:	4b2a      	ldr	r3, [pc, #168]	; (8005084 <main+0x810>)
 8004fda:	4283      	cmp	r3, r0
 8004fdc:	d103      	bne.n	8004fe6 <main+0x772>
		MenuSettingsBatteryType(Button);
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f7fd f89c 	bl	800211c <MenuSettingsBatteryType>
 8004fe4:	e6c7      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_2_1)
 8004fe6:	f7fc fbb9 	bl	800175c <Menu_GetCurrentMenu>
 8004fea:	4b27      	ldr	r3, [pc, #156]	; (8005088 <main+0x814>)
 8004fec:	4283      	cmp	r3, r0
 8004fee:	d103      	bne.n	8004ff8 <main+0x784>
		MenuSettingsLowVolt(Button);
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f7fd f90b 	bl	800220c <MenuSettingsLowVolt>
 8004ff6:	e6be      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_3_1)
 8004ff8:	f7fc fbb0 	bl	800175c <Menu_GetCurrentMenu>
 8004ffc:	4b23      	ldr	r3, [pc, #140]	; (800508c <main+0x818>)
 8004ffe:	4283      	cmp	r3, r0
 8005000:	d103      	bne.n	800500a <main+0x796>
		MenuSettingsMaxVolt(Button);
 8005002:	4620      	mov	r0, r4
 8005004:	f7fd f924 	bl	8002250 <MenuSettingsMaxVolt>
 8005008:	e6b5      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_4_1)
 800500a:	f7fc fba7 	bl	800175c <Menu_GetCurrentMenu>
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <main+0x81c>)
 8005010:	4283      	cmp	r3, r0
 8005012:	d103      	bne.n	800501c <main+0x7a8>
		MenuSettingsSwngChrgTime(Button);
 8005014:	4620      	mov	r0, r4
 8005016:	f7fd f93d 	bl	8002294 <MenuSettingsSwngChrgTime>
 800501a:	e6ac      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_5_1)
 800501c:	f7fc fb9e 	bl	800175c <Menu_GetCurrentMenu>
 8005020:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <main+0x820>)
 8005022:	4283      	cmp	r3, r0
 8005024:	d103      	bne.n	800502e <main+0x7ba>
		MenuSettingsSwngDChrgTime(Button);
 8005026:	4620      	mov	r0, r4
 8005028:	f7fd f952 	bl	80022d0 <MenuSettingsSwngDChrgTime>
 800502c:	e6a3      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_6_1)
 800502e:	f7fc fb95 	bl	800175c <Menu_GetCurrentMenu>
 8005032:	4b19      	ldr	r3, [pc, #100]	; (8005098 <main+0x824>)
 8005034:	4283      	cmp	r3, r0
 8005036:	d103      	bne.n	8005040 <main+0x7cc>
		MenuSettingsChargeAddapt(Button);
 8005038:	4620      	mov	r0, r4
 800503a:	f7fd f967 	bl	800230c <MenuSettingsChargeAddapt>
 800503e:	e69a      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_S_1)
 8005040:	f7fc fb8c 	bl	800175c <Menu_GetCurrentMenu>
 8005044:	4b15      	ldr	r3, [pc, #84]	; (800509c <main+0x828>)
 8005046:	4283      	cmp	r3, r0
 8005048:	d103      	bne.n	8005052 <main+0x7de>
		MenuSettingsSaveMenuPosWhenOFF(Button);
 800504a:	4620      	mov	r0, r4
 800504c:	f7fd f9ba 	bl	80023c4 <MenuSettingsSaveMenuPosWhenOFF>
 8005050:	e691      	b.n	8004d76 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_SO_1)
 8005052:	f7fc fb83 	bl	800175c <Menu_GetCurrentMenu>
 8005056:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <main+0x82c>)
 8005058:	4283      	cmp	r3, r0
 800505a:	d103      	bne.n	8005064 <main+0x7f0>
		MenuSettingsOutAfterPowerUp(Button);
 800505c:	4620      	mov	r0, r4
 800505e:	f7fd fa07 	bl	8002470 <MenuSettingsOutAfterPowerUp>
 8005062:	e688      	b.n	8004d76 <main+0x502>
	else EnterInMenu_Status = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	f888 3000 	strb.w	r3, [r8]
 800506a:	e684      	b.n	8004d76 <main+0x502>
 800506c:	08006570 	.word	0x08006570
 8005070:	08006518 	.word	0x08006518
 8005074:	080064c0 	.word	0x080064c0
 8005078:	080065b8 	.word	0x080065b8
 800507c:	08006600 	.word	0x08006600
 8005080:	080066a0 	.word	0x080066a0
 8005084:	080066cc 	.word	0x080066cc
 8005088:	08006750 	.word	0x08006750
 800508c:	080067a8 	.word	0x080067a8
 8005090:	08006800 	.word	0x08006800
 8005094:	08006858 	.word	0x08006858
 8005098:	080068b0 	.word	0x080068b0
 800509c:	0800698c 	.word	0x0800698c
 80050a0:	08006960 	.word	0x08006960

080050a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050a4:	4770      	bx	lr

080050a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050a6:	e7fe      	b.n	80050a6 <HardFault_Handler>

080050a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050a8:	e7fe      	b.n	80050a8 <MemManage_Handler>

080050aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050aa:	e7fe      	b.n	80050aa <BusFault_Handler>

080050ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050ac:	e7fe      	b.n	80050ac <UsageFault_Handler>

080050ae <SVC_Handler>:
 80050ae:	4770      	bx	lr

080050b0 <DebugMon_Handler>:
 80050b0:	4770      	bx	lr

080050b2 <PendSV_Handler>:
 80050b2:	4770      	bx	lr

080050b4 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//Delay_us(990);
	SysTick_Callback();
 80050b4:	f7ff bb02 	b.w	80046bc <SysTick_Callback>

080050b8 <DMA1_Channel1_IRQHandler>:
 80050b8:	4770      	bx	lr
	...

080050bc <USART1_IRQHandler>:
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 80050bc:	4914      	ldr	r1, [pc, #80]	; (8005110 <USART1_IRQHandler+0x54>)
 80050be:	680b      	ldr	r3, [r1, #0]
 80050c0:	061b      	lsls	r3, r3, #24
 80050c2:	d524      	bpl.n	800510e <USART1_IRQHandler+0x52>
	{
		if (bufferUart1.tx_counter > 0) //если есть что передать
 80050c4:	4b13      	ldr	r3, [pc, #76]	; (8005114 <USART1_IRQHandler+0x58>)
 80050c6:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80050ca:	b292      	uxth	r2, r2
 80050cc:	b1da      	cbz	r2, 8005106 <USART1_IRQHandler+0x4a>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количество не переданных данных
 80050ce:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80050d2:	3a01      	subs	r2, #1
 80050d4:	b292      	uxth	r2, r2
 80050d6:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементируя хвост буфера
 80050da:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 80050de:	b292      	uxth	r2, r2
 80050e0:	1c50      	adds	r0, r2, #1
 80050e2:	b280      	uxth	r0, r0
 80050e4:	f8a3 0456 	strh.w	r0, [r3, #1110]	; 0x456
 80050e8:	441a      	add	r2, r3
 80050ea:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	604a      	str	r2, [r1, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 80050f2:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 80050f6:	b292      	uxth	r2, r2
 80050f8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80050fc:	d107      	bne.n	800510e <USART1_IRQHandler+0x52>
 80050fe:	2200      	movs	r2, #0
 8005100:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
 8005104:	4770      	bx	lr
	    }
	    else //если нечего передать, запрещаем прерывание по передачи
	    {
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005106:	68cb      	ldr	r3, [r1, #12]
 8005108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800510c:	60cb      	str	r3, [r1, #12]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800510e:	4770      	bx	lr
 8005110:	40013800 	.word	0x40013800
 8005114:	200002b4 	.word	0x200002b4

08005118 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005118:	4770      	bx	lr
	...

0800511c <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800511c:	4a12      	ldr	r2, [pc, #72]	; (8005168 <SystemCoreClockUpdate+0x4c>)
{
 800511e:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005120:	6853      	ldr	r3, [r2, #4]
  
  switch (tmp)
 8005122:	4912      	ldr	r1, [pc, #72]	; (800516c <SystemCoreClockUpdate+0x50>)
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005124:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 8005128:	2b08      	cmp	r3, #8
 800512a:	d00a      	beq.n	8005142 <SystemCoreClockUpdate+0x26>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800512c:	4b10      	ldr	r3, [pc, #64]	; (8005170 <SystemCoreClockUpdate+0x54>)
      else
      {
 #if defined(STM32F100xB) || defined(STM32F100xE)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 800512e:	600b      	str	r3, [r1, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8005130:	6853      	ldr	r3, [r2, #4]
 8005132:	4a10      	ldr	r2, [pc, #64]	; (8005174 <SystemCoreClockUpdate+0x58>)
 8005134:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005138:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800513a:	680b      	ldr	r3, [r1, #0]
 800513c:	40d3      	lsrs	r3, r2
 800513e:	600b      	str	r3, [r1, #0]
}
 8005140:	bd10      	pop	{r4, pc}
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8005142:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8005144:	6850      	ldr	r0, [r2, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 8005146:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00U)
 800514a:	03c0      	lsls	r0, r0, #15
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 800514c:	bf41      	itttt	mi
 800514e:	6ad0      	ldrmi	r0, [r2, #44]	; 0x2c
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8005150:	4c07      	ldrmi	r4, [pc, #28]	; (8005170 <SystemCoreClockUpdate+0x54>)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 8005152:	f000 000f 	andmi.w	r0, r0, #15
 8005156:	3001      	addmi	r0, #1
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8005158:	bf4c      	ite	mi
 800515a:	fbb4 f0f0 	udivmi	r0, r4, r0
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 800515e:	4806      	ldrpl	r0, [pc, #24]	; (8005178 <SystemCoreClockUpdate+0x5c>)
      pllmull = ( pllmull >> 18U) + 2U;
 8005160:	3302      	adds	r3, #2
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8005162:	4343      	muls	r3, r0
 8005164:	e7e3      	b.n	800512e <SystemCoreClockUpdate+0x12>
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000
 800516c:	2000028c 	.word	0x2000028c
 8005170:	007a1200 	.word	0x007a1200
 8005174:	08006d25 	.word	0x08006d25
 8005178:	003d0900 	.word	0x003d0900

0800517c <printToBufferUART1>:
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800517c:	2100      	movs	r1, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800517e:	4a30      	ldr	r2, [pc, #192]	; (8005240 <printToBufferUART1+0xc4>)
{
 8005180:	b510      	push	{r4, lr}
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005182:	68d3      	ldr	r3, [r2, #12]
 8005184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005188:	60d3      	str	r3, [r2, #12]
	while (*str != 0)
 800518a:	4b2e      	ldr	r3, [pc, #184]	; (8005244 <printToBufferUART1+0xc8>)
 800518c:	7802      	ldrb	r2, [r0, #0]
 800518e:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8005192:	bb5a      	cbnz	r2, 80051ec <printToBufferUART1+0x70>
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8005194:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005198:	b292      	uxth	r2, r2
 800519a:	1c51      	adds	r1, r2, #1
 800519c:	b289      	uxth	r1, r1
 800519e:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 80051a2:	210a      	movs	r1, #10
 80051a4:	441a      	add	r2, r3
 80051a6:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80051aa:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80051ae:	b292      	uxth	r2, r2
 80051b0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80051b4:	bf08      	it	eq
 80051b6:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80051ba:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80051be:	3201      	adds	r2, #1
 80051c0:	b292      	uxth	r2, r2
 80051c2:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80051c6:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 80051ca:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80051ce:	b289      	uxth	r1, r1
 80051d0:	b292      	uxth	r2, r2
 80051d2:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80051d4:	bf3e      	ittt	cc
 80051d6:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 80051da:	b292      	uxthcc	r2, r2
 80051dc:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80051e0:	4a17      	ldr	r2, [pc, #92]	; (8005240 <printToBufferUART1+0xc4>)
 80051e2:	68d3      	ldr	r3, [r2, #12]
 80051e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e8:	60d3      	str	r3, [r2, #12]
}
 80051ea:	bd10      	pop	{r4, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80051ec:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80051f0:	b292      	uxth	r2, r2
 80051f2:	1c54      	adds	r4, r2, #1
 80051f4:	b2a4      	uxth	r4, r4
 80051f6:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 80051fa:	f810 4b01 	ldrb.w	r4, [r0], #1
 80051fe:	441a      	add	r2, r3
 8005200:	b2e4      	uxtb	r4, r4
 8005202:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005206:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800520a:	b292      	uxth	r2, r2
 800520c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005210:	bf08      	it	eq
 8005212:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005216:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800521a:	3201      	adds	r2, #1
 800521c:	b292      	uxth	r2, r2
 800521e:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005222:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 8005226:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800522a:	b2a4      	uxth	r4, r4
 800522c:	b292      	uxth	r2, r2
 800522e:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005230:	bf3e      	ittt	cc
 8005232:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 8005236:	b292      	uxthcc	r2, r2
 8005238:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 800523c:	e7a6      	b.n	800518c <printToBufferUART1+0x10>
 800523e:	bf00      	nop
 8005240:	40013800 	.word	0x40013800
 8005244:	200002b4 	.word	0x200002b4

08005248 <printToBufferWithoutEndUART1>:
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005248:	2100      	movs	r1, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800524a:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <printToBufferWithoutEndUART1+0x74>)
{
 800524c:	b510      	push	{r4, lr}
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800524e:	68d3      	ldr	r3, [r2, #12]
 8005250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005254:	60d3      	str	r3, [r2, #12]
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <printToBufferWithoutEndUART1+0x78>)
	while (*str != 0)
 8005258:	7802      	ldrb	r2, [r0, #0]
 800525a:	b92a      	cbnz	r2, 8005268 <printToBufferWithoutEndUART1+0x20>
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 800525c:	4a17      	ldr	r2, [pc, #92]	; (80052bc <printToBufferWithoutEndUART1+0x74>)
 800525e:	68d3      	ldr	r3, [r2, #12]
 8005260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005264:	60d3      	str	r3, [r2, #12]
}
 8005266:	bd10      	pop	{r4, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8005268:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800526c:	b292      	uxth	r2, r2
 800526e:	1c54      	adds	r4, r2, #1
 8005270:	b2a4      	uxth	r4, r4
 8005272:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 8005276:	f810 4b01 	ldrb.w	r4, [r0], #1
 800527a:	441a      	add	r2, r3
 800527c:	b2e4      	uxtb	r4, r4
 800527e:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005282:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005286:	b292      	uxth	r2, r2
 8005288:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800528c:	bf08      	it	eq
 800528e:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005292:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005296:	3201      	adds	r2, #1
 8005298:	b292      	uxth	r2, r2
 800529a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800529e:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 80052a2:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80052a6:	b2a4      	uxth	r4, r4
 80052a8:	b292      	uxth	r2, r2
 80052aa:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80052ac:	bf3e      	ittt	cc
 80052ae:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 80052b2:	b292      	uxthcc	r2, r2
 80052b4:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 80052b8:	e7ce      	b.n	8005258 <printToBufferWithoutEndUART1+0x10>
 80052ba:	bf00      	nop
 80052bc:	40013800 	.word	0x40013800
 80052c0:	200002b4 	.word	0x200002b4

080052c4 <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 80052c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052c6:	9101      	str	r1, [sp, #4]
 80052c8:	f88d 2003 	strb.w	r2, [sp, #3]
	char *str1;
	if (koma == 0)
 80052cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
{
 80052d0:	4604      	mov	r4, r0
		str1 = itoa(value);
 80052d2:	9801      	ldr	r0, [sp, #4]
	if (koma == 0)
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d13f      	bne.n	8005358 <printToBufferUART1D+0x94>
		str1 = itoa(value);
 80052d8:	f7fb ffca 	bl	8001270 <itoa>
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80052dc:	2500      	movs	r5, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80052de:	4a47      	ldr	r2, [pc, #284]	; (80053fc <printToBufferUART1D+0x138>)
 80052e0:	68d3      	ldr	r3, [r2, #12]
 80052e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052e6:	60d3      	str	r3, [r2, #12]
	while (*str != 0)
 80052e8:	4b45      	ldr	r3, [pc, #276]	; (8005400 <printToBufferUART1D+0x13c>)
 80052ea:	7822      	ldrb	r2, [r4, #0]
 80052ec:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80052f0:	2a00      	cmp	r2, #0
 80052f2:	d136      	bne.n	8005362 <printToBufferUART1D+0x9e>
 80052f4:	3801      	subs	r0, #1

	}

	while (*str1 != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 80052f6:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
	while (*str1 != 0)
 80052fa:	f810 4f01 	ldrb.w	r4, [r0, #1]!
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 80052fe:	b292      	uxth	r2, r2
	while (*str1 != 0)
 8005300:	2c00      	cmp	r4, #0
 8005302:	d157      	bne.n	80053b4 <printToBufferUART1D+0xf0>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8005304:	1c51      	adds	r1, r2, #1
 8005306:	b289      	uxth	r1, r1
 8005308:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 800530c:	210a      	movs	r1, #10
 800530e:	441a      	add	r2, r3
 8005310:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005314:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005318:	b292      	uxth	r2, r2
 800531a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800531e:	bf08      	it	eq
 8005320:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005324:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005328:	3201      	adds	r2, #1
 800532a:	b292      	uxth	r2, r2
 800532c:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005330:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 8005334:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005338:	b289      	uxth	r1, r1
 800533a:	b292      	uxth	r2, r2
 800533c:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800533e:	bf3e      	ittt	cc
 8005340:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 8005344:	b292      	uxthcc	r2, r2
 8005346:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 800534a:	4a2c      	ldr	r2, [pc, #176]	; (80053fc <printToBufferUART1D+0x138>)
 800534c:	68d3      	ldr	r3, [r2, #12]
 800534e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005352:	60d3      	str	r3, [r2, #12]
}
 8005354:	b003      	add	sp, #12
 8005356:	bd30      	pop	{r4, r5, pc}
		str1 = itoa_koma(value,koma);
 8005358:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800535c:	f7fc f800 	bl	8001360 <itoa_koma>
 8005360:	e7bc      	b.n	80052dc <printToBufferUART1D+0x18>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8005362:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005366:	b292      	uxth	r2, r2
 8005368:	1c51      	adds	r1, r2, #1
 800536a:	b289      	uxth	r1, r1
 800536c:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 8005370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005374:	441a      	add	r2, r3
 8005376:	b2c9      	uxtb	r1, r1
 8005378:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800537c:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005380:	b292      	uxth	r2, r2
 8005382:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005386:	bf08      	it	eq
 8005388:	f8a3 5454 	strheq.w	r5, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800538c:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005390:	3201      	adds	r2, #1
 8005392:	b292      	uxth	r2, r2
 8005394:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005398:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 800539c:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80053a0:	b289      	uxth	r1, r1
 80053a2:	b292      	uxth	r2, r2
 80053a4:	4291      	cmp	r1, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80053a6:	bf3e      	ittt	cc
 80053a8:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 80053ac:	b292      	uxthcc	r2, r2
 80053ae:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 80053b2:	e79a      	b.n	80052ea <printToBufferUART1D+0x26>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 80053b4:	1c54      	adds	r4, r2, #1
 80053b6:	b2a4      	uxth	r4, r4
 80053b8:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 80053bc:	7804      	ldrb	r4, [r0, #0]
 80053be:	441a      	add	r2, r3
 80053c0:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80053c4:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80053c8:	b292      	uxth	r2, r2
 80053ca:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80053ce:	bf08      	it	eq
 80053d0:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80053d4:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80053d8:	3201      	adds	r2, #1
 80053da:	b292      	uxth	r2, r2
 80053dc:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80053e0:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 80053e4:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80053e8:	b2a4      	uxth	r4, r4
 80053ea:	b292      	uxth	r2, r2
 80053ec:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80053ee:	bf3e      	ittt	cc
 80053f0:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 80053f4:	b292      	uxthcc	r2, r2
 80053f6:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 80053fa:	e77c      	b.n	80052f6 <printToBufferUART1D+0x32>
 80053fc:	40013800 	.word	0x40013800
 8005400:	200002b4 	.word	0x200002b4

08005404 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005404:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005406:	e003      	b.n	8005410 <LoopCopyDataInit>

08005408 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800540a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800540c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800540e:	3104      	adds	r1, #4

08005410 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005410:	480a      	ldr	r0, [pc, #40]	; (800543c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005414:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005416:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005418:	d3f6      	bcc.n	8005408 <CopyDataInit>
  ldr r2, =_sbss
 800541a:	4a0a      	ldr	r2, [pc, #40]	; (8005444 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800541c:	e002      	b.n	8005424 <LoopFillZerobss>

0800541e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800541e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005420:	f842 3b04 	str.w	r3, [r2], #4

08005424 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005424:	4b08      	ldr	r3, [pc, #32]	; (8005448 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005426:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005428:	d3f9      	bcc.n	800541e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800542a:	f7ff fe75 	bl	8005118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800542e:	f000 f9a5 	bl	800577c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005432:	f7ff fa1f 	bl	8004874 <main>
  bx lr
 8005436:	4770      	bx	lr
  ldr r3, =_sidata
 8005438:	08006d48 	.word	0x08006d48
  ldr r0, =_sdata
 800543c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005440:	20000290 	.word	0x20000290
  ldr r2, =_sbss
 8005444:	20000290 	.word	0x20000290
  ldr r3, = _ebss
 8005448:	20000a20 	.word	0x20000a20

0800544c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800544c:	e7fe      	b.n	800544c <ADC1_IRQHandler>

0800544e <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800544e:	4602      	mov	r2, r0
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8005450:	6880      	ldr	r0, [r0, #8]
 8005452:	b510      	push	{r4, lr}
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8005454:	f010 0001 	ands.w	r0, r0, #1
 8005458:	d10c      	bne.n	8005474 <LL_ADC_Init+0x26>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800545a:	6853      	ldr	r3, [r2, #4]
 800545c:	684c      	ldr	r4, [r1, #4]
 800545e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005462:	4323      	orrs	r3, r4
 8005464:	6053      	str	r3, [r2, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8005466:	6893      	ldr	r3, [r2, #8]
 8005468:	6809      	ldr	r1, [r1, #0]
 800546a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800546e:	430b      	orrs	r3, r1
 8005470:	6093      	str	r3, [r2, #8]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8005472:	bd10      	pop	{r4, pc}
    status = ERROR;
 8005474:	2001      	movs	r0, #1
 8005476:	e7fc      	b.n	8005472 <LL_ADC_Init+0x24>

08005478 <LL_ADC_REG_Init>:
 8005478:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800547a:	b510      	push	{r4, lr}
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800547c:	07db      	lsls	r3, r3, #31
 800547e:	d41b      	bmi.n	80054b8 <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 8005480:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005482:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 8005484:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005488:	b112      	cbz	r2, 8005490 <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 800548a:	688c      	ldr	r4, [r1, #8]
 800548c:	4313      	orrs	r3, r2
 800548e:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8005490:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8005492:	6883      	ldr	r3, [r0, #8]
 8005494:	680c      	ldr	r4, [r1, #0]
 8005496:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800549a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800549e:	4323      	orrs	r3, r4
 80054a0:	68cc      	ldr	r4, [r1, #12]
 80054a2:	6909      	ldr	r1, [r1, #16]
 80054a4:	4323      	orrs	r3, r4
 80054a6:	430b      	orrs	r3, r1
 80054a8:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80054aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80054ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054b0:	4313      	orrs	r3, r2
 80054b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 80054b4:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80054b6:	bd10      	pop	{r4, pc}
    status = ERROR;
 80054b8:	2001      	movs	r0, #1
 80054ba:	e7fc      	b.n	80054b6 <LL_ADC_REG_Init+0x3e>

080054bc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80054c0:	680d      	ldr	r5, [r1, #0]
{
 80054c2:	4604      	mov	r4, r0
  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80054c4:	f3c5 250f 	ubfx	r5, r5, #8, #16
 80054c8:	fa95 f2a5 	rbit	r2, r5
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80054cc:	2703      	movs	r7, #3
  pinpos = POSITION_VAL(pinmask);
 80054ce:	fab2 f282 	clz	r2, r2
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80054d2:	f04f 0c04 	mov.w	ip, #4
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80054d6:	f04f 1e01 	mov.w	lr, #65537	; 0x10001
        currentpin = (0x00000101uL << pinpos);
 80054da:	f240 1801 	movw	r8, #257	; 0x101
  while ((pinmask  >> pinpos) != 0u)
 80054de:	fa35 f002 	lsrs.w	r0, r5, r2
 80054e2:	d101      	bne.n	80054e8 <LL_GPIO_Init+0x2c>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 80054e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1u << pinpos)) != 0u)
 80054e8:	2301      	movs	r3, #1
 80054ea:	4093      	lsls	r3, r2
 80054ec:	422b      	tst	r3, r5
 80054ee:	d067      	beq.n	80055c0 <LL_GPIO_Init+0x104>
      if (pinpos < GPIO_PIN_MASK_POS)
 80054f0:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80054f2:	bf88      	it	hi
 80054f4:	f1a2 0308 	subhi.w	r3, r2, #8
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80054f8:	f8d1 a004 	ldr.w	sl, [r1, #4]
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80054fc:	bf8a      	itet	hi
 80054fe:	fa0e f303 	lslhi.w	r3, lr, r3
        currentpin = (0x00000101uL << pinpos);
 8005502:	fa08 f302 	lslls.w	r3, r8, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005506:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800550a:	f1ba 0f08 	cmp.w	sl, #8
 800550e:	d10d      	bne.n	800552c <LL_GPIO_Init+0x70>
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8005510:	68e6      	ldr	r6, [r4, #12]
 8005512:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8005516:	fa9b f9ab 	rbit	r9, fp
 800551a:	fab9 f989 	clz	r9, r9
 800551e:	6908      	ldr	r0, [r1, #16]
 8005520:	ea26 060b 	bic.w	r6, r6, fp
 8005524:	fa00 f009 	lsl.w	r0, r0, r9
 8005528:	4306      	orrs	r6, r0
 800552a:	60e6      	str	r6, [r4, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800552c:	ea4f 6913 	mov.w	r9, r3, lsr #24
 8005530:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005534:	fab6 f686 	clz	r6, r6
 8005538:	fa93 fba3 	rbit	fp, r3
 800553c:	200f      	movs	r0, #15
 800553e:	fabb fb8b 	clz	fp, fp
 8005542:	00b6      	lsls	r6, r6, #2
 8005544:	fa00 f606 	lsl.w	r6, r0, r6
 8005548:	f854 0009 	ldr.w	r0, [r4, r9]
 800554c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005550:	ea20 0606 	bic.w	r6, r0, r6
 8005554:	fa0a fb0b 	lsl.w	fp, sl, fp
 8005558:	ea46 060b 	orr.w	r6, r6, fp
 800555c:	f844 6009 	str.w	r6, [r4, r9]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005560:	6848      	ldr	r0, [r1, #4]
 8005562:	f020 0008 	bic.w	r0, r0, #8
 8005566:	2801      	cmp	r0, #1
 8005568:	d12a      	bne.n	80055c0 <LL_GPIO_Init+0x104>
 800556a:	fa93 f0a3 	rbit	r0, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800556e:	fab0 f080 	clz	r0, r0
 8005572:	fa93 fba3 	rbit	fp, r3
 8005576:	fabb fb8b 	clz	fp, fp
 800557a:	0080      	lsls	r0, r0, #2
 800557c:	fa07 f000 	lsl.w	r0, r7, r0
 8005580:	ea26 0600 	bic.w	r6, r6, r0
 8005584:	6888      	ldr	r0, [r1, #8]
 8005586:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800558a:	fa00 fb0b 	lsl.w	fp, r0, fp
 800558e:	ea46 060b 	orr.w	r6, r6, fp
 8005592:	f844 6009 	str.w	r6, [r4, r9]
 8005596:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800559a:	faba fa8a 	clz	sl, sl
 800559e:	fa93 f3a3 	rbit	r3, r3
 80055a2:	fab3 f383 	clz	r3, r3
 80055a6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80055aa:	fa0c fa0a 	lsl.w	sl, ip, sl
 80055ae:	ea26 0a0a 	bic.w	sl, r6, sl
 80055b2:	68ce      	ldr	r6, [r1, #12]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	409e      	lsls	r6, r3
 80055b8:	ea4a 0606 	orr.w	r6, sl, r6
 80055bc:	f844 6009 	str.w	r6, [r4, r9]
    pinpos++;
 80055c0:	3201      	adds	r2, #1
 80055c2:	e78c      	b.n	80054de <LL_GPIO_Init+0x22>

080055c4 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80055c6:	4a04      	ldr	r2, [pc, #16]	; (80055d8 <RCC_GetHCLKClockFreq+0x14>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80055ce:	5cd3      	ldrb	r3, [r2, r3]
}
 80055d0:	40d8      	lsrs	r0, r3
 80055d2:	4770      	bx	lr
 80055d4:	40021000 	.word	0x40021000
 80055d8:	08006d25 	.word	0x08006d25

080055dc <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80055de:	4a04      	ldr	r2, [pc, #16]	; (80055f0 <RCC_GetPCLK1ClockFreq+0x14>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80055e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80055e8:	40d8      	lsrs	r0, r3
 80055ea:	4770      	bx	lr
 80055ec:	40021000 	.word	0x40021000
 80055f0:	08006d35 	.word	0x08006d35

080055f4 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80055f4:	4b03      	ldr	r3, [pc, #12]	; (8005604 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80055f6:	4a04      	ldr	r2, [pc, #16]	; (8005608 <RCC_GetPCLK2ClockFreq+0x14>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80055fe:	5cd3      	ldrb	r3, [r2, r3]
}
 8005600:	40d8      	lsrs	r0, r3
 8005602:	4770      	bx	lr
 8005604:	40021000 	.word	0x40021000
 8005608:	08006d35 	.word	0x08006d35

0800560c <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 800560e:	685a      	ldr	r2, [r3, #4]
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8005610:	03d2      	lsls	r2, r2, #15
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8005612:	bf41      	itttt	mi
 8005614:	6ad8      	ldrmi	r0, [r3, #44]	; 0x2c
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8005616:	4a08      	ldrmi	r2, [pc, #32]	; (8005638 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8005618:	f000 000f 	andmi.w	r0, r0, #15
 800561c:	3001      	addmi	r0, #1
 800561e:	bf48      	it	mi
 8005620:	fbb2 f0f0 	udivmi	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8005624:	685b      	ldr	r3, [r3, #4]
      pllinputfreq = HSI_VALUE / 2U;
 8005626:	bf58      	it	pl
 8005628:	4804      	ldrpl	r0, [pc, #16]	; (800563c <RCC_PLL_GetFreqDomain_SYS+0x30>)

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800562a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800562e:	3302      	adds	r3, #2
}
 8005630:	4358      	muls	r0, r3
 8005632:	4770      	bx	lr
 8005634:	40021000 	.word	0x40021000
 8005638:	007a1200 	.word	0x007a1200
 800563c:	003d0900 	.word	0x003d0900

08005640 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <RCC_GetSystemClockFreq+0x14>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8005648:	2b08      	cmp	r3, #8
 800564a:	d101      	bne.n	8005650 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800564c:	f7ff bfde 	b.w	800560c <RCC_PLL_GetFreqDomain_SYS>
}
 8005650:	4801      	ldr	r0, [pc, #4]	; (8005658 <RCC_GetSystemClockFreq+0x18>)
 8005652:	4770      	bx	lr
 8005654:	40021000 	.word	0x40021000
 8005658:	007a1200 	.word	0x007a1200

0800565c <LL_RCC_GetSystemClocksFreq>:
{
 800565c:	b508      	push	{r3, lr}
 800565e:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005660:	f7ff ffee 	bl	8005640 <RCC_GetSystemClockFreq>
 8005664:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005666:	f7ff ffad 	bl	80055c4 <RCC_GetHCLKClockFreq>
 800566a:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800566c:	f7ff ffb6 	bl	80055dc <RCC_GetPCLK1ClockFreq>
 8005670:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005672:	6848      	ldr	r0, [r1, #4]
 8005674:	f7ff ffbe 	bl	80055f4 <RCC_GetPCLK2ClockFreq>
 8005678:	60c8      	str	r0, [r1, #12]
}
 800567a:	bd08      	pop	{r3, pc}

0800567c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800567c:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800567e:	68c3      	ldr	r3, [r0, #12]
 8005680:	4604      	mov	r4, r0
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005682:	049b      	lsls	r3, r3, #18
{
 8005684:	460d      	mov	r5, r1
 8005686:	b085      	sub	sp, #20
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005688:	d502      	bpl.n	8005690 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 800568a:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800568c:	b005      	add	sp, #20
 800568e:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8005690:	684b      	ldr	r3, [r1, #4]
 8005692:	68c9      	ldr	r1, [r1, #12]
 8005694:	68c2      	ldr	r2, [r0, #12]
 8005696:	430b      	orrs	r3, r1
 8005698:	6929      	ldr	r1, [r5, #16]
 800569a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800569e:	430b      	orrs	r3, r1
 80056a0:	69a9      	ldr	r1, [r5, #24]
 80056a2:	f022 020c 	bic.w	r2, r2, #12
 80056a6:	430b      	orrs	r3, r1
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80056ac:	6903      	ldr	r3, [r0, #16]
 80056ae:	68aa      	ldr	r2, [r5, #8]
 80056b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80056b4:	4313      	orrs	r3, r2
 80056b6:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80056b8:	6943      	ldr	r3, [r0, #20]
 80056ba:	696a      	ldr	r2, [r5, #20]
 80056bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c0:	4313      	orrs	r3, r2
 80056c2:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80056c4:	4668      	mov	r0, sp
 80056c6:	f7ff ffc9 	bl	800565c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80056ca:	4b1f      	ldr	r3, [pc, #124]	; (8005748 <LL_USART_Init+0xcc>)
 80056cc:	429c      	cmp	r4, r3
 80056ce:	d124      	bne.n	800571a <LL_USART_Init+0x9e>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80056d0:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d0d9      	beq.n	800568a <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 80056d6:	682a      	ldr	r2, [r5, #0]
 80056d8:	2a00      	cmp	r2, #0
 80056da:	d0d6      	beq.n	800568a <LL_USART_Init+0xe>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80056dc:	2319      	movs	r3, #25
 80056de:	434b      	muls	r3, r1
 80056e0:	69a9      	ldr	r1, [r5, #24]
 80056e2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80056e6:	f04f 0164 	mov.w	r1, #100	; 0x64
 80056ea:	d11f      	bne.n	800572c <LL_USART_Init+0xb0>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80056ec:	0052      	lsls	r2, r2, #1
 80056ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80056f2:	fbb3 f0f1 	udiv	r0, r3, r1
 80056f6:	fb01 3310 	mls	r3, r1, r0, r3
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	3332      	adds	r3, #50	; 0x32
 80056fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005702:	f003 0207 	and.w	r2, r3, #7
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800570c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005710:	4413      	add	r3, r2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005712:	b29b      	uxth	r3, r3
      status = SUCCESS;
 8005714:	2000      	movs	r0, #0
 8005716:	60a3      	str	r3, [r4, #8]
 8005718:	e7b8      	b.n	800568c <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <LL_USART_Init+0xd0>)
 800571c:	429c      	cmp	r4, r3
 800571e:	d101      	bne.n	8005724 <LL_USART_Init+0xa8>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005720:	9902      	ldr	r1, [sp, #8]
 8005722:	e7d6      	b.n	80056d2 <LL_USART_Init+0x56>
    else if (USARTx == USART3)
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <LL_USART_Init+0xd4>)
 8005726:	429c      	cmp	r4, r3
 8005728:	d1af      	bne.n	800568a <LL_USART_Init+0xe>
 800572a:	e7f9      	b.n	8005720 <LL_USART_Init+0xa4>
 800572c:	0092      	lsls	r2, r2, #2
 800572e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005732:	fbb3 f2f1 	udiv	r2, r3, r1
 8005736:	fb01 3312 	mls	r3, r1, r2, r3
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	3332      	adds	r3, #50	; 0x32
 800573e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005742:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005746:	e7e4      	b.n	8005712 <LL_USART_Init+0x96>
 8005748:	40013800 	.word	0x40013800
 800574c:	40004400 	.word	0x40004400
 8005750:	40004800 	.word	0x40004800

08005754 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005758:	fbb0 f0f3 	udiv	r0, r0, r3
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800575c:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800575e:	4b03      	ldr	r3, [pc, #12]	; (800576c <LL_Init1msTick+0x18>)
 8005760:	3801      	subs	r0, #1
 8005762:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005766:	2205      	movs	r2, #5
 8005768:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 800576a:	4770      	bx	lr
 800576c:	e000e010 	.word	0xe000e010

08005770 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005770:	4b01      	ldr	r3, [pc, #4]	; (8005778 <LL_SetSystemCoreClock+0x8>)
 8005772:	6018      	str	r0, [r3, #0]
}
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	2000028c 	.word	0x2000028c

0800577c <__libc_init_array>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	2600      	movs	r6, #0
 8005780:	4d0c      	ldr	r5, [pc, #48]	; (80057b4 <__libc_init_array+0x38>)
 8005782:	4c0d      	ldr	r4, [pc, #52]	; (80057b8 <__libc_init_array+0x3c>)
 8005784:	1b64      	subs	r4, r4, r5
 8005786:	10a4      	asrs	r4, r4, #2
 8005788:	42a6      	cmp	r6, r4
 800578a:	d109      	bne.n	80057a0 <__libc_init_array+0x24>
 800578c:	f000 f830 	bl	80057f0 <_init>
 8005790:	2600      	movs	r6, #0
 8005792:	4d0a      	ldr	r5, [pc, #40]	; (80057bc <__libc_init_array+0x40>)
 8005794:	4c0a      	ldr	r4, [pc, #40]	; (80057c0 <__libc_init_array+0x44>)
 8005796:	1b64      	subs	r4, r4, r5
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	42a6      	cmp	r6, r4
 800579c:	d105      	bne.n	80057aa <__libc_init_array+0x2e>
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a4:	4798      	blx	r3
 80057a6:	3601      	adds	r6, #1
 80057a8:	e7ee      	b.n	8005788 <__libc_init_array+0xc>
 80057aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ae:	4798      	blx	r3
 80057b0:	3601      	adds	r6, #1
 80057b2:	e7f2      	b.n	800579a <__libc_init_array+0x1e>
 80057b4:	08006d40 	.word	0x08006d40
 80057b8:	08006d40 	.word	0x08006d40
 80057bc:	08006d40 	.word	0x08006d40
 80057c0:	08006d44 	.word	0x08006d44

080057c4 <memcpy>:
 80057c4:	440a      	add	r2, r1
 80057c6:	4291      	cmp	r1, r2
 80057c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057cc:	d100      	bne.n	80057d0 <memcpy+0xc>
 80057ce:	4770      	bx	lr
 80057d0:	b510      	push	{r4, lr}
 80057d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057d6:	4291      	cmp	r1, r2
 80057d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057dc:	d1f9      	bne.n	80057d2 <memcpy+0xe>
 80057de:	bd10      	pop	{r4, pc}

080057e0 <memset>:
 80057e0:	4603      	mov	r3, r0
 80057e2:	4402      	add	r2, r0
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d100      	bne.n	80057ea <memset+0xa>
 80057e8:	4770      	bx	lr
 80057ea:	f803 1b01 	strb.w	r1, [r3], #1
 80057ee:	e7f9      	b.n	80057e4 <memset+0x4>

080057f0 <_init>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	bf00      	nop
 80057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f6:	bc08      	pop	{r3}
 80057f8:	469e      	mov	lr, r3
 80057fa:	4770      	bx	lr

080057fc <_fini>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	bf00      	nop
 8005800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005802:	bc08      	pop	{r3}
 8005804:	469e      	mov	lr, r3
 8005806:	4770      	bx	lr
